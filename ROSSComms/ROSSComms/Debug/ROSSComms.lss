
ROSSComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00802000  00000f3c  00000fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00802130  00802130  00001100  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004148  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021d0  00000000  00000000  000053dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d14  00000000  00000000  000075ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000082c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ae5  00000000  00000000  0000859c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092c  00000000  00000000  0000b081  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000b9ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_7>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_8>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_12>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	11 e2       	ldi	r17, 0x21	; 33
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	ec e3       	ldi	r30, 0x3C	; 60
  c0:	ff e0       	ldi	r31, 0x0F	; 15
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 33       	cpi	r26, 0x30	; 48
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e2       	ldi	r18, 0x21	; 33
  d0:	a0 e3       	ldi	r26, 0x30	; 48
  d2:	b1 e2       	ldi	r27, 0x21	; 33
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	af 34       	cpi	r26, 0x4F	; 79
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 0c 03 	call	0x618	; 0x618 <main>
  e2:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z11configureIOv>:

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b6 e0       	ldi	r27, 0x06	; 6
  ee:	34 e0       	ldi	r19, 0x04	; 4
  f0:	12 96       	adiw	r26, 0x02	; 2
  f2:	3c 93       	st	X, r19
  f4:	12 97       	sbiw	r26, 0x02	; 2
  f6:	e0 e4       	ldi	r30, 0x40	; 64
  f8:	f6 e0       	ldi	r31, 0x06	; 6
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	82 83       	std	Z+2, r24	; 0x02
  fe:	90 e2       	ldi	r25, 0x20	; 32
 100:	92 83       	std	Z+2, r25	; 0x02
 102:	84 8b       	std	Z+20, r24	; 0x14
 104:	85 8b       	std	Z+21, r24	; 0x15
 106:	12 96       	adiw	r26, 0x02	; 2
 108:	8c 93       	st	X, r24
 10a:	12 97       	sbiw	r26, 0x02	; 2
 10c:	20 e8       	ldi	r18, 0x80	; 128
 10e:	12 96       	adiw	r26, 0x02	; 2
 110:	2c 93       	st	X, r18
 112:	12 97       	sbiw	r26, 0x02	; 2
 114:	28 e1       	ldi	r18, 0x18	; 24
 116:	57 96       	adiw	r26, 0x17	; 23
 118:	2c 93       	st	X, r18
 11a:	57 97       	sbiw	r26, 0x17	; 23
 11c:	11 96       	adiw	r26, 0x01	; 1
 11e:	9c 93       	st	X, r25
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	28 e0       	ldi	r18, 0x08	; 8
 124:	11 96       	adiw	r26, 0x01	; 1
 126:	2c 93       	st	X, r18
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	41 83       	std	Z+1, r20	; 0x01
 12c:	a0 e6       	ldi	r26, 0x60	; 96
 12e:	b6 e0       	ldi	r27, 0x06	; 6
 130:	11 96       	adiw	r26, 0x01	; 1
 132:	9c 93       	st	X, r25
 134:	11 97       	sbiw	r26, 0x01	; 1
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	8c 93       	st	X, r24
 13a:	11 97       	sbiw	r26, 0x01	; 1
 13c:	31 83       	std	Z+1, r19	; 0x01
 13e:	21 83       	std	Z+1, r18	; 0x01
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	12 96       	adiw	r26, 0x02	; 2
 144:	8c 93       	st	X, r24
 146:	08 95       	ret

00000148 <_Z27configureExternalOscillatorv>:
 148:	e0 e5       	ldi	r30, 0x50	; 80
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	8b e4       	ldi	r24, 0x4B	; 75
 14e:	82 83       	std	Z+2, r24	; 0x02
 150:	80 81       	ld	r24, Z
 152:	88 60       	ori	r24, 0x08	; 8
 154:	80 83       	st	Z, r24
 156:	81 81       	ldd	r24, Z+1	; 0x01
 158:	83 fd       	sbrc	r24, 3
 15a:	09 c0       	rjmp	.+18     	; 0x16e <_Z27configureExternalOscillatorv+0x26>
 15c:	a0 e4       	ldi	r26, 0x40	; 64
 15e:	b6 e0       	ldi	r27, 0x06	; 6
 160:	98 e0       	ldi	r25, 0x08	; 8
 162:	15 96       	adiw	r26, 0x05	; 5
 164:	9c 93       	st	X, r25
 166:	15 97       	sbiw	r26, 0x05	; 5
 168:	81 81       	ldd	r24, Z+1	; 0x01
 16a:	83 ff       	sbrs	r24, 3
 16c:	fa cf       	rjmp	.-12     	; 0x162 <_Z27configureExternalOscillatorv+0x1a>
 16e:	88 e0       	ldi	r24, 0x08	; 8
 170:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 174:	88 ed       	ldi	r24, 0xD8	; 216
 176:	84 bf       	out	0x34, r24	; 52
 178:	e0 e5       	ldi	r30, 0x50	; 80
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	88 ec       	ldi	r24, 0xC8	; 200
 17e:	85 83       	std	Z+5, r24	; 0x05
 180:	80 81       	ld	r24, Z
 182:	80 61       	ori	r24, 0x10	; 16
 184:	80 83       	st	Z, r24
 186:	81 81       	ldd	r24, Z+1	; 0x01
 188:	84 fd       	sbrc	r24, 4
 18a:	09 c0       	rjmp	.+18     	; 0x19e <_Z27configureExternalOscillatorv+0x56>
 18c:	a0 e4       	ldi	r26, 0x40	; 64
 18e:	b6 e0       	ldi	r27, 0x06	; 6
 190:	98 e0       	ldi	r25, 0x08	; 8
 192:	15 96       	adiw	r26, 0x05	; 5
 194:	9c 93       	st	X, r25
 196:	15 97       	sbiw	r26, 0x05	; 5
 198:	81 81       	ldd	r24, Z+1	; 0x01
 19a:	84 ff       	sbrs	r24, 4
 19c:	fa cf       	rjmp	.-12     	; 0x192 <_Z27configureExternalOscillatorv+0x4a>
 19e:	88 e0       	ldi	r24, 0x08	; 8
 1a0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 1a4:	88 ed       	ldi	r24, 0xD8	; 216
 1a6:	84 bf       	out	0x34, r24	; 52
 1a8:	e0 e4       	ldi	r30, 0x40	; 64
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	10 82       	st	Z, r1
 1ae:	84 bf       	out	0x34, r24	; 52
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <_Z14configureUSARTv>:
 1b6:	e0 e4       	ldi	r30, 0x40	; 64
 1b8:	f6 e0       	ldi	r31, 0x06	; 6
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	81 83       	std	Z+1, r24	; 0x01
 1be:	80 e4       	ldi	r24, 0x40	; 64
 1c0:	82 83       	std	Z+2, r24	; 0x02
 1c2:	86 85       	ldd	r24, Z+14	; 0x0e
 1c4:	80 61       	ori	r24, 0x10	; 16
 1c6:	86 87       	std	Z+14, r24	; 0x0e
 1c8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ca:	f8 e0       	ldi	r31, 0x08	; 8
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	84 83       	std	Z+4, r24	; 0x04
 1d0:	82 e2       	ldi	r24, 0x22	; 34
 1d2:	86 83       	std	Z+6, r24	; 0x06
 1d4:	17 82       	std	Z+7, r1	; 0x07
 1d6:	83 81       	ldd	r24, Z+3	; 0x03
 1d8:	80 61       	ori	r24, 0x10	; 16
 1da:	83 83       	std	Z+3, r24	; 0x03
 1dc:	83 81       	ldd	r24, Z+3	; 0x03
 1de:	88 60       	ori	r24, 0x08	; 8
 1e0:	83 83       	std	Z+3, r24	; 0x03
 1e2:	08 95       	ret

000001e4 <_Z21configureTimerCounterv>:
 1e4:	e0 e0       	ldi	r30, 0x00	; 0
 1e6:	f8 e0       	ldi	r31, 0x08	; 8
 1e8:	87 e0       	ldi	r24, 0x07	; 7
 1ea:	80 83       	st	Z, r24
 1ec:	89 e0       	ldi	r24, 0x09	; 9
 1ee:	9d e3       	ldi	r25, 0x3D	; 61
 1f0:	86 a3       	std	Z+38, r24	; 0x26
 1f2:	97 a3       	std	Z+39, r25	; 0x27
 1f4:	11 82       	std	Z+1, r1	; 0x01
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	86 83       	std	Z+6, r24	; 0x06
 1fa:	08 95       	ret

000001fc <__vector_12>:
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
 20c:	e0 e0       	ldi	r30, 0x00	; 0
 20e:	f8 e0       	ldi	r31, 0x08	; 8
 210:	84 85       	ldd	r24, Z+12	; 0x0c
 212:	81 60       	ori	r24, 0x01	; 1
 214:	84 87       	std	Z+12, r24	; 0x0c
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <broadcastStatus>
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_7>:
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_8>:
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	8f 93       	push	r24
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
 250:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <globalToggle>
 254:	88 23       	and	r24, r24
 256:	31 f0       	breq	.+12     	; 0x264 <__vector_8+0x24>
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 25e:	10 92 4d 21 	sts	0x214D, r1	; 0x80214d <globalToggle>
 262:	06 c0       	rjmp	.+12     	; 0x270 <__vector_8+0x30>
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 4d 21 	sts	0x214D, r24	; 0x80214d <globalToggle>
 270:	e0 e0       	ldi	r30, 0x00	; 0
 272:	f4 e0       	ldi	r31, 0x04	; 4
 274:	10 86       	std	Z+8, r1	; 0x08
 276:	11 86       	std	Z+9, r1	; 0x09
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	83 83       	std	Z+3, r24	; 0x03
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <_Z17ReadSignatureBytej>:

uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 28c:	aa ec       	ldi	r26, 0xCA	; 202
 28e:	b1 e0       	ldi	r27, 0x01	; 1
 290:	22 e0       	ldi	r18, 0x02	; 2
 292:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
 294:	fc 01       	movw	r30, r24
 296:	84 91       	lpm	r24, Z
	//  __asm__ ("lpm \n  mov %0, r0 \n" : "=r" (Result) : "z" (Address) : "r0");
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 298:	1c 92       	st	X, r1
	return Result;
}
 29a:	08 95       	ret

0000029c <_Z21configureSerialNumberv>:

/*
Note: This function requires serial and should be called after configureUSART()
*/
void configureSerialNumber(){
 29c:	2f 92       	push	r2
 29e:	3f 92       	push	r3
 2a0:	4f 92       	push	r4
 2a2:	5f 92       	push	r5
 2a4:	6f 92       	push	r6
 2a6:	7f 92       	push	r7
 2a8:	8f 92       	push	r8
 2aa:	9f 92       	push	r9
 2ac:	af 92       	push	r10
 2ae:	bf 92       	push	r11
 2b0:	cf 92       	push	r12
 2b2:	df 92       	push	r13
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
	DeviceSignature[ 0] = ReadSignatureByte(LOTNUM0);
 2c0:	88 e0       	ldi	r24, 0x08	; 8
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2c8:	c2 e4       	ldi	r28, 0x42	; 66
 2ca:	d1 e2       	ldi	r29, 0x21	; 33
 2cc:	88 83       	st	Y, r24
	DeviceSignature[ 1] = ReadSignatureByte(LOTNUM1);
 2ce:	89 e0       	ldi	r24, 0x09	; 9
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2d6:	89 83       	std	Y+1, r24	; 0x01
	DeviceSignature[ 2] = ReadSignatureByte(LOTNUM2);
 2d8:	8a e0       	ldi	r24, 0x0A	; 10
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2e0:	8a 83       	std	Y+2, r24	; 0x02
	DeviceSignature[ 3] = ReadSignatureByte(LOTNUM3);
 2e2:	8b e0       	ldi	r24, 0x0B	; 11
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2ea:	8b 83       	std	Y+3, r24	; 0x03
	DeviceSignature[ 4] = ReadSignatureByte(LOTNUM4);
 2ec:	8c e0       	ldi	r24, 0x0C	; 12
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2f4:	8c 83       	std	Y+4, r24	; 0x04
	DeviceSignature[ 5] = ReadSignatureByte(LOTNUM5);
 2f6:	8d e0       	ldi	r24, 0x0D	; 13
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2fe:	8d 83       	std	Y+5, r24	; 0x05
	DeviceSignature[ 6] = ReadSignatureByte(WAFNUM );
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 308:	8e 83       	std	Y+6, r24	; 0x06
	DeviceSignature[ 7] = ReadSignatureByte(COORDX0);
 30a:	82 e1       	ldi	r24, 0x12	; 18
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 312:	8f 83       	std	Y+7, r24	; 0x07
	DeviceSignature[ 8] = ReadSignatureByte(COORDX1);
 314:	83 e1       	ldi	r24, 0x13	; 19
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 31c:	88 87       	std	Y+8, r24	; 0x08
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
 31e:	84 e1       	ldi	r24, 0x14	; 20
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 326:	89 87       	std	Y+9, r24	; 0x09
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
 328:	85 e1       	ldi	r24, 0x15	; 21
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 330:	8a 87       	std	Y+10, r24	; 0x0a
	
	UC_LOT_NUMBER = DeviceSignature[0];
 332:	28 80       	ld	r2, Y
 334:	31 2c       	mov	r3, r1
 336:	41 2c       	mov	r4, r1
 338:	51 2c       	mov	r5, r1
 33a:	61 2c       	mov	r6, r1
 33c:	71 2c       	mov	r7, r1
 33e:	43 01       	movw	r8, r6
 340:	a3 e4       	ldi	r26, 0x43	; 67
 342:	b1 e2       	ldi	r27, 0x21	; 33
 344:	e4 e6       	ldi	r30, 0x64	; 100
 346:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(int i = 1; i < 6; ++i){
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
 348:	8d 91       	ld	r24, X+
 34a:	8e 9f       	mul	r24, r30
 34c:	e0 01       	movw	r28, r0
 34e:	8f 9f       	mul	r24, r31
 350:	d0 0d       	add	r29, r0
 352:	11 24       	eor	r1, r1
 354:	1d 2f       	mov	r17, r29
 356:	11 0f       	add	r17, r17
 358:	11 0b       	sbc	r17, r17
 35a:	22 2d       	mov	r18, r2
 35c:	33 2d       	mov	r19, r3
 35e:	44 2d       	mov	r20, r4
 360:	55 2d       	mov	r21, r5
 362:	66 2d       	mov	r22, r6
 364:	77 2d       	mov	r23, r7
 366:	88 2d       	mov	r24, r8
 368:	99 2d       	mov	r25, r9
 36a:	ac 2e       	mov	r10, r28
 36c:	bd 2e       	mov	r11, r29
 36e:	c1 2e       	mov	r12, r17
 370:	d1 2e       	mov	r13, r17
 372:	e1 2e       	mov	r14, r17
 374:	f1 2e       	mov	r15, r17
 376:	01 2f       	mov	r16, r17
 378:	0e 94 8c 04 	call	0x918	; 0x918 <__adddi3>
 37c:	22 2e       	mov	r2, r18
 37e:	33 2e       	mov	r3, r19
 380:	44 2e       	mov	r4, r20
 382:	55 2e       	mov	r5, r21
 384:	66 2e       	mov	r6, r22
 386:	77 2e       	mov	r7, r23
 388:	88 2e       	mov	r8, r24
 38a:	99 2e       	mov	r9, r25
 38c:	ec 59       	subi	r30, 0x9C	; 156
 38e:	ff 4f       	sbci	r31, 0xFF	; 255
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
	
	UC_LOT_NUMBER = DeviceSignature[0];
	
	for(int i = 1; i < 6; ++i){
 390:	e8 35       	cpi	r30, 0x58	; 88
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	f8 07       	cpc	r31, r24
 396:	c1 f6       	brne	.-80     	; 0x348 <_Z21configureSerialNumberv+0xac>
 398:	20 92 3a 21 	sts	0x213A, r2	; 0x80213a <UC_LOT_NUMBER>
 39c:	30 92 3b 21 	sts	0x213B, r3	; 0x80213b <UC_LOT_NUMBER+0x1>
 3a0:	40 92 3c 21 	sts	0x213C, r4	; 0x80213c <UC_LOT_NUMBER+0x2>
 3a4:	50 92 3d 21 	sts	0x213D, r5	; 0x80213d <UC_LOT_NUMBER+0x3>
 3a8:	60 92 3e 21 	sts	0x213E, r6	; 0x80213e <UC_LOT_NUMBER+0x4>
 3ac:	70 92 3f 21 	sts	0x213F, r7	; 0x80213f <UC_LOT_NUMBER+0x5>
 3b0:	80 92 40 21 	sts	0x2140, r8	; 0x802140 <UC_LOT_NUMBER+0x6>
 3b4:	90 92 41 21 	sts	0x2141, r9	; 0x802141 <UC_LOT_NUMBER+0x7>
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
	}
	
	UC_WAFER_ID = DeviceSignature[6];
 3b8:	e2 e4       	ldi	r30, 0x42	; 66
 3ba:	f1 e2       	ldi	r31, 0x21	; 33
 3bc:	26 81       	ldd	r18, Z+6	; 0x06
	
	for(int i = 1; i < 4; ++i){  //Original stops at 5
		UC_WAFER_ID += DeviceSignature[i+6] * (100*i);
 3be:	a7 81       	ldd	r26, Z+7	; 0x07
 3c0:	c4 e6       	ldi	r28, 0x64	; 100
 3c2:	ac 9f       	mul	r26, r28
 3c4:	d0 01       	movw	r26, r0
 3c6:	11 24       	eor	r1, r1
 3c8:	1b 2f       	mov	r17, r27
 3ca:	11 0f       	add	r17, r17
 3cc:	11 0b       	sbc	r17, r17
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	aa 2e       	mov	r10, r26
 3de:	bb 2e       	mov	r11, r27
 3e0:	c1 2e       	mov	r12, r17
 3e2:	d1 2e       	mov	r13, r17
 3e4:	e1 2e       	mov	r14, r17
 3e6:	f1 2e       	mov	r15, r17
 3e8:	01 2f       	mov	r16, r17
 3ea:	0e 94 8c 04 	call	0x918	; 0x918 <__adddi3>
 3ee:	a0 85       	ldd	r26, Z+8	; 0x08
 3f0:	c8 ec       	ldi	r28, 0xC8	; 200
 3f2:	ac 9f       	mul	r26, r28
 3f4:	d0 01       	movw	r26, r0
 3f6:	11 24       	eor	r1, r1
 3f8:	1b 2f       	mov	r17, r27
 3fa:	11 0f       	add	r17, r17
 3fc:	11 0b       	sbc	r17, r17
 3fe:	aa 2e       	mov	r10, r26
 400:	bb 2e       	mov	r11, r27
 402:	c1 2e       	mov	r12, r17
 404:	d1 2e       	mov	r13, r17
 406:	e1 2e       	mov	r14, r17
 408:	f1 2e       	mov	r15, r17
 40a:	01 2f       	mov	r16, r17
 40c:	0e 94 8c 04 	call	0x918	; 0x918 <__adddi3>
 410:	c1 85       	ldd	r28, Z+9	; 0x09
 412:	ac e2       	ldi	r26, 0x2C	; 44
 414:	b1 e0       	ldi	r27, 0x01	; 1
 416:	ca 9f       	mul	r28, r26
 418:	f0 01       	movw	r30, r0
 41a:	cb 9f       	mul	r28, r27
 41c:	f0 0d       	add	r31, r0
 41e:	11 24       	eor	r1, r1
 420:	1f 2f       	mov	r17, r31
 422:	11 0f       	add	r17, r17
 424:	11 0b       	sbc	r17, r17
 426:	ae 2e       	mov	r10, r30
 428:	bf 2e       	mov	r11, r31
 42a:	c1 2e       	mov	r12, r17
 42c:	d1 2e       	mov	r13, r17
 42e:	e1 2e       	mov	r14, r17
 430:	f1 2e       	mov	r15, r17
 432:	01 2f       	mov	r16, r17
 434:	0e 94 8c 04 	call	0x918	; 0x918 <__adddi3>
 438:	20 93 32 21 	sts	0x2132, r18	; 0x802132 <UC_WAFER_ID>
 43c:	30 93 33 21 	sts	0x2133, r19	; 0x802133 <UC_WAFER_ID+0x1>
 440:	40 93 34 21 	sts	0x2134, r20	; 0x802134 <UC_WAFER_ID+0x2>
 444:	50 93 35 21 	sts	0x2135, r21	; 0x802135 <UC_WAFER_ID+0x3>
 448:	60 93 36 21 	sts	0x2136, r22	; 0x802136 <UC_WAFER_ID+0x4>
 44c:	70 93 37 21 	sts	0x2137, r23	; 0x802137 <UC_WAFER_ID+0x5>
 450:	80 93 38 21 	sts	0x2138, r24	; 0x802138 <UC_WAFER_ID+0x6>
 454:	90 93 39 21 	sts	0x2139, r25	; 0x802139 <UC_WAFER_ID+0x7>
	}
	
	serialNumber = -1; //Set the default serial number to -1 ("Not assigned yet")
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	9f ef       	ldi	r25, 0xFF	; 255
 45c:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 460:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
	
	//Hardcoded serial number lookups (don't judge)
	if(UC_LOT_NUMBER == 0x142DD && UC_WAFER_ID == 0x25F3)
 464:	22 2d       	mov	r18, r2
 466:	33 2d       	mov	r19, r3
 468:	44 2d       	mov	r20, r4
 46a:	55 2d       	mov	r21, r5
 46c:	66 2d       	mov	r22, r6
 46e:	77 2d       	mov	r23, r7
 470:	88 2d       	mov	r24, r8
 472:	99 2d       	mov	r25, r9
 474:	2d 3d       	cpi	r18, 0xDD	; 221
 476:	32 44       	sbci	r19, 0x42	; 66
 478:	41 40       	sbci	r20, 0x01	; 1
 47a:	51 05       	cpc	r21, r1
 47c:	61 05       	cpc	r22, r1
 47e:	71 05       	cpc	r23, r1
 480:	81 05       	cpc	r24, r1
 482:	91 05       	cpc	r25, r1
 484:	09 f5       	brne	.+66     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 486:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 48a:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 48e:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 492:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 496:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 49a:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 49e:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 4a2:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 4a6:	23 3f       	cpi	r18, 0xF3	; 243
 4a8:	35 42       	sbci	r19, 0x25	; 37
 4aa:	41 05       	cpc	r20, r1
 4ac:	51 05       	cpc	r21, r1
 4ae:	61 05       	cpc	r22, r1
 4b0:	71 05       	cpc	r23, r1
 4b2:	81 05       	cpc	r24, r1
 4b4:	91 05       	cpc	r25, r1
 4b6:	09 f0       	breq	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b8:	68 c0       	rjmp	.+208    	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
		serialNumber = 1;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 4c2:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
 4c6:	61 c0       	rjmp	.+194    	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x2E84)
 4c8:	22 2d       	mov	r18, r2
 4ca:	33 2d       	mov	r19, r3
 4cc:	44 2d       	mov	r20, r4
 4ce:	55 2d       	mov	r21, r5
 4d0:	66 2d       	mov	r22, r6
 4d2:	77 2d       	mov	r23, r7
 4d4:	88 2d       	mov	r24, r8
 4d6:	99 2d       	mov	r25, r9
 4d8:	29 31       	cpi	r18, 0x19	; 25
 4da:	39 43       	sbci	r19, 0x39	; 57
 4dc:	41 40       	sbci	r20, 0x01	; 1
 4de:	51 05       	cpc	r21, r1
 4e0:	61 05       	cpc	r22, r1
 4e2:	71 05       	cpc	r23, r1
 4e4:	81 05       	cpc	r24, r1
 4e6:	91 05       	cpc	r25, r1
 4e8:	01 f5       	brne	.+64     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 4ea:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 4ee:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 4f2:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 4f6:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 4fa:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 4fe:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 502:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 506:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 50a:	24 38       	cpi	r18, 0x84	; 132
 50c:	3e 42       	sbci	r19, 0x2E	; 46
 50e:	41 05       	cpc	r20, r1
 510:	51 05       	cpc	r21, r1
 512:	61 05       	cpc	r22, r1
 514:	71 05       	cpc	r23, r1
 516:	81 05       	cpc	r24, r1
 518:	91 05       	cpc	r25, r1
 51a:	b9 f5       	brne	.+110    	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
		serialNumber = 2;
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 524:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
 528:	30 c0       	rjmp	.+96     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
	if(UC_LOT_NUMBER == 0x13D02 && UC_WAFER_ID == 0x1AA7)
 52a:	22 2d       	mov	r18, r2
 52c:	33 2d       	mov	r19, r3
 52e:	44 2d       	mov	r20, r4
 530:	55 2d       	mov	r21, r5
 532:	66 2d       	mov	r22, r6
 534:	77 2d       	mov	r23, r7
 536:	88 2d       	mov	r24, r8
 538:	99 2d       	mov	r25, r9
 53a:	22 30       	cpi	r18, 0x02	; 2
 53c:	3d 43       	sbci	r19, 0x3D	; 61
 53e:	41 40       	sbci	r20, 0x01	; 1
 540:	51 05       	cpc	r21, r1
 542:	61 05       	cpc	r22, r1
 544:	71 05       	cpc	r23, r1
 546:	81 05       	cpc	r24, r1
 548:	91 05       	cpc	r25, r1
 54a:	f9 f4       	brne	.+62     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 54c:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 550:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 554:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 558:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 55c:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 560:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 564:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 568:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 56c:	27 3a       	cpi	r18, 0xA7	; 167
 56e:	3a 41       	sbci	r19, 0x1A	; 26
 570:	41 05       	cpc	r20, r1
 572:	51 05       	cpc	r21, r1
 574:	61 05       	cpc	r22, r1
 576:	71 05       	cpc	r23, r1
 578:	81 05       	cpc	r24, r1
 57a:	91 05       	cpc	r25, r1
 57c:	31 f4       	brne	.+12     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
		serialNumber = 3;
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 586:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
	
	
	#ifdef OUTPUT_LOT_AND_WAFER_INFO
		SendStringPC((char *)"#[Lot ID Number: ");
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	90 e2       	ldi	r25, 0x20	; 32
 58e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z12SendStringPCPc>
		SendNumPC(UC_LOT_NUMBER);
 592:	20 91 3a 21 	lds	r18, 0x213A	; 0x80213a <UC_LOT_NUMBER>
 596:	30 91 3b 21 	lds	r19, 0x213B	; 0x80213b <UC_LOT_NUMBER+0x1>
 59a:	40 91 3c 21 	lds	r20, 0x213C	; 0x80213c <UC_LOT_NUMBER+0x2>
 59e:	50 91 3d 21 	lds	r21, 0x213D	; 0x80213d <UC_LOT_NUMBER+0x3>
 5a2:	60 91 3e 21 	lds	r22, 0x213E	; 0x80213e <UC_LOT_NUMBER+0x4>
 5a6:	70 91 3f 21 	lds	r23, 0x213F	; 0x80213f <UC_LOT_NUMBER+0x5>
 5aa:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <UC_LOT_NUMBER+0x6>
 5ae:	90 91 41 21 	lds	r25, 0x2141	; 0x802141 <UC_LOT_NUMBER+0x7>
 5b2:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z9SendNumPCy>
		SendStringPC((char *)"]");
 5b6:	82 e1       	ldi	r24, 0x12	; 18
 5b8:	90 e2       	ldi	r25, 0x20	; 32
 5ba:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z12SendStringPCPc>
		
		SendStringPC((char *)"[Wafer ID Number: ");
 5be:	84 e1       	ldi	r24, 0x14	; 20
 5c0:	90 e2       	ldi	r25, 0x20	; 32
 5c2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z12SendStringPCPc>
		SendNumPC(UC_WAFER_ID);
 5c6:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 5ca:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 5ce:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 5d2:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 5d6:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 5da:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 5de:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 5e2:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 5e6:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z9SendNumPCy>
		SendStringPC((char *)"]");
 5ea:	82 e1       	ldi	r24, 0x12	; 18
 5ec:	90 e2       	ldi	r25, 0x20	; 32
 5ee:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z12SendStringPCPc>
	#endif
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	1f 91       	pop	r17
 5f8:	0f 91       	pop	r16
 5fa:	ff 90       	pop	r15
 5fc:	ef 90       	pop	r14
 5fe:	df 90       	pop	r13
 600:	cf 90       	pop	r12
 602:	bf 90       	pop	r11
 604:	af 90       	pop	r10
 606:	9f 90       	pop	r9
 608:	8f 90       	pop	r8
 60a:	7f 90       	pop	r7
 60c:	6f 90       	pop	r6
 60e:	5f 90       	pop	r5
 610:	4f 90       	pop	r4
 612:	3f 90       	pop	r3
 614:	2f 90       	pop	r2
 616:	08 95       	ret

00000618 <main>:


int main(void)
{

	configureIO();	
 618:	0e 94 75 00 	call	0xea	; 0xea <_Z11configureIOv>
	configureExternalOscillator();
 61c:	0e 94 a4 00 	call	0x148	; 0x148 <_Z27configureExternalOscillatorv>
	configureUSART();
 620:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z14configureUSARTv>
	configureSerialNumber();
 624:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z21configureSerialNumberv>
	configureTimerCounter();
 628:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_Z21configureTimerCounterv>

	uint8_t receivedUSARTData;  //Holds received bytes from serial devices

	LOW_LEVEL_INTERRUPTS_ENABLE();
 62c:	e0 ea       	ldi	r30, 0xA0	; 160
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	82 81       	ldd	r24, Z+2	; 0x02
 632:	81 60       	ori	r24, 0x01	; 1
 634:	82 83       	std	Z+2, r24	; 0x02
	sei();
 636:	78 94       	sei
	
	//Setup radios
	XBEE_SLEEP();
 638:	e0 e0       	ldi	r30, 0x00	; 0
 63a:	f6 e0       	ldi	r31, 0x06	; 6
 63c:	88 e0       	ldi	r24, 0x08	; 8
 63e:	85 83       	std	Z+5, r24	; 0x05
	IRIDIUM_SLEEP();
 640:	80 e2       	ldi	r24, 0x20	; 32
 642:	86 83       	std	Z+6, r24	; 0x06
	
	//PORTD.OUTSET = PIN5_bm; //RGB LED Test

	//Init string with basic documentation
	SendStringPC("\n\n\r#[INIT ROSE COMMS]\n\r");
 644:	87 e2       	ldi	r24, 0x27	; 39
 646:	90 e2       	ldi	r25, 0x20	; 32
 648:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
	SendStringPC("#Firmware version ");
 64c:	8f e3       	ldi	r24, 0x3F	; 63
 64e:	90 e2       	ldi	r25, 0x20	; 32
 650:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
	SendStringPC(FIRMWARE_VERSION_STR);
 654:	82 e5       	ldi	r24, 0x52	; 82
 656:	90 e2       	ldi	r25, 0x20	; 32
 658:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
	SendStringPC("\n\r#Serial Number: ");
 65c:	86 e5       	ldi	r24, 0x56	; 86
 65e:	90 e2       	ldi	r25, 0x20	; 32
 660:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
	if(serialNumber == -1)
 664:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <__data_end>
 668:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <__data_end+0x1>
 66c:	8f 3f       	cpi	r24, 0xFF	; 255
 66e:	2f ef       	ldi	r18, 0xFF	; 255
 670:	92 07       	cpc	r25, r18
 672:	29 f4       	brne	.+10     	; 0x67e <main+0x66>
		SendStringPC("NOT SET");
 674:	89 e6       	ldi	r24, 0x69	; 105
 676:	90 e2       	ldi	r25, 0x20	; 32
 678:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
 67c:	02 c0       	rjmp	.+4      	; 0x682 <main+0x6a>
	else
		SendNumPC(serialNumber);
 67e:	0e 94 08 04 	call	0x810	; 0x810 <_Z9SendNumPCi>
	SendStringPC("\n\r#Msg format: Iridium Status | RSSI Value | Comms Status\n\r");
 682:	81 e7       	ldi	r24, 0x71	; 113
 684:	90 e2       	ldi	r25, 0x20	; 32
 686:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
	
	RED_OFF();
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	GREEN_OFF();
 690:	e0 e6       	ldi	r30, 0x60	; 96
 692:	f6 e0       	ldi	r31, 0x06	; 6
 694:	80 e2       	ldi	r24, 0x20	; 32
 696:	85 83       	std	Z+5, r24	; 0x05
	BLUE_OFF();
 698:	80 e1       	ldi	r24, 0x10	; 16
 69a:	85 83       	std	Z+5, r24	; 0x05
		if(broadcastStatus){
			broadcastStatus = 0;
			//SendStringPC("Broadcast, yo\n\r");
			
			//Assemble Iridium Status byte
			uint8_t iridiumStatus = (CHECK_IRID_PG() << 1) | (CHECK_IRID_NETWORK() << 0);
 69c:	0f 2e       	mov	r0, r31
 69e:	f0 e4       	ldi	r31, 0x40	; 64
 6a0:	af 2e       	mov	r10, r31
 6a2:	f6 e0       	ldi	r31, 0x06	; 6
 6a4:	bf 2e       	mov	r11, r31
 6a6:	f0 2d       	mov	r31, r0
			
			//Assemble Comms Value Byte
			uint8_t commsStatus = ((!CHECK_TX_SW()) << 0);
 6a8:	c0 e0       	ldi	r28, 0x00	; 0
 6aa:	d6 e0       	ldi	r29, 0x06	; 6
		}
		
		_delay_ms(25);
		
		//Process misc. communication
		if(USART_IsRXComplete(&COMP_USART)){
 6ac:	0f 2e       	mov	r0, r31
 6ae:	f0 ec       	ldi	r31, 0xC0	; 192
 6b0:	ef 2e       	mov	r14, r31
 6b2:	f8 e0       	ldi	r31, 0x08	; 8
 6b4:	ff 2e       	mov	r15, r31
 6b6:	f0 2d       	mov	r31, r0
				SendStringPC("Turning off Xbee\n\r");
				XBEE_SLEEP();
			}
			if(receivedUSARTData == 51){ //Turn on XBee
				SendStringPC("Turning on XBee\n\r");
				XBEE_WAKE();
 6b8:	68 94       	set
 6ba:	88 24       	eor	r8, r8
 6bc:	83 f8       	bld	r8, 3
				SendStringPC("Turning off Iridium Modem\n\r");
				IRIDIUM_SLEEP();
			}
			if(receivedUSARTData == 41){ //Turn on Iridium Modem
				SendStringPC("Turning on Iridium Modem\n\r");
				IRIDIUM_WAKE();
 6be:	10 e2       	ldi	r17, 0x20	; 32
		
		if(CHECK_LED_SW()){
			GREEN_ON();
		}
		else{
			GREEN_OFF();	
 6c0:	0f 2e       	mov	r0, r31
 6c2:	f0 e6       	ldi	r31, 0x60	; 96
 6c4:	cf 2e       	mov	r12, r31
 6c6:	f6 e0       	ldi	r31, 0x06	; 6
 6c8:	df 2e       	mov	r13, r31
 6ca:	f0 2d       	mov	r31, r0
	BLUE_OFF();
		
	
    while (1) 
    {
		if(broadcastStatus){
 6cc:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <broadcastStatus>
 6d0:	88 23       	and	r24, r24
 6d2:	09 f1       	breq	.+66     	; 0x716 <main+0xfe>
			broadcastStatus = 0;
 6d4:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <broadcastStatus>
			//SendStringPC("Broadcast, yo\n\r");
			
			//Assemble Iridium Status byte
			uint8_t iridiumStatus = (CHECK_IRID_PG() << 1) | (CHECK_IRID_NETWORK() << 0);
 6d8:	f5 01       	movw	r30, r10
 6da:	90 85       	ldd	r25, Z+8	; 0x08
 6dc:	80 85       	ldd	r24, Z+8	; 0x08
			
			//Assemble Comms Value Byte
			uint8_t commsStatus = ((!CHECK_TX_SW()) << 0);
 6de:	98 84       	ldd	r9, Y+8	; 0x08
		if(broadcastStatus){
			broadcastStatus = 0;
			//SendStringPC("Broadcast, yo\n\r");
			
			//Assemble Iridium Status byte
			uint8_t iridiumStatus = (CHECK_IRID_PG() << 1) | (CHECK_IRID_NETWORK() << 0);
 6e0:	90 72       	andi	r25, 0x20	; 32
 6e2:	99 0f       	add	r25, r25
 6e4:	80 71       	andi	r24, 0x10	; 16
			
			//Assemble Comms Value Byte
			uint8_t commsStatus = ((!CHECK_TX_SW()) << 0);
			
			SendNumPC(iridiumStatus);
 6e6:	89 2b       	or	r24, r25
 6e8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z9SendNumPCh>
			SendStringPC("|");
 6ec:	8d ea       	ldi	r24, 0xAD	; 173
 6ee:	90 e2       	ldi	r25, 0x20	; 32
 6f0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
			SendStringPC("RSSI");
 6f4:	8f ea       	ldi	r24, 0xAF	; 175
 6f6:	90 e2       	ldi	r25, 0x20	; 32
 6f8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
			SendStringPC("|");
 6fc:	8d ea       	ldi	r24, 0xAD	; 173
 6fe:	90 e2       	ldi	r25, 0x20	; 32
 700:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
			SendNumPC(commsStatus);
 704:	94 fa       	bst	r9, 4
 706:	88 27       	eor	r24, r24
 708:	80 f9       	bld	r24, 0
 70a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z9SendNumPCh>
			SendStringPC("\n\r");
 70e:	8c e3       	ldi	r24, 0x3C	; 60
 710:	90 e2       	ldi	r25, 0x20	; 32
 712:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 716:	ff ef       	ldi	r31, 0xFF	; 255
 718:	20 e7       	ldi	r18, 0x70	; 112
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	f1 50       	subi	r31, 0x01	; 1
 71e:	20 40       	sbci	r18, 0x00	; 0
 720:	80 40       	sbci	r24, 0x00	; 0
 722:	e1 f7       	brne	.-8      	; 0x71c <main+0x104>
 724:	00 c0       	rjmp	.+0      	; 0x726 <main+0x10e>
 726:	00 00       	nop
		}
		
		_delay_ms(25);
		
		//Process misc. communication
		if(USART_IsRXComplete(&COMP_USART)){
 728:	f7 01       	movw	r30, r14
 72a:	81 81       	ldd	r24, Z+1	; 0x01
 72c:	88 23       	and	r24, r24
 72e:	4c f5       	brge	.+82     	; 0x782 <main+0x16a>
			SendStringPC("Received data. ");
 730:	84 eb       	ldi	r24, 0xB4	; 180
 732:	90 e2       	ldi	r25, 0x20	; 32
 734:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
			SendStringPC("\n\r");
 738:	8c e3       	ldi	r24, 0x3C	; 60
 73a:	90 e2       	ldi	r25, 0x20	; 32
 73c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
			receivedUSARTData = USART_GetChar(&COMP_USART);
 740:	f7 01       	movw	r30, r14
 742:	00 81       	ld	r16, Z
			
			//Iridium Controls
			if(receivedUSARTData == 40){ //Turn off Iridium Modem
 744:	08 32       	cpi	r16, 0x28	; 40
 746:	31 f4       	brne	.+12     	; 0x754 <main+0x13c>
				SendStringPC("Turning off Iridium Modem\n\r");
 748:	84 ec       	ldi	r24, 0xC4	; 196
 74a:	90 e2       	ldi	r25, 0x20	; 32
 74c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
				IRIDIUM_SLEEP();
 750:	1e 83       	std	Y+6, r17	; 0x06
 752:	10 c0       	rjmp	.+32     	; 0x774 <main+0x15c>
			}
			if(receivedUSARTData == 41){ //Turn on Iridium Modem
 754:	09 32       	cpi	r16, 0x29	; 41
 756:	31 f4       	brne	.+12     	; 0x764 <main+0x14c>
				SendStringPC("Turning on Iridium Modem\n\r");
 758:	80 ee       	ldi	r24, 0xE0	; 224
 75a:	90 e2       	ldi	r25, 0x20	; 32
 75c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
				IRIDIUM_WAKE();
 760:	1d 83       	std	Y+5, r17	; 0x05
 762:	0f c0       	rjmp	.+30     	; 0x782 <main+0x16a>
			}
			
			//Xbee controls
			if(receivedUSARTData == 50){ //Turn off XBee
 764:	02 33       	cpi	r16, 0x32	; 50
 766:	31 f4       	brne	.+12     	; 0x774 <main+0x15c>
				SendStringPC("Turning off Xbee\n\r");
 768:	8b ef       	ldi	r24, 0xFB	; 251
 76a:	90 e2       	ldi	r25, 0x20	; 32
 76c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
				XBEE_SLEEP();
 770:	8d 82       	std	Y+5, r8	; 0x05
 772:	07 c0       	rjmp	.+14     	; 0x782 <main+0x16a>
			}
			if(receivedUSARTData == 51){ //Turn on XBee
 774:	03 33       	cpi	r16, 0x33	; 51
 776:	29 f4       	brne	.+10     	; 0x782 <main+0x16a>
				SendStringPC("Turning on XBee\n\r");
 778:	8e e0       	ldi	r24, 0x0E	; 14
 77a:	91 e2       	ldi	r25, 0x21	; 33
 77c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z12SendStringPCPKc>
				XBEE_WAKE();
 780:	8e 82       	std	Y+6, r8	; 0x06
			}
				
			
		}
		
		if (CHECK_TX_SW()) {
 782:	88 85       	ldd	r24, Y+8	; 0x08
 784:	84 fd       	sbrc	r24, 4
 786:	02 c0       	rjmp	.+4      	; 0x78c <main+0x174>
			//XBEE_WAKE();
			IRIDIUM_WAKE();
 788:	1d 83       	std	Y+5, r17	; 0x05
 78a:	01 c0       	rjmp	.+2      	; 0x78e <main+0x176>
		}
		else{
			//XBEE_SLEEP();
			IRIDIUM_SLEEP();
 78c:	1e 83       	std	Y+6, r17	; 0x06
		}
		
		if(CHECK_LED_SW()){
 78e:	88 85       	ldd	r24, Y+8	; 0x08
 790:	88 23       	and	r24, r24
 792:	1c f0       	brlt	.+6      	; 0x79a <main+0x182>
			GREEN_ON();
 794:	f6 01       	movw	r30, r12
 796:	16 83       	std	Z+6, r17	; 0x06
 798:	99 cf       	rjmp	.-206    	; 0x6cc <main+0xb4>
		}
		else{
			GREEN_OFF();	
 79a:	f6 01       	movw	r30, r12
 79c:	15 83       	std	Z+5, r17	; 0x05
 79e:	96 cf       	rjmp	.-212    	; 0x6cc <main+0xb4>

000007a0 <_Z12SendStringPCPc>:

void SendNumPC(uint16_t numToSend){
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
}
 7a0:	fc 01       	movw	r30, r24
 7a2:	20 81       	ld	r18, Z
 7a4:	22 23       	and	r18, r18
 7a6:	59 f0       	breq	.+22     	; 0x7be <_Z12SendStringPCPc+0x1e>
 7a8:	dc 01       	movw	r26, r24
 7aa:	11 96       	adiw	r26, 0x01	; 1
 7ac:	e0 ec       	ldi	r30, 0xC0	; 192
 7ae:	f8 e0       	ldi	r31, 0x08	; 8
 7b0:	91 81       	ldd	r25, Z+1	; 0x01
 7b2:	95 ff       	sbrs	r25, 5
 7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <_Z12SendStringPCPc+0x10>
 7b6:	20 83       	st	Z, r18
 7b8:	2d 91       	ld	r18, X+
 7ba:	21 11       	cpse	r18, r1
 7bc:	f9 cf       	rjmp	.-14     	; 0x7b0 <_Z12SendStringPCPc+0x10>
 7be:	08 95       	ret

000007c0 <_Z12SendStringPCPKc>:
 7c0:	fc 01       	movw	r30, r24
 7c2:	20 81       	ld	r18, Z
 7c4:	22 23       	and	r18, r18
 7c6:	59 f0       	breq	.+22     	; 0x7de <_Z12SendStringPCPKc+0x1e>
 7c8:	dc 01       	movw	r26, r24
 7ca:	11 96       	adiw	r26, 0x01	; 1
 7cc:	e0 ec       	ldi	r30, 0xC0	; 192
 7ce:	f8 e0       	ldi	r31, 0x08	; 8
 7d0:	91 81       	ldd	r25, Z+1	; 0x01
 7d2:	95 ff       	sbrs	r25, 5
 7d4:	fd cf       	rjmp	.-6      	; 0x7d0 <_Z12SendStringPCPKc+0x10>
 7d6:	20 83       	st	Z, r18
 7d8:	2d 91       	ld	r18, X+
 7da:	21 11       	cpse	r18, r1
 7dc:	f9 cf       	rjmp	.-14     	; 0x7d0 <_Z12SendStringPCPKc+0x10>
 7de:	08 95       	ret

000007e0 <_Z9SendNumPCh>:
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
 7e8:	2a 97       	sbiw	r28, 0x0a	; 10
 7ea:	cd bf       	out	0x3d, r28	; 61
 7ec:	de bf       	out	0x3e, r29	; 62
 7ee:	4a e0       	ldi	r20, 0x0A	; 10
 7f0:	be 01       	movw	r22, r28
 7f2:	6f 5f       	subi	r22, 0xFF	; 255
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 95 04 	call	0x92a	; 0x92a <__itoa_ncheck>
 7fc:	ce 01       	movw	r24, r28
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z12SendStringPCPc>
 804:	2a 96       	adiw	r28, 0x0a	; 10
 806:	cd bf       	out	0x3d, r28	; 61
 808:	de bf       	out	0x3e, r29	; 62
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	08 95       	ret

00000810 <_Z9SendNumPCi>:

void SendNumPC(int16_t numToSend){
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	cd b7       	in	r28, 0x3d	; 61
 816:	de b7       	in	r29, 0x3e	; 62
 818:	64 97       	sbiw	r28, 0x14	; 20
 81a:	cd bf       	out	0x3d, r28	; 61
 81c:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 81e:	4a e0       	ldi	r20, 0x0A	; 10
 820:	be 01       	movw	r22, r28
 822:	6f 5f       	subi	r22, 0xFF	; 255
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	0e 94 95 04 	call	0x92a	; 0x92a <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
 82a:	ce 01       	movw	r24, r28
 82c:	01 96       	adiw	r24, 0x01	; 1
 82e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z12SendStringPCPc>
}
 832:	64 96       	adiw	r28, 0x14	; 20
 834:	cd bf       	out	0x3d, r28	; 61
 836:	de bf       	out	0x3e, r29	; 62
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	08 95       	ret

0000083e <_Z9SendNumPCy>:
/*
For this function, we need to split the 64 bit integer into two separate
32 bit integers because %llx and %lld are not implemented in this version
of sprintf/
*/
void SendNumPC(uint64_t numToSend){
 83e:	ff 92       	push	r15
 840:	0f 93       	push	r16
 842:	1f 93       	push	r17
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
 84c:	e2 97       	sbiw	r28, 0x32	; 50
 84e:	cd bf       	out	0x3d, r28	; 61
 850:	de bf       	out	0x3e, r29	; 62
 852:	f5 2e       	mov	r15, r21
	char buffer[50];
	uint32_t tempLSB;
	uint32_t tempMSB;
	
	tempLSB = numToSend & 0xFFFFFFFF;	//Least significant four bytes
 854:	e2 2f       	mov	r30, r18
 856:	f3 2f       	mov	r31, r19
 858:	14 2f       	mov	r17, r20
	tempMSB = (uint32_t) ((numToSend & 0xFFFFFFFF00000000) >> 32);		//Most significant four bytes
 85a:	20 e0       	ldi	r18, 0x00	; 0
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	50 e0       	ldi	r21, 0x00	; 0
 862:	00 e2       	ldi	r16, 0x20	; 32
 864:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__lshrdi3>
 868:	82 2f       	mov	r24, r18
 86a:	93 2f       	mov	r25, r19
 86c:	a4 2f       	mov	r26, r20
 86e:	b5 2f       	mov	r27, r21
		
	if(tempMSB)
 870:	89 2b       	or	r24, r25
 872:	8a 2b       	or	r24, r26
 874:	8b 2b       	or	r24, r27
 876:	a9 f0       	breq	.+42     	; 0x8a2 <_Z9SendNumPCy+0x64>
		sprintf(buffer,"%lx%lx", tempMSB, tempLSB);		
 878:	ff 92       	push	r15
 87a:	1f 93       	push	r17
 87c:	ff 93       	push	r31
 87e:	ef 93       	push	r30
 880:	5f 93       	push	r21
 882:	4f 93       	push	r20
 884:	3f 93       	push	r19
 886:	2f 93       	push	r18
 888:	80 e2       	ldi	r24, 0x20	; 32
 88a:	91 e2       	ldi	r25, 0x21	; 33
 88c:	9f 93       	push	r25
 88e:	8f 93       	push	r24
 890:	ce 01       	movw	r24, r28
 892:	01 96       	adiw	r24, 0x01	; 1
 894:	9f 93       	push	r25
 896:	8f 93       	push	r24
 898:	0e 94 ba 04 	call	0x974	; 0x974 <sprintf>
 89c:	cd bf       	out	0x3d, r28	; 61
 89e:	de bf       	out	0x3e, r29	; 62
 8a0:	10 c0       	rjmp	.+32     	; 0x8c2 <_Z9SendNumPCy+0x84>
	else
		sprintf(buffer,"%lx", tempLSB);		
 8a2:	ff 92       	push	r15
 8a4:	1f 93       	push	r17
 8a6:	ff 93       	push	r31
 8a8:	ef 93       	push	r30
 8aa:	83 e2       	ldi	r24, 0x23	; 35
 8ac:	91 e2       	ldi	r25, 0x21	; 33
 8ae:	9f 93       	push	r25
 8b0:	8f 93       	push	r24
 8b2:	ce 01       	movw	r24, r28
 8b4:	01 96       	adiw	r24, 0x01	; 1
 8b6:	9f 93       	push	r25
 8b8:	8f 93       	push	r24
 8ba:	0e 94 ba 04 	call	0x974	; 0x974 <sprintf>
 8be:	cd bf       	out	0x3d, r28	; 61
 8c0:	de bf       	out	0x3e, r29	; 62
	
	SendStringPC(buffer);
 8c2:	ce 01       	movw	r24, r28
 8c4:	01 96       	adiw	r24, 0x01	; 1
 8c6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z12SendStringPCPc>
}
 8ca:	e2 96       	adiw	r28, 0x32	; 50
 8cc:	cd bf       	out	0x3d, r28	; 61
 8ce:	de bf       	out	0x3e, r29	; 62
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	1f 91       	pop	r17
 8d6:	0f 91       	pop	r16
 8d8:	ff 90       	pop	r15
 8da:	08 95       	ret

000008dc <__ashrdi3>:
 8dc:	97 fb       	bst	r25, 7
 8de:	10 f8       	bld	r1, 0

000008e0 <__lshrdi3>:
 8e0:	16 94       	lsr	r1
 8e2:	00 08       	sbc	r0, r0
 8e4:	0f 93       	push	r16
 8e6:	08 30       	cpi	r16, 0x08	; 8
 8e8:	98 f0       	brcs	.+38     	; 0x910 <__lshrdi3+0x30>
 8ea:	08 50       	subi	r16, 0x08	; 8
 8ec:	23 2f       	mov	r18, r19
 8ee:	34 2f       	mov	r19, r20
 8f0:	45 2f       	mov	r20, r21
 8f2:	56 2f       	mov	r21, r22
 8f4:	67 2f       	mov	r22, r23
 8f6:	78 2f       	mov	r23, r24
 8f8:	89 2f       	mov	r24, r25
 8fa:	90 2d       	mov	r25, r0
 8fc:	f4 cf       	rjmp	.-24     	; 0x8e6 <__lshrdi3+0x6>
 8fe:	05 94       	asr	r0
 900:	97 95       	ror	r25
 902:	87 95       	ror	r24
 904:	77 95       	ror	r23
 906:	67 95       	ror	r22
 908:	57 95       	ror	r21
 90a:	47 95       	ror	r20
 90c:	37 95       	ror	r19
 90e:	27 95       	ror	r18
 910:	0a 95       	dec	r16
 912:	aa f7       	brpl	.-22     	; 0x8fe <__lshrdi3+0x1e>
 914:	0f 91       	pop	r16
 916:	08 95       	ret

00000918 <__adddi3>:
 918:	2a 0d       	add	r18, r10
 91a:	3b 1d       	adc	r19, r11
 91c:	4c 1d       	adc	r20, r12
 91e:	5d 1d       	adc	r21, r13
 920:	6e 1d       	adc	r22, r14
 922:	7f 1d       	adc	r23, r15
 924:	80 1f       	adc	r24, r16
 926:	91 1f       	adc	r25, r17
 928:	08 95       	ret

0000092a <__itoa_ncheck>:
 92a:	bb 27       	eor	r27, r27
 92c:	4a 30       	cpi	r20, 0x0A	; 10
 92e:	31 f4       	brne	.+12     	; 0x93c <__itoa_ncheck+0x12>
 930:	99 23       	and	r25, r25
 932:	22 f4       	brpl	.+8      	; 0x93c <__itoa_ncheck+0x12>
 934:	bd e2       	ldi	r27, 0x2D	; 45
 936:	90 95       	com	r25
 938:	81 95       	neg	r24
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	0c 94 a1 04 	jmp	0x942	; 0x942 <__utoa_common>

00000940 <__utoa_ncheck>:
 940:	bb 27       	eor	r27, r27

00000942 <__utoa_common>:
 942:	fb 01       	movw	r30, r22
 944:	55 27       	eor	r21, r21
 946:	aa 27       	eor	r26, r26
 948:	88 0f       	add	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	aa 1f       	adc	r26, r26
 94e:	a4 17       	cp	r26, r20
 950:	10 f0       	brcs	.+4      	; 0x956 <__utoa_common+0x14>
 952:	a4 1b       	sub	r26, r20
 954:	83 95       	inc	r24
 956:	50 51       	subi	r21, 0x10	; 16
 958:	b9 f7       	brne	.-18     	; 0x948 <__utoa_common+0x6>
 95a:	a0 5d       	subi	r26, 0xD0	; 208
 95c:	aa 33       	cpi	r26, 0x3A	; 58
 95e:	08 f0       	brcs	.+2      	; 0x962 <__utoa_common+0x20>
 960:	a9 5d       	subi	r26, 0xD9	; 217
 962:	a1 93       	st	Z+, r26
 964:	00 97       	sbiw	r24, 0x00	; 0
 966:	79 f7       	brne	.-34     	; 0x946 <__utoa_common+0x4>
 968:	b1 11       	cpse	r27, r1
 96a:	b1 93       	st	Z+, r27
 96c:	11 92       	st	Z+, r1
 96e:	cb 01       	movw	r24, r22
 970:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <strrev>

00000974 <sprintf>:
 974:	ae e0       	ldi	r26, 0x0E	; 14
 976:	b0 e0       	ldi	r27, 0x00	; 0
 978:	e0 ec       	ldi	r30, 0xC0	; 192
 97a:	f4 e0       	ldi	r31, 0x04	; 4
 97c:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__prologue_saves__+0x1c>
 980:	0d 89       	ldd	r16, Y+21	; 0x15
 982:	1e 89       	ldd	r17, Y+22	; 0x16
 984:	86 e0       	ldi	r24, 0x06	; 6
 986:	8c 83       	std	Y+4, r24	; 0x04
 988:	09 83       	std	Y+1, r16	; 0x01
 98a:	1a 83       	std	Y+2, r17	; 0x02
 98c:	8f ef       	ldi	r24, 0xFF	; 255
 98e:	9f e7       	ldi	r25, 0x7F	; 127
 990:	8d 83       	std	Y+5, r24	; 0x05
 992:	9e 83       	std	Y+6, r25	; 0x06
 994:	ae 01       	movw	r20, r28
 996:	47 5e       	subi	r20, 0xE7	; 231
 998:	5f 4f       	sbci	r21, 0xFF	; 255
 99a:	6f 89       	ldd	r22, Y+23	; 0x17
 99c:	78 8d       	ldd	r23, Y+24	; 0x18
 99e:	ce 01       	movw	r24, r28
 9a0:	01 96       	adiw	r24, 0x01	; 1
 9a2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <vfprintf>
 9a6:	2f 81       	ldd	r18, Y+7	; 0x07
 9a8:	38 85       	ldd	r19, Y+8	; 0x08
 9aa:	f8 01       	movw	r30, r16
 9ac:	e2 0f       	add	r30, r18
 9ae:	f3 1f       	adc	r31, r19
 9b0:	10 82       	st	Z, r1
 9b2:	2e 96       	adiw	r28, 0x0e	; 14
 9b4:	e4 e0       	ldi	r30, 0x04	; 4
 9b6:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__epilogue_restores__+0x1c>

000009ba <vfprintf>:
 9ba:	ac e0       	ldi	r26, 0x0C	; 12
 9bc:	b0 e0       	ldi	r27, 0x00	; 0
 9be:	e3 ee       	ldi	r30, 0xE3	; 227
 9c0:	f4 e0       	ldi	r31, 0x04	; 4
 9c2:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__prologue_saves__>
 9c6:	7c 01       	movw	r14, r24
 9c8:	6b 01       	movw	r12, r22
 9ca:	8a 01       	movw	r16, r20
 9cc:	fc 01       	movw	r30, r24
 9ce:	16 82       	std	Z+6, r1	; 0x06
 9d0:	17 82       	std	Z+7, r1	; 0x07
 9d2:	83 81       	ldd	r24, Z+3	; 0x03
 9d4:	81 ff       	sbrs	r24, 1
 9d6:	bd c1       	rjmp	.+890    	; 0xd52 <vfprintf+0x398>
 9d8:	ce 01       	movw	r24, r28
 9da:	01 96       	adiw	r24, 0x01	; 1
 9dc:	4c 01       	movw	r8, r24
 9de:	f7 01       	movw	r30, r14
 9e0:	93 81       	ldd	r25, Z+3	; 0x03
 9e2:	f6 01       	movw	r30, r12
 9e4:	93 fd       	sbrc	r25, 3
 9e6:	85 91       	lpm	r24, Z+
 9e8:	93 ff       	sbrs	r25, 3
 9ea:	81 91       	ld	r24, Z+
 9ec:	6f 01       	movw	r12, r30
 9ee:	88 23       	and	r24, r24
 9f0:	09 f4       	brne	.+2      	; 0x9f4 <vfprintf+0x3a>
 9f2:	ab c1       	rjmp	.+854    	; 0xd4a <vfprintf+0x390>
 9f4:	85 32       	cpi	r24, 0x25	; 37
 9f6:	39 f4       	brne	.+14     	; 0xa06 <vfprintf+0x4c>
 9f8:	93 fd       	sbrc	r25, 3
 9fa:	85 91       	lpm	r24, Z+
 9fc:	93 ff       	sbrs	r25, 3
 9fe:	81 91       	ld	r24, Z+
 a00:	6f 01       	movw	r12, r30
 a02:	85 32       	cpi	r24, 0x25	; 37
 a04:	29 f4       	brne	.+10     	; 0xa10 <vfprintf+0x56>
 a06:	b7 01       	movw	r22, r14
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 a0e:	e7 cf       	rjmp	.-50     	; 0x9de <vfprintf+0x24>
 a10:	51 2c       	mov	r5, r1
 a12:	31 2c       	mov	r3, r1
 a14:	20 e0       	ldi	r18, 0x00	; 0
 a16:	20 32       	cpi	r18, 0x20	; 32
 a18:	a0 f4       	brcc	.+40     	; 0xa42 <vfprintf+0x88>
 a1a:	8b 32       	cpi	r24, 0x2B	; 43
 a1c:	69 f0       	breq	.+26     	; 0xa38 <vfprintf+0x7e>
 a1e:	30 f4       	brcc	.+12     	; 0xa2c <vfprintf+0x72>
 a20:	80 32       	cpi	r24, 0x20	; 32
 a22:	59 f0       	breq	.+22     	; 0xa3a <vfprintf+0x80>
 a24:	83 32       	cpi	r24, 0x23	; 35
 a26:	69 f4       	brne	.+26     	; 0xa42 <vfprintf+0x88>
 a28:	20 61       	ori	r18, 0x10	; 16
 a2a:	2c c0       	rjmp	.+88     	; 0xa84 <vfprintf+0xca>
 a2c:	8d 32       	cpi	r24, 0x2D	; 45
 a2e:	39 f0       	breq	.+14     	; 0xa3e <vfprintf+0x84>
 a30:	80 33       	cpi	r24, 0x30	; 48
 a32:	39 f4       	brne	.+14     	; 0xa42 <vfprintf+0x88>
 a34:	21 60       	ori	r18, 0x01	; 1
 a36:	26 c0       	rjmp	.+76     	; 0xa84 <vfprintf+0xca>
 a38:	22 60       	ori	r18, 0x02	; 2
 a3a:	24 60       	ori	r18, 0x04	; 4
 a3c:	23 c0       	rjmp	.+70     	; 0xa84 <vfprintf+0xca>
 a3e:	28 60       	ori	r18, 0x08	; 8
 a40:	21 c0       	rjmp	.+66     	; 0xa84 <vfprintf+0xca>
 a42:	27 fd       	sbrc	r18, 7
 a44:	27 c0       	rjmp	.+78     	; 0xa94 <vfprintf+0xda>
 a46:	30 ed       	ldi	r19, 0xD0	; 208
 a48:	38 0f       	add	r19, r24
 a4a:	3a 30       	cpi	r19, 0x0A	; 10
 a4c:	78 f4       	brcc	.+30     	; 0xa6c <vfprintf+0xb2>
 a4e:	26 ff       	sbrs	r18, 6
 a50:	06 c0       	rjmp	.+12     	; 0xa5e <vfprintf+0xa4>
 a52:	fa e0       	ldi	r31, 0x0A	; 10
 a54:	5f 9e       	mul	r5, r31
 a56:	30 0d       	add	r19, r0
 a58:	11 24       	eor	r1, r1
 a5a:	53 2e       	mov	r5, r19
 a5c:	13 c0       	rjmp	.+38     	; 0xa84 <vfprintf+0xca>
 a5e:	8a e0       	ldi	r24, 0x0A	; 10
 a60:	38 9e       	mul	r3, r24
 a62:	30 0d       	add	r19, r0
 a64:	11 24       	eor	r1, r1
 a66:	33 2e       	mov	r3, r19
 a68:	20 62       	ori	r18, 0x20	; 32
 a6a:	0c c0       	rjmp	.+24     	; 0xa84 <vfprintf+0xca>
 a6c:	8e 32       	cpi	r24, 0x2E	; 46
 a6e:	21 f4       	brne	.+8      	; 0xa78 <vfprintf+0xbe>
 a70:	26 fd       	sbrc	r18, 6
 a72:	6b c1       	rjmp	.+726    	; 0xd4a <vfprintf+0x390>
 a74:	20 64       	ori	r18, 0x40	; 64
 a76:	06 c0       	rjmp	.+12     	; 0xa84 <vfprintf+0xca>
 a78:	8c 36       	cpi	r24, 0x6C	; 108
 a7a:	11 f4       	brne	.+4      	; 0xa80 <vfprintf+0xc6>
 a7c:	20 68       	ori	r18, 0x80	; 128
 a7e:	02 c0       	rjmp	.+4      	; 0xa84 <vfprintf+0xca>
 a80:	88 36       	cpi	r24, 0x68	; 104
 a82:	41 f4       	brne	.+16     	; 0xa94 <vfprintf+0xda>
 a84:	f6 01       	movw	r30, r12
 a86:	93 fd       	sbrc	r25, 3
 a88:	85 91       	lpm	r24, Z+
 a8a:	93 ff       	sbrs	r25, 3
 a8c:	81 91       	ld	r24, Z+
 a8e:	6f 01       	movw	r12, r30
 a90:	81 11       	cpse	r24, r1
 a92:	c1 cf       	rjmp	.-126    	; 0xa16 <vfprintf+0x5c>
 a94:	98 2f       	mov	r25, r24
 a96:	9f 7d       	andi	r25, 0xDF	; 223
 a98:	95 54       	subi	r25, 0x45	; 69
 a9a:	93 30       	cpi	r25, 0x03	; 3
 a9c:	28 f4       	brcc	.+10     	; 0xaa8 <vfprintf+0xee>
 a9e:	0c 5f       	subi	r16, 0xFC	; 252
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
 aa2:	ff e3       	ldi	r31, 0x3F	; 63
 aa4:	f9 83       	std	Y+1, r31	; 0x01
 aa6:	0d c0       	rjmp	.+26     	; 0xac2 <vfprintf+0x108>
 aa8:	83 36       	cpi	r24, 0x63	; 99
 aaa:	31 f0       	breq	.+12     	; 0xab8 <vfprintf+0xfe>
 aac:	83 37       	cpi	r24, 0x73	; 115
 aae:	71 f0       	breq	.+28     	; 0xacc <vfprintf+0x112>
 ab0:	83 35       	cpi	r24, 0x53	; 83
 ab2:	09 f0       	breq	.+2      	; 0xab6 <vfprintf+0xfc>
 ab4:	5b c0       	rjmp	.+182    	; 0xb6c <vfprintf+0x1b2>
 ab6:	22 c0       	rjmp	.+68     	; 0xafc <vfprintf+0x142>
 ab8:	f8 01       	movw	r30, r16
 aba:	80 81       	ld	r24, Z
 abc:	89 83       	std	Y+1, r24	; 0x01
 abe:	0e 5f       	subi	r16, 0xFE	; 254
 ac0:	1f 4f       	sbci	r17, 0xFF	; 255
 ac2:	44 24       	eor	r4, r4
 ac4:	43 94       	inc	r4
 ac6:	51 2c       	mov	r5, r1
 ac8:	54 01       	movw	r10, r8
 aca:	15 c0       	rjmp	.+42     	; 0xaf6 <vfprintf+0x13c>
 acc:	38 01       	movw	r6, r16
 ace:	f2 e0       	ldi	r31, 0x02	; 2
 ad0:	6f 0e       	add	r6, r31
 ad2:	71 1c       	adc	r7, r1
 ad4:	f8 01       	movw	r30, r16
 ad6:	a0 80       	ld	r10, Z
 ad8:	b1 80       	ldd	r11, Z+1	; 0x01
 ada:	26 ff       	sbrs	r18, 6
 adc:	03 c0       	rjmp	.+6      	; 0xae4 <vfprintf+0x12a>
 ade:	65 2d       	mov	r22, r5
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	02 c0       	rjmp	.+4      	; 0xae8 <vfprintf+0x12e>
 ae4:	6f ef       	ldi	r22, 0xFF	; 255
 ae6:	7f ef       	ldi	r23, 0xFF	; 255
 ae8:	c5 01       	movw	r24, r10
 aea:	2c 87       	std	Y+12, r18	; 0x0c
 aec:	0e 94 ba 06 	call	0xd74	; 0xd74 <strnlen>
 af0:	2c 01       	movw	r4, r24
 af2:	83 01       	movw	r16, r6
 af4:	2c 85       	ldd	r18, Y+12	; 0x0c
 af6:	2f 77       	andi	r18, 0x7F	; 127
 af8:	22 2e       	mov	r2, r18
 afa:	17 c0       	rjmp	.+46     	; 0xb2a <vfprintf+0x170>
 afc:	38 01       	movw	r6, r16
 afe:	f2 e0       	ldi	r31, 0x02	; 2
 b00:	6f 0e       	add	r6, r31
 b02:	71 1c       	adc	r7, r1
 b04:	f8 01       	movw	r30, r16
 b06:	a0 80       	ld	r10, Z
 b08:	b1 80       	ldd	r11, Z+1	; 0x01
 b0a:	26 ff       	sbrs	r18, 6
 b0c:	03 c0       	rjmp	.+6      	; 0xb14 <vfprintf+0x15a>
 b0e:	65 2d       	mov	r22, r5
 b10:	70 e0       	ldi	r23, 0x00	; 0
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <vfprintf+0x15e>
 b14:	6f ef       	ldi	r22, 0xFF	; 255
 b16:	7f ef       	ldi	r23, 0xFF	; 255
 b18:	c5 01       	movw	r24, r10
 b1a:	2c 87       	std	Y+12, r18	; 0x0c
 b1c:	0e 94 af 06 	call	0xd5e	; 0xd5e <strnlen_P>
 b20:	2c 01       	movw	r4, r24
 b22:	2c 85       	ldd	r18, Y+12	; 0x0c
 b24:	20 68       	ori	r18, 0x80	; 128
 b26:	22 2e       	mov	r2, r18
 b28:	83 01       	movw	r16, r6
 b2a:	23 fc       	sbrc	r2, 3
 b2c:	1b c0       	rjmp	.+54     	; 0xb64 <vfprintf+0x1aa>
 b2e:	83 2d       	mov	r24, r3
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	48 16       	cp	r4, r24
 b34:	59 06       	cpc	r5, r25
 b36:	b0 f4       	brcc	.+44     	; 0xb64 <vfprintf+0x1aa>
 b38:	b7 01       	movw	r22, r14
 b3a:	80 e2       	ldi	r24, 0x20	; 32
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 b42:	3a 94       	dec	r3
 b44:	f4 cf       	rjmp	.-24     	; 0xb2e <vfprintf+0x174>
 b46:	f5 01       	movw	r30, r10
 b48:	27 fc       	sbrc	r2, 7
 b4a:	85 91       	lpm	r24, Z+
 b4c:	27 fe       	sbrs	r2, 7
 b4e:	81 91       	ld	r24, Z+
 b50:	5f 01       	movw	r10, r30
 b52:	b7 01       	movw	r22, r14
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 b5a:	31 10       	cpse	r3, r1
 b5c:	3a 94       	dec	r3
 b5e:	f1 e0       	ldi	r31, 0x01	; 1
 b60:	4f 1a       	sub	r4, r31
 b62:	51 08       	sbc	r5, r1
 b64:	41 14       	cp	r4, r1
 b66:	51 04       	cpc	r5, r1
 b68:	71 f7       	brne	.-36     	; 0xb46 <vfprintf+0x18c>
 b6a:	e5 c0       	rjmp	.+458    	; 0xd36 <vfprintf+0x37c>
 b6c:	84 36       	cpi	r24, 0x64	; 100
 b6e:	11 f0       	breq	.+4      	; 0xb74 <vfprintf+0x1ba>
 b70:	89 36       	cpi	r24, 0x69	; 105
 b72:	39 f5       	brne	.+78     	; 0xbc2 <vfprintf+0x208>
 b74:	f8 01       	movw	r30, r16
 b76:	27 ff       	sbrs	r18, 7
 b78:	07 c0       	rjmp	.+14     	; 0xb88 <vfprintf+0x1ce>
 b7a:	60 81       	ld	r22, Z
 b7c:	71 81       	ldd	r23, Z+1	; 0x01
 b7e:	82 81       	ldd	r24, Z+2	; 0x02
 b80:	93 81       	ldd	r25, Z+3	; 0x03
 b82:	0c 5f       	subi	r16, 0xFC	; 252
 b84:	1f 4f       	sbci	r17, 0xFF	; 255
 b86:	08 c0       	rjmp	.+16     	; 0xb98 <vfprintf+0x1de>
 b88:	60 81       	ld	r22, Z
 b8a:	71 81       	ldd	r23, Z+1	; 0x01
 b8c:	07 2e       	mov	r0, r23
 b8e:	00 0c       	add	r0, r0
 b90:	88 0b       	sbc	r24, r24
 b92:	99 0b       	sbc	r25, r25
 b94:	0e 5f       	subi	r16, 0xFE	; 254
 b96:	1f 4f       	sbci	r17, 0xFF	; 255
 b98:	2f 76       	andi	r18, 0x6F	; 111
 b9a:	72 2e       	mov	r7, r18
 b9c:	97 ff       	sbrs	r25, 7
 b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <vfprintf+0x1f8>
 ba0:	90 95       	com	r25
 ba2:	80 95       	com	r24
 ba4:	70 95       	com	r23
 ba6:	61 95       	neg	r22
 ba8:	7f 4f       	sbci	r23, 0xFF	; 255
 baa:	8f 4f       	sbci	r24, 0xFF	; 255
 bac:	9f 4f       	sbci	r25, 0xFF	; 255
 bae:	20 68       	ori	r18, 0x80	; 128
 bb0:	72 2e       	mov	r7, r18
 bb2:	2a e0       	ldi	r18, 0x0A	; 10
 bb4:	30 e0       	ldi	r19, 0x00	; 0
 bb6:	a4 01       	movw	r20, r8
 bb8:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__ultoa_invert>
 bbc:	a8 2e       	mov	r10, r24
 bbe:	a8 18       	sub	r10, r8
 bc0:	44 c0       	rjmp	.+136    	; 0xc4a <vfprintf+0x290>
 bc2:	85 37       	cpi	r24, 0x75	; 117
 bc4:	29 f4       	brne	.+10     	; 0xbd0 <vfprintf+0x216>
 bc6:	2f 7e       	andi	r18, 0xEF	; 239
 bc8:	b2 2e       	mov	r11, r18
 bca:	2a e0       	ldi	r18, 0x0A	; 10
 bcc:	30 e0       	ldi	r19, 0x00	; 0
 bce:	25 c0       	rjmp	.+74     	; 0xc1a <vfprintf+0x260>
 bd0:	f2 2f       	mov	r31, r18
 bd2:	f9 7f       	andi	r31, 0xF9	; 249
 bd4:	bf 2e       	mov	r11, r31
 bd6:	8f 36       	cpi	r24, 0x6F	; 111
 bd8:	c1 f0       	breq	.+48     	; 0xc0a <vfprintf+0x250>
 bda:	18 f4       	brcc	.+6      	; 0xbe2 <vfprintf+0x228>
 bdc:	88 35       	cpi	r24, 0x58	; 88
 bde:	79 f0       	breq	.+30     	; 0xbfe <vfprintf+0x244>
 be0:	b4 c0       	rjmp	.+360    	; 0xd4a <vfprintf+0x390>
 be2:	80 37       	cpi	r24, 0x70	; 112
 be4:	19 f0       	breq	.+6      	; 0xbec <vfprintf+0x232>
 be6:	88 37       	cpi	r24, 0x78	; 120
 be8:	21 f0       	breq	.+8      	; 0xbf2 <vfprintf+0x238>
 bea:	af c0       	rjmp	.+350    	; 0xd4a <vfprintf+0x390>
 bec:	2f 2f       	mov	r18, r31
 bee:	20 61       	ori	r18, 0x10	; 16
 bf0:	b2 2e       	mov	r11, r18
 bf2:	b4 fe       	sbrs	r11, 4
 bf4:	0d c0       	rjmp	.+26     	; 0xc10 <vfprintf+0x256>
 bf6:	8b 2d       	mov	r24, r11
 bf8:	84 60       	ori	r24, 0x04	; 4
 bfa:	b8 2e       	mov	r11, r24
 bfc:	09 c0       	rjmp	.+18     	; 0xc10 <vfprintf+0x256>
 bfe:	24 ff       	sbrs	r18, 4
 c00:	0a c0       	rjmp	.+20     	; 0xc16 <vfprintf+0x25c>
 c02:	9f 2f       	mov	r25, r31
 c04:	96 60       	ori	r25, 0x06	; 6
 c06:	b9 2e       	mov	r11, r25
 c08:	06 c0       	rjmp	.+12     	; 0xc16 <vfprintf+0x25c>
 c0a:	28 e0       	ldi	r18, 0x08	; 8
 c0c:	30 e0       	ldi	r19, 0x00	; 0
 c0e:	05 c0       	rjmp	.+10     	; 0xc1a <vfprintf+0x260>
 c10:	20 e1       	ldi	r18, 0x10	; 16
 c12:	30 e0       	ldi	r19, 0x00	; 0
 c14:	02 c0       	rjmp	.+4      	; 0xc1a <vfprintf+0x260>
 c16:	20 e1       	ldi	r18, 0x10	; 16
 c18:	32 e0       	ldi	r19, 0x02	; 2
 c1a:	f8 01       	movw	r30, r16
 c1c:	b7 fe       	sbrs	r11, 7
 c1e:	07 c0       	rjmp	.+14     	; 0xc2e <vfprintf+0x274>
 c20:	60 81       	ld	r22, Z
 c22:	71 81       	ldd	r23, Z+1	; 0x01
 c24:	82 81       	ldd	r24, Z+2	; 0x02
 c26:	93 81       	ldd	r25, Z+3	; 0x03
 c28:	0c 5f       	subi	r16, 0xFC	; 252
 c2a:	1f 4f       	sbci	r17, 0xFF	; 255
 c2c:	06 c0       	rjmp	.+12     	; 0xc3a <vfprintf+0x280>
 c2e:	60 81       	ld	r22, Z
 c30:	71 81       	ldd	r23, Z+1	; 0x01
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	0e 5f       	subi	r16, 0xFE	; 254
 c38:	1f 4f       	sbci	r17, 0xFF	; 255
 c3a:	a4 01       	movw	r20, r8
 c3c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__ultoa_invert>
 c40:	a8 2e       	mov	r10, r24
 c42:	a8 18       	sub	r10, r8
 c44:	fb 2d       	mov	r31, r11
 c46:	ff 77       	andi	r31, 0x7F	; 127
 c48:	7f 2e       	mov	r7, r31
 c4a:	76 fe       	sbrs	r7, 6
 c4c:	0b c0       	rjmp	.+22     	; 0xc64 <vfprintf+0x2aa>
 c4e:	37 2d       	mov	r19, r7
 c50:	3e 7f       	andi	r19, 0xFE	; 254
 c52:	a5 14       	cp	r10, r5
 c54:	50 f4       	brcc	.+20     	; 0xc6a <vfprintf+0x2b0>
 c56:	74 fe       	sbrs	r7, 4
 c58:	0a c0       	rjmp	.+20     	; 0xc6e <vfprintf+0x2b4>
 c5a:	72 fc       	sbrc	r7, 2
 c5c:	08 c0       	rjmp	.+16     	; 0xc6e <vfprintf+0x2b4>
 c5e:	37 2d       	mov	r19, r7
 c60:	3e 7e       	andi	r19, 0xEE	; 238
 c62:	05 c0       	rjmp	.+10     	; 0xc6e <vfprintf+0x2b4>
 c64:	ba 2c       	mov	r11, r10
 c66:	37 2d       	mov	r19, r7
 c68:	03 c0       	rjmp	.+6      	; 0xc70 <vfprintf+0x2b6>
 c6a:	ba 2c       	mov	r11, r10
 c6c:	01 c0       	rjmp	.+2      	; 0xc70 <vfprintf+0x2b6>
 c6e:	b5 2c       	mov	r11, r5
 c70:	34 ff       	sbrs	r19, 4
 c72:	0d c0       	rjmp	.+26     	; 0xc8e <vfprintf+0x2d4>
 c74:	fe 01       	movw	r30, r28
 c76:	ea 0d       	add	r30, r10
 c78:	f1 1d       	adc	r31, r1
 c7a:	80 81       	ld	r24, Z
 c7c:	80 33       	cpi	r24, 0x30	; 48
 c7e:	11 f4       	brne	.+4      	; 0xc84 <vfprintf+0x2ca>
 c80:	39 7e       	andi	r19, 0xE9	; 233
 c82:	09 c0       	rjmp	.+18     	; 0xc96 <vfprintf+0x2dc>
 c84:	32 ff       	sbrs	r19, 2
 c86:	06 c0       	rjmp	.+12     	; 0xc94 <vfprintf+0x2da>
 c88:	b3 94       	inc	r11
 c8a:	b3 94       	inc	r11
 c8c:	04 c0       	rjmp	.+8      	; 0xc96 <vfprintf+0x2dc>
 c8e:	83 2f       	mov	r24, r19
 c90:	86 78       	andi	r24, 0x86	; 134
 c92:	09 f0       	breq	.+2      	; 0xc96 <vfprintf+0x2dc>
 c94:	b3 94       	inc	r11
 c96:	33 fd       	sbrc	r19, 3
 c98:	13 c0       	rjmp	.+38     	; 0xcc0 <vfprintf+0x306>
 c9a:	30 ff       	sbrs	r19, 0
 c9c:	06 c0       	rjmp	.+12     	; 0xcaa <vfprintf+0x2f0>
 c9e:	5a 2c       	mov	r5, r10
 ca0:	b3 14       	cp	r11, r3
 ca2:	18 f4       	brcc	.+6      	; 0xcaa <vfprintf+0x2f0>
 ca4:	53 0c       	add	r5, r3
 ca6:	5b 18       	sub	r5, r11
 ca8:	b3 2c       	mov	r11, r3
 caa:	b3 14       	cp	r11, r3
 cac:	68 f4       	brcc	.+26     	; 0xcc8 <vfprintf+0x30e>
 cae:	b7 01       	movw	r22, r14
 cb0:	80 e2       	ldi	r24, 0x20	; 32
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	3c 87       	std	Y+12, r19	; 0x0c
 cb6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 cba:	b3 94       	inc	r11
 cbc:	3c 85       	ldd	r19, Y+12	; 0x0c
 cbe:	f5 cf       	rjmp	.-22     	; 0xcaa <vfprintf+0x2f0>
 cc0:	b3 14       	cp	r11, r3
 cc2:	10 f4       	brcc	.+4      	; 0xcc8 <vfprintf+0x30e>
 cc4:	3b 18       	sub	r3, r11
 cc6:	01 c0       	rjmp	.+2      	; 0xcca <vfprintf+0x310>
 cc8:	31 2c       	mov	r3, r1
 cca:	34 ff       	sbrs	r19, 4
 ccc:	12 c0       	rjmp	.+36     	; 0xcf2 <vfprintf+0x338>
 cce:	b7 01       	movw	r22, r14
 cd0:	80 e3       	ldi	r24, 0x30	; 48
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	3c 87       	std	Y+12, r19	; 0x0c
 cd6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 cda:	3c 85       	ldd	r19, Y+12	; 0x0c
 cdc:	32 ff       	sbrs	r19, 2
 cde:	17 c0       	rjmp	.+46     	; 0xd0e <vfprintf+0x354>
 ce0:	31 fd       	sbrc	r19, 1
 ce2:	03 c0       	rjmp	.+6      	; 0xcea <vfprintf+0x330>
 ce4:	88 e7       	ldi	r24, 0x78	; 120
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	02 c0       	rjmp	.+4      	; 0xcee <vfprintf+0x334>
 cea:	88 e5       	ldi	r24, 0x58	; 88
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	b7 01       	movw	r22, r14
 cf0:	0c c0       	rjmp	.+24     	; 0xd0a <vfprintf+0x350>
 cf2:	83 2f       	mov	r24, r19
 cf4:	86 78       	andi	r24, 0x86	; 134
 cf6:	59 f0       	breq	.+22     	; 0xd0e <vfprintf+0x354>
 cf8:	31 ff       	sbrs	r19, 1
 cfa:	02 c0       	rjmp	.+4      	; 0xd00 <vfprintf+0x346>
 cfc:	8b e2       	ldi	r24, 0x2B	; 43
 cfe:	01 c0       	rjmp	.+2      	; 0xd02 <vfprintf+0x348>
 d00:	80 e2       	ldi	r24, 0x20	; 32
 d02:	37 fd       	sbrc	r19, 7
 d04:	8d e2       	ldi	r24, 0x2D	; 45
 d06:	b7 01       	movw	r22, r14
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 d0e:	a5 14       	cp	r10, r5
 d10:	38 f4       	brcc	.+14     	; 0xd20 <vfprintf+0x366>
 d12:	b7 01       	movw	r22, r14
 d14:	80 e3       	ldi	r24, 0x30	; 48
 d16:	90 e0       	ldi	r25, 0x00	; 0
 d18:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 d1c:	5a 94       	dec	r5
 d1e:	f7 cf       	rjmp	.-18     	; 0xd0e <vfprintf+0x354>
 d20:	aa 94       	dec	r10
 d22:	f4 01       	movw	r30, r8
 d24:	ea 0d       	add	r30, r10
 d26:	f1 1d       	adc	r31, r1
 d28:	80 81       	ld	r24, Z
 d2a:	b7 01       	movw	r22, r14
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 d32:	a1 10       	cpse	r10, r1
 d34:	f5 cf       	rjmp	.-22     	; 0xd20 <vfprintf+0x366>
 d36:	33 20       	and	r3, r3
 d38:	09 f4       	brne	.+2      	; 0xd3c <vfprintf+0x382>
 d3a:	51 ce       	rjmp	.-862    	; 0x9de <vfprintf+0x24>
 d3c:	b7 01       	movw	r22, r14
 d3e:	80 e2       	ldi	r24, 0x20	; 32
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	0e 94 d5 06 	call	0xdaa	; 0xdaa <fputc>
 d46:	3a 94       	dec	r3
 d48:	f6 cf       	rjmp	.-20     	; 0xd36 <vfprintf+0x37c>
 d4a:	f7 01       	movw	r30, r14
 d4c:	86 81       	ldd	r24, Z+6	; 0x06
 d4e:	97 81       	ldd	r25, Z+7	; 0x07
 d50:	02 c0       	rjmp	.+4      	; 0xd56 <vfprintf+0x39c>
 d52:	8f ef       	ldi	r24, 0xFF	; 255
 d54:	9f ef       	ldi	r25, 0xFF	; 255
 d56:	2c 96       	adiw	r28, 0x0c	; 12
 d58:	e2 e1       	ldi	r30, 0x12	; 18
 d5a:	0c 94 84 07 	jmp	0xf08	; 0xf08 <__epilogue_restores__>

00000d5e <strnlen_P>:
 d5e:	fc 01       	movw	r30, r24
 d60:	05 90       	lpm	r0, Z+
 d62:	61 50       	subi	r22, 0x01	; 1
 d64:	70 40       	sbci	r23, 0x00	; 0
 d66:	01 10       	cpse	r0, r1
 d68:	d8 f7       	brcc	.-10     	; 0xd60 <strnlen_P+0x2>
 d6a:	80 95       	com	r24
 d6c:	90 95       	com	r25
 d6e:	8e 0f       	add	r24, r30
 d70:	9f 1f       	adc	r25, r31
 d72:	08 95       	ret

00000d74 <strnlen>:
 d74:	fc 01       	movw	r30, r24
 d76:	61 50       	subi	r22, 0x01	; 1
 d78:	70 40       	sbci	r23, 0x00	; 0
 d7a:	01 90       	ld	r0, Z+
 d7c:	01 10       	cpse	r0, r1
 d7e:	d8 f7       	brcc	.-10     	; 0xd76 <strnlen+0x2>
 d80:	80 95       	com	r24
 d82:	90 95       	com	r25
 d84:	8e 0f       	add	r24, r30
 d86:	9f 1f       	adc	r25, r31
 d88:	08 95       	ret

00000d8a <strrev>:
 d8a:	dc 01       	movw	r26, r24
 d8c:	fc 01       	movw	r30, r24
 d8e:	67 2f       	mov	r22, r23
 d90:	71 91       	ld	r23, Z+
 d92:	77 23       	and	r23, r23
 d94:	e1 f7       	brne	.-8      	; 0xd8e <strrev+0x4>
 d96:	32 97       	sbiw	r30, 0x02	; 2
 d98:	04 c0       	rjmp	.+8      	; 0xda2 <strrev+0x18>
 d9a:	7c 91       	ld	r23, X
 d9c:	6d 93       	st	X+, r22
 d9e:	70 83       	st	Z, r23
 da0:	62 91       	ld	r22, -Z
 da2:	ae 17       	cp	r26, r30
 da4:	bf 07       	cpc	r27, r31
 da6:	c8 f3       	brcs	.-14     	; 0xd9a <strrev+0x10>
 da8:	08 95       	ret

00000daa <fputc>:
 daa:	0f 93       	push	r16
 dac:	1f 93       	push	r17
 dae:	cf 93       	push	r28
 db0:	df 93       	push	r29
 db2:	fb 01       	movw	r30, r22
 db4:	23 81       	ldd	r18, Z+3	; 0x03
 db6:	21 fd       	sbrc	r18, 1
 db8:	03 c0       	rjmp	.+6      	; 0xdc0 <fputc+0x16>
 dba:	8f ef       	ldi	r24, 0xFF	; 255
 dbc:	9f ef       	ldi	r25, 0xFF	; 255
 dbe:	28 c0       	rjmp	.+80     	; 0xe10 <fputc+0x66>
 dc0:	22 ff       	sbrs	r18, 2
 dc2:	16 c0       	rjmp	.+44     	; 0xdf0 <fputc+0x46>
 dc4:	46 81       	ldd	r20, Z+6	; 0x06
 dc6:	57 81       	ldd	r21, Z+7	; 0x07
 dc8:	24 81       	ldd	r18, Z+4	; 0x04
 dca:	35 81       	ldd	r19, Z+5	; 0x05
 dcc:	42 17       	cp	r20, r18
 dce:	53 07       	cpc	r21, r19
 dd0:	44 f4       	brge	.+16     	; 0xde2 <fputc+0x38>
 dd2:	a0 81       	ld	r26, Z
 dd4:	b1 81       	ldd	r27, Z+1	; 0x01
 dd6:	9d 01       	movw	r18, r26
 dd8:	2f 5f       	subi	r18, 0xFF	; 255
 dda:	3f 4f       	sbci	r19, 0xFF	; 255
 ddc:	20 83       	st	Z, r18
 dde:	31 83       	std	Z+1, r19	; 0x01
 de0:	8c 93       	st	X, r24
 de2:	26 81       	ldd	r18, Z+6	; 0x06
 de4:	37 81       	ldd	r19, Z+7	; 0x07
 de6:	2f 5f       	subi	r18, 0xFF	; 255
 de8:	3f 4f       	sbci	r19, 0xFF	; 255
 dea:	26 83       	std	Z+6, r18	; 0x06
 dec:	37 83       	std	Z+7, r19	; 0x07
 dee:	10 c0       	rjmp	.+32     	; 0xe10 <fputc+0x66>
 df0:	eb 01       	movw	r28, r22
 df2:	09 2f       	mov	r16, r25
 df4:	18 2f       	mov	r17, r24
 df6:	00 84       	ldd	r0, Z+8	; 0x08
 df8:	f1 85       	ldd	r31, Z+9	; 0x09
 dfa:	e0 2d       	mov	r30, r0
 dfc:	09 95       	icall
 dfe:	89 2b       	or	r24, r25
 e00:	e1 f6       	brne	.-72     	; 0xdba <fputc+0x10>
 e02:	8e 81       	ldd	r24, Y+6	; 0x06
 e04:	9f 81       	ldd	r25, Y+7	; 0x07
 e06:	01 96       	adiw	r24, 0x01	; 1
 e08:	8e 83       	std	Y+6, r24	; 0x06
 e0a:	9f 83       	std	Y+7, r25	; 0x07
 e0c:	81 2f       	mov	r24, r17
 e0e:	90 2f       	mov	r25, r16
 e10:	df 91       	pop	r29
 e12:	cf 91       	pop	r28
 e14:	1f 91       	pop	r17
 e16:	0f 91       	pop	r16
 e18:	08 95       	ret

00000e1a <__ultoa_invert>:
 e1a:	fa 01       	movw	r30, r20
 e1c:	aa 27       	eor	r26, r26
 e1e:	28 30       	cpi	r18, 0x08	; 8
 e20:	51 f1       	breq	.+84     	; 0xe76 <__ultoa_invert+0x5c>
 e22:	20 31       	cpi	r18, 0x10	; 16
 e24:	81 f1       	breq	.+96     	; 0xe86 <__ultoa_invert+0x6c>
 e26:	e8 94       	clt
 e28:	6f 93       	push	r22
 e2a:	6e 7f       	andi	r22, 0xFE	; 254
 e2c:	6e 5f       	subi	r22, 0xFE	; 254
 e2e:	7f 4f       	sbci	r23, 0xFF	; 255
 e30:	8f 4f       	sbci	r24, 0xFF	; 255
 e32:	9f 4f       	sbci	r25, 0xFF	; 255
 e34:	af 4f       	sbci	r26, 0xFF	; 255
 e36:	b1 e0       	ldi	r27, 0x01	; 1
 e38:	3e d0       	rcall	.+124    	; 0xeb6 <__ultoa_invert+0x9c>
 e3a:	b4 e0       	ldi	r27, 0x04	; 4
 e3c:	3c d0       	rcall	.+120    	; 0xeb6 <__ultoa_invert+0x9c>
 e3e:	67 0f       	add	r22, r23
 e40:	78 1f       	adc	r23, r24
 e42:	89 1f       	adc	r24, r25
 e44:	9a 1f       	adc	r25, r26
 e46:	a1 1d       	adc	r26, r1
 e48:	68 0f       	add	r22, r24
 e4a:	79 1f       	adc	r23, r25
 e4c:	8a 1f       	adc	r24, r26
 e4e:	91 1d       	adc	r25, r1
 e50:	a1 1d       	adc	r26, r1
 e52:	6a 0f       	add	r22, r26
 e54:	71 1d       	adc	r23, r1
 e56:	81 1d       	adc	r24, r1
 e58:	91 1d       	adc	r25, r1
 e5a:	a1 1d       	adc	r26, r1
 e5c:	20 d0       	rcall	.+64     	; 0xe9e <__ultoa_invert+0x84>
 e5e:	09 f4       	brne	.+2      	; 0xe62 <__ultoa_invert+0x48>
 e60:	68 94       	set
 e62:	3f 91       	pop	r19
 e64:	2a e0       	ldi	r18, 0x0A	; 10
 e66:	26 9f       	mul	r18, r22
 e68:	11 24       	eor	r1, r1
 e6a:	30 19       	sub	r19, r0
 e6c:	30 5d       	subi	r19, 0xD0	; 208
 e6e:	31 93       	st	Z+, r19
 e70:	de f6       	brtc	.-74     	; 0xe28 <__ultoa_invert+0xe>
 e72:	cf 01       	movw	r24, r30
 e74:	08 95       	ret
 e76:	46 2f       	mov	r20, r22
 e78:	47 70       	andi	r20, 0x07	; 7
 e7a:	40 5d       	subi	r20, 0xD0	; 208
 e7c:	41 93       	st	Z+, r20
 e7e:	b3 e0       	ldi	r27, 0x03	; 3
 e80:	0f d0       	rcall	.+30     	; 0xea0 <__ultoa_invert+0x86>
 e82:	c9 f7       	brne	.-14     	; 0xe76 <__ultoa_invert+0x5c>
 e84:	f6 cf       	rjmp	.-20     	; 0xe72 <__ultoa_invert+0x58>
 e86:	46 2f       	mov	r20, r22
 e88:	4f 70       	andi	r20, 0x0F	; 15
 e8a:	40 5d       	subi	r20, 0xD0	; 208
 e8c:	4a 33       	cpi	r20, 0x3A	; 58
 e8e:	18 f0       	brcs	.+6      	; 0xe96 <__ultoa_invert+0x7c>
 e90:	49 5d       	subi	r20, 0xD9	; 217
 e92:	31 fd       	sbrc	r19, 1
 e94:	40 52       	subi	r20, 0x20	; 32
 e96:	41 93       	st	Z+, r20
 e98:	02 d0       	rcall	.+4      	; 0xe9e <__ultoa_invert+0x84>
 e9a:	a9 f7       	brne	.-22     	; 0xe86 <__ultoa_invert+0x6c>
 e9c:	ea cf       	rjmp	.-44     	; 0xe72 <__ultoa_invert+0x58>
 e9e:	b4 e0       	ldi	r27, 0x04	; 4
 ea0:	a6 95       	lsr	r26
 ea2:	97 95       	ror	r25
 ea4:	87 95       	ror	r24
 ea6:	77 95       	ror	r23
 ea8:	67 95       	ror	r22
 eaa:	ba 95       	dec	r27
 eac:	c9 f7       	brne	.-14     	; 0xea0 <__ultoa_invert+0x86>
 eae:	00 97       	sbiw	r24, 0x00	; 0
 eb0:	61 05       	cpc	r22, r1
 eb2:	71 05       	cpc	r23, r1
 eb4:	08 95       	ret
 eb6:	9b 01       	movw	r18, r22
 eb8:	ac 01       	movw	r20, r24
 eba:	0a 2e       	mov	r0, r26
 ebc:	06 94       	lsr	r0
 ebe:	57 95       	ror	r21
 ec0:	47 95       	ror	r20
 ec2:	37 95       	ror	r19
 ec4:	27 95       	ror	r18
 ec6:	ba 95       	dec	r27
 ec8:	c9 f7       	brne	.-14     	; 0xebc <__ultoa_invert+0xa2>
 eca:	62 0f       	add	r22, r18
 ecc:	73 1f       	adc	r23, r19
 ece:	84 1f       	adc	r24, r20
 ed0:	95 1f       	adc	r25, r21
 ed2:	a0 1d       	adc	r26, r0
 ed4:	08 95       	ret

00000ed6 <__prologue_saves__>:
 ed6:	2f 92       	push	r2
 ed8:	3f 92       	push	r3
 eda:	4f 92       	push	r4
 edc:	5f 92       	push	r5
 ede:	6f 92       	push	r6
 ee0:	7f 92       	push	r7
 ee2:	8f 92       	push	r8
 ee4:	9f 92       	push	r9
 ee6:	af 92       	push	r10
 ee8:	bf 92       	push	r11
 eea:	cf 92       	push	r12
 eec:	df 92       	push	r13
 eee:	ef 92       	push	r14
 ef0:	ff 92       	push	r15
 ef2:	0f 93       	push	r16
 ef4:	1f 93       	push	r17
 ef6:	cf 93       	push	r28
 ef8:	df 93       	push	r29
 efa:	cd b7       	in	r28, 0x3d	; 61
 efc:	de b7       	in	r29, 0x3e	; 62
 efe:	ca 1b       	sub	r28, r26
 f00:	db 0b       	sbc	r29, r27
 f02:	cd bf       	out	0x3d, r28	; 61
 f04:	de bf       	out	0x3e, r29	; 62
 f06:	09 94       	ijmp

00000f08 <__epilogue_restores__>:
 f08:	2a 88       	ldd	r2, Y+18	; 0x12
 f0a:	39 88       	ldd	r3, Y+17	; 0x11
 f0c:	48 88       	ldd	r4, Y+16	; 0x10
 f0e:	5f 84       	ldd	r5, Y+15	; 0x0f
 f10:	6e 84       	ldd	r6, Y+14	; 0x0e
 f12:	7d 84       	ldd	r7, Y+13	; 0x0d
 f14:	8c 84       	ldd	r8, Y+12	; 0x0c
 f16:	9b 84       	ldd	r9, Y+11	; 0x0b
 f18:	aa 84       	ldd	r10, Y+10	; 0x0a
 f1a:	b9 84       	ldd	r11, Y+9	; 0x09
 f1c:	c8 84       	ldd	r12, Y+8	; 0x08
 f1e:	df 80       	ldd	r13, Y+7	; 0x07
 f20:	ee 80       	ldd	r14, Y+6	; 0x06
 f22:	fd 80       	ldd	r15, Y+5	; 0x05
 f24:	0c 81       	ldd	r16, Y+4	; 0x04
 f26:	1b 81       	ldd	r17, Y+3	; 0x03
 f28:	aa 81       	ldd	r26, Y+2	; 0x02
 f2a:	b9 81       	ldd	r27, Y+1	; 0x01
 f2c:	ce 0f       	add	r28, r30
 f2e:	d1 1d       	adc	r29, r1
 f30:	cd bf       	out	0x3d, r28	; 61
 f32:	de bf       	out	0x3e, r29	; 62
 f34:	ed 01       	movw	r28, r26
 f36:	08 95       	ret

00000f38 <_exit>:
 f38:	f8 94       	cli

00000f3a <__stop_program>:
 f3a:	ff cf       	rjmp	.-2      	; 0xf3a <__stop_program>
