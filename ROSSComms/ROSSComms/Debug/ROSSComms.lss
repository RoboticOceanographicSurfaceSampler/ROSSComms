
ROSSComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00802000  00000fd8  0000106c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00802130  00802130  0000119c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004148  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021d0  00000000  00000000  00005478  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d32  00000000  00000000  00007648  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  0000837c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ae5  00000000  00000000  00008658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092c  00000000  00000000  0000b13d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000ba69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_7>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_8>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_12>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	11 e2       	ldi	r17, 0x21	; 33
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	e8 ed       	ldi	r30, 0xD8	; 216
  c0:	ff e0       	ldi	r31, 0x0F	; 15
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 33       	cpi	r26, 0x30	; 48
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e2       	ldi	r18, 0x21	; 33
  d0:	a0 e3       	ldi	r26, 0x30	; 48
  d2:	b1 e2       	ldi	r27, 0x21	; 33
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	af 34       	cpi	r26, 0x4F	; 79
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <main>
  e2:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z11configureIOv>:

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b6 e0       	ldi	r27, 0x06	; 6
  ee:	34 e0       	ldi	r19, 0x04	; 4
  f0:	12 96       	adiw	r26, 0x02	; 2
  f2:	3c 93       	st	X, r19
  f4:	12 97       	sbiw	r26, 0x02	; 2
  f6:	e0 e4       	ldi	r30, 0x40	; 64
  f8:	f6 e0       	ldi	r31, 0x06	; 6
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	82 83       	std	Z+2, r24	; 0x02
  fe:	90 e2       	ldi	r25, 0x20	; 32
 100:	92 83       	std	Z+2, r25	; 0x02
 102:	84 8b       	std	Z+20, r24	; 0x14
 104:	85 8b       	std	Z+21, r24	; 0x15
 106:	12 96       	adiw	r26, 0x02	; 2
 108:	8c 93       	st	X, r24
 10a:	12 97       	sbiw	r26, 0x02	; 2
 10c:	20 e8       	ldi	r18, 0x80	; 128
 10e:	12 96       	adiw	r26, 0x02	; 2
 110:	2c 93       	st	X, r18
 112:	12 97       	sbiw	r26, 0x02	; 2
 114:	28 e1       	ldi	r18, 0x18	; 24
 116:	57 96       	adiw	r26, 0x17	; 23
 118:	2c 93       	st	X, r18
 11a:	57 97       	sbiw	r26, 0x17	; 23
 11c:	11 96       	adiw	r26, 0x01	; 1
 11e:	9c 93       	st	X, r25
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	28 e0       	ldi	r18, 0x08	; 8
 124:	11 96       	adiw	r26, 0x01	; 1
 126:	2c 93       	st	X, r18
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	41 83       	std	Z+1, r20	; 0x01
 12c:	a0 e6       	ldi	r26, 0x60	; 96
 12e:	b6 e0       	ldi	r27, 0x06	; 6
 130:	11 96       	adiw	r26, 0x01	; 1
 132:	9c 93       	st	X, r25
 134:	11 97       	sbiw	r26, 0x01	; 1
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	8c 93       	st	X, r24
 13a:	11 97       	sbiw	r26, 0x01	; 1
 13c:	31 83       	std	Z+1, r19	; 0x01
 13e:	21 83       	std	Z+1, r18	; 0x01
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	12 96       	adiw	r26, 0x02	; 2
 144:	8c 93       	st	X, r24
 146:	08 95       	ret

00000148 <_Z27configureExternalOscillatorv>:
 148:	e0 e5       	ldi	r30, 0x50	; 80
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	8b e4       	ldi	r24, 0x4B	; 75
 14e:	82 83       	std	Z+2, r24	; 0x02
 150:	80 81       	ld	r24, Z
 152:	88 60       	ori	r24, 0x08	; 8
 154:	80 83       	st	Z, r24
 156:	81 81       	ldd	r24, Z+1	; 0x01
 158:	83 fd       	sbrc	r24, 3
 15a:	09 c0       	rjmp	.+18     	; 0x16e <_Z27configureExternalOscillatorv+0x26>
 15c:	a0 e4       	ldi	r26, 0x40	; 64
 15e:	b6 e0       	ldi	r27, 0x06	; 6
 160:	98 e0       	ldi	r25, 0x08	; 8
 162:	15 96       	adiw	r26, 0x05	; 5
 164:	9c 93       	st	X, r25
 166:	15 97       	sbiw	r26, 0x05	; 5
 168:	81 81       	ldd	r24, Z+1	; 0x01
 16a:	83 ff       	sbrs	r24, 3
 16c:	fa cf       	rjmp	.-12     	; 0x162 <_Z27configureExternalOscillatorv+0x1a>
 16e:	88 e0       	ldi	r24, 0x08	; 8
 170:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 174:	88 ed       	ldi	r24, 0xD8	; 216
 176:	84 bf       	out	0x34, r24	; 52
 178:	e0 e5       	ldi	r30, 0x50	; 80
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	88 ec       	ldi	r24, 0xC8	; 200
 17e:	85 83       	std	Z+5, r24	; 0x05
 180:	80 81       	ld	r24, Z
 182:	80 61       	ori	r24, 0x10	; 16
 184:	80 83       	st	Z, r24
 186:	81 81       	ldd	r24, Z+1	; 0x01
 188:	84 fd       	sbrc	r24, 4
 18a:	09 c0       	rjmp	.+18     	; 0x19e <_Z27configureExternalOscillatorv+0x56>
 18c:	a0 e4       	ldi	r26, 0x40	; 64
 18e:	b6 e0       	ldi	r27, 0x06	; 6
 190:	98 e0       	ldi	r25, 0x08	; 8
 192:	15 96       	adiw	r26, 0x05	; 5
 194:	9c 93       	st	X, r25
 196:	15 97       	sbiw	r26, 0x05	; 5
 198:	81 81       	ldd	r24, Z+1	; 0x01
 19a:	84 ff       	sbrs	r24, 4
 19c:	fa cf       	rjmp	.-12     	; 0x192 <_Z27configureExternalOscillatorv+0x4a>
 19e:	88 e0       	ldi	r24, 0x08	; 8
 1a0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 1a4:	88 ed       	ldi	r24, 0xD8	; 216
 1a6:	84 bf       	out	0x34, r24	; 52
 1a8:	e0 e4       	ldi	r30, 0x40	; 64
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	10 82       	st	Z, r1
 1ae:	84 bf       	out	0x34, r24	; 52
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <_Z14configureUSARTv>:
 1b6:	e0 e4       	ldi	r30, 0x40	; 64
 1b8:	f6 e0       	ldi	r31, 0x06	; 6
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	81 83       	std	Z+1, r24	; 0x01
 1be:	80 e4       	ldi	r24, 0x40	; 64
 1c0:	82 83       	std	Z+2, r24	; 0x02
 1c2:	86 85       	ldd	r24, Z+14	; 0x0e
 1c4:	80 61       	ori	r24, 0x10	; 16
 1c6:	86 87       	std	Z+14, r24	; 0x0e
 1c8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ca:	f8 e0       	ldi	r31, 0x08	; 8
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	84 83       	std	Z+4, r24	; 0x04
 1d0:	82 e2       	ldi	r24, 0x22	; 34
 1d2:	86 83       	std	Z+6, r24	; 0x06
 1d4:	17 82       	std	Z+7, r1	; 0x07
 1d6:	83 81       	ldd	r24, Z+3	; 0x03
 1d8:	80 61       	ori	r24, 0x10	; 16
 1da:	83 83       	std	Z+3, r24	; 0x03
 1dc:	83 81       	ldd	r24, Z+3	; 0x03
 1de:	88 60       	ori	r24, 0x08	; 8
 1e0:	83 83       	std	Z+3, r24	; 0x03
 1e2:	08 95       	ret

000001e4 <_Z21configureTimerCounterv>:
 1e4:	e0 e0       	ldi	r30, 0x00	; 0
 1e6:	f8 e0       	ldi	r31, 0x08	; 8
 1e8:	87 e0       	ldi	r24, 0x07	; 7
 1ea:	80 83       	st	Z, r24
 1ec:	89 e0       	ldi	r24, 0x09	; 9
 1ee:	9d e3       	ldi	r25, 0x3D	; 61
 1f0:	86 a3       	std	Z+38, r24	; 0x26
 1f2:	97 a3       	std	Z+39, r25	; 0x27
 1f4:	11 82       	std	Z+1, r1	; 0x01
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	86 83       	std	Z+6, r24	; 0x06
 1fa:	08 95       	ret

000001fc <__vector_12>:
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
 20c:	e0 e0       	ldi	r30, 0x00	; 0
 20e:	f8 e0       	ldi	r31, 0x08	; 8
 210:	84 85       	ldd	r24, Z+12	; 0x0c
 212:	81 60       	ori	r24, 0x01	; 1
 214:	84 87       	std	Z+12, r24	; 0x0c
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <broadcastStatus>
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_7>:
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_8>:
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	8f 93       	push	r24
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
 250:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <globalToggle>
 254:	88 23       	and	r24, r24
 256:	31 f0       	breq	.+12     	; 0x264 <__vector_8+0x24>
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 25e:	10 92 4d 21 	sts	0x214D, r1	; 0x80214d <globalToggle>
 262:	06 c0       	rjmp	.+12     	; 0x270 <__vector_8+0x30>
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 4d 21 	sts	0x214D, r24	; 0x80214d <globalToggle>
 270:	e0 e0       	ldi	r30, 0x00	; 0
 272:	f4 e0       	ldi	r31, 0x04	; 4
 274:	10 86       	std	Z+8, r1	; 0x08
 276:	11 86       	std	Z+9, r1	; 0x09
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	83 83       	std	Z+3, r24	; 0x03
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <_Z17ReadSignatureBytej>:

uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 28c:	aa ec       	ldi	r26, 0xCA	; 202
 28e:	b1 e0       	ldi	r27, 0x01	; 1
 290:	22 e0       	ldi	r18, 0x02	; 2
 292:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
 294:	fc 01       	movw	r30, r24
 296:	84 91       	lpm	r24, Z
	//  __asm__ ("lpm \n  mov %0, r0 \n" : "=r" (Result) : "z" (Address) : "r0");
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 298:	1c 92       	st	X, r1
	return Result;
}
 29a:	08 95       	ret

0000029c <_Z21configureSerialNumberv>:

/*
Note: This function requires serial and should be called after configureUSART()
*/
void configureSerialNumber(){
 29c:	2f 92       	push	r2
 29e:	3f 92       	push	r3
 2a0:	4f 92       	push	r4
 2a2:	5f 92       	push	r5
 2a4:	6f 92       	push	r6
 2a6:	7f 92       	push	r7
 2a8:	8f 92       	push	r8
 2aa:	9f 92       	push	r9
 2ac:	af 92       	push	r10
 2ae:	bf 92       	push	r11
 2b0:	cf 92       	push	r12
 2b2:	df 92       	push	r13
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
	DeviceSignature[ 0] = ReadSignatureByte(LOTNUM0);
 2c0:	88 e0       	ldi	r24, 0x08	; 8
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2c8:	c2 e4       	ldi	r28, 0x42	; 66
 2ca:	d1 e2       	ldi	r29, 0x21	; 33
 2cc:	88 83       	st	Y, r24
	DeviceSignature[ 1] = ReadSignatureByte(LOTNUM1);
 2ce:	89 e0       	ldi	r24, 0x09	; 9
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2d6:	89 83       	std	Y+1, r24	; 0x01
	DeviceSignature[ 2] = ReadSignatureByte(LOTNUM2);
 2d8:	8a e0       	ldi	r24, 0x0A	; 10
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2e0:	8a 83       	std	Y+2, r24	; 0x02
	DeviceSignature[ 3] = ReadSignatureByte(LOTNUM3);
 2e2:	8b e0       	ldi	r24, 0x0B	; 11
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2ea:	8b 83       	std	Y+3, r24	; 0x03
	DeviceSignature[ 4] = ReadSignatureByte(LOTNUM4);
 2ec:	8c e0       	ldi	r24, 0x0C	; 12
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2f4:	8c 83       	std	Y+4, r24	; 0x04
	DeviceSignature[ 5] = ReadSignatureByte(LOTNUM5);
 2f6:	8d e0       	ldi	r24, 0x0D	; 13
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 2fe:	8d 83       	std	Y+5, r24	; 0x05
	DeviceSignature[ 6] = ReadSignatureByte(WAFNUM );
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 308:	8e 83       	std	Y+6, r24	; 0x06
	DeviceSignature[ 7] = ReadSignatureByte(COORDX0);
 30a:	82 e1       	ldi	r24, 0x12	; 18
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 312:	8f 83       	std	Y+7, r24	; 0x07
	DeviceSignature[ 8] = ReadSignatureByte(COORDX1);
 314:	83 e1       	ldi	r24, 0x13	; 19
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 31c:	88 87       	std	Y+8, r24	; 0x08
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
 31e:	84 e1       	ldi	r24, 0x14	; 20
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 326:	89 87       	std	Y+9, r24	; 0x09
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
 328:	85 e1       	ldi	r24, 0x15	; 21
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 46 01 	call	0x28c	; 0x28c <_Z17ReadSignatureBytej>
 330:	8a 87       	std	Y+10, r24	; 0x0a
	
	UC_LOT_NUMBER = DeviceSignature[0];
 332:	28 80       	ld	r2, Y
 334:	31 2c       	mov	r3, r1
 336:	41 2c       	mov	r4, r1
 338:	51 2c       	mov	r5, r1
 33a:	61 2c       	mov	r6, r1
 33c:	71 2c       	mov	r7, r1
 33e:	43 01       	movw	r8, r6
 340:	a3 e4       	ldi	r26, 0x43	; 67
 342:	b1 e2       	ldi	r27, 0x21	; 33
 344:	e4 e6       	ldi	r30, 0x64	; 100
 346:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(int i = 1; i < 6; ++i){
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
 348:	8d 91       	ld	r24, X+
 34a:	8e 9f       	mul	r24, r30
 34c:	e0 01       	movw	r28, r0
 34e:	8f 9f       	mul	r24, r31
 350:	d0 0d       	add	r29, r0
 352:	11 24       	eor	r1, r1
 354:	1d 2f       	mov	r17, r29
 356:	11 0f       	add	r17, r17
 358:	11 0b       	sbc	r17, r17
 35a:	22 2d       	mov	r18, r2
 35c:	33 2d       	mov	r19, r3
 35e:	44 2d       	mov	r20, r4
 360:	55 2d       	mov	r21, r5
 362:	66 2d       	mov	r22, r6
 364:	77 2d       	mov	r23, r7
 366:	88 2d       	mov	r24, r8
 368:	99 2d       	mov	r25, r9
 36a:	ac 2e       	mov	r10, r28
 36c:	bd 2e       	mov	r11, r29
 36e:	c1 2e       	mov	r12, r17
 370:	d1 2e       	mov	r13, r17
 372:	e1 2e       	mov	r14, r17
 374:	f1 2e       	mov	r15, r17
 376:	01 2f       	mov	r16, r17
 378:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__adddi3>
 37c:	22 2e       	mov	r2, r18
 37e:	33 2e       	mov	r3, r19
 380:	44 2e       	mov	r4, r20
 382:	55 2e       	mov	r5, r21
 384:	66 2e       	mov	r6, r22
 386:	77 2e       	mov	r7, r23
 388:	88 2e       	mov	r8, r24
 38a:	99 2e       	mov	r9, r25
 38c:	ec 59       	subi	r30, 0x9C	; 156
 38e:	ff 4f       	sbci	r31, 0xFF	; 255
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
	
	UC_LOT_NUMBER = DeviceSignature[0];
	
	for(int i = 1; i < 6; ++i){
 390:	e8 35       	cpi	r30, 0x58	; 88
 392:	22 e0       	ldi	r18, 0x02	; 2
 394:	f2 07       	cpc	r31, r18
 396:	c1 f6       	brne	.-80     	; 0x348 <_Z21configureSerialNumberv+0xac>
 398:	20 92 3a 21 	sts	0x213A, r2	; 0x80213a <UC_LOT_NUMBER>
 39c:	30 93 3b 21 	sts	0x213B, r19	; 0x80213b <UC_LOT_NUMBER+0x1>
 3a0:	40 93 3c 21 	sts	0x213C, r20	; 0x80213c <UC_LOT_NUMBER+0x2>
 3a4:	50 93 3d 21 	sts	0x213D, r21	; 0x80213d <UC_LOT_NUMBER+0x3>
 3a8:	60 93 3e 21 	sts	0x213E, r22	; 0x80213e <UC_LOT_NUMBER+0x4>
 3ac:	70 93 3f 21 	sts	0x213F, r23	; 0x80213f <UC_LOT_NUMBER+0x5>
 3b0:	80 93 40 21 	sts	0x2140, r24	; 0x802140 <UC_LOT_NUMBER+0x6>
 3b4:	90 93 41 21 	sts	0x2141, r25	; 0x802141 <UC_LOT_NUMBER+0x7>
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
	}
	
	UC_WAFER_ID = DeviceSignature[6];
 3b8:	e2 e4       	ldi	r30, 0x42	; 66
 3ba:	f1 e2       	ldi	r31, 0x21	; 33
 3bc:	26 81       	ldd	r18, Z+6	; 0x06
	
	for(int i = 1; i < 4; ++i){  //Original stops at 5
		UC_WAFER_ID += DeviceSignature[i+6] * (100*i);
 3be:	a7 81       	ldd	r26, Z+7	; 0x07
 3c0:	84 e6       	ldi	r24, 0x64	; 100
 3c2:	a8 9f       	mul	r26, r24
 3c4:	d0 01       	movw	r26, r0
 3c6:	11 24       	eor	r1, r1
 3c8:	1b 2f       	mov	r17, r27
 3ca:	11 0f       	add	r17, r17
 3cc:	11 0b       	sbc	r17, r17
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	aa 2e       	mov	r10, r26
 3de:	bb 2e       	mov	r11, r27
 3e0:	c1 2e       	mov	r12, r17
 3e2:	d1 2e       	mov	r13, r17
 3e4:	e1 2e       	mov	r14, r17
 3e6:	f1 2e       	mov	r15, r17
 3e8:	01 2f       	mov	r16, r17
 3ea:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__adddi3>
 3ee:	a0 85       	ldd	r26, Z+8	; 0x08
 3f0:	c8 ec       	ldi	r28, 0xC8	; 200
 3f2:	ac 9f       	mul	r26, r28
 3f4:	d0 01       	movw	r26, r0
 3f6:	11 24       	eor	r1, r1
 3f8:	1b 2f       	mov	r17, r27
 3fa:	11 0f       	add	r17, r17
 3fc:	11 0b       	sbc	r17, r17
 3fe:	aa 2e       	mov	r10, r26
 400:	bb 2e       	mov	r11, r27
 402:	c1 2e       	mov	r12, r17
 404:	d1 2e       	mov	r13, r17
 406:	e1 2e       	mov	r14, r17
 408:	f1 2e       	mov	r15, r17
 40a:	01 2f       	mov	r16, r17
 40c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__adddi3>
 410:	c1 85       	ldd	r28, Z+9	; 0x09
 412:	ac e2       	ldi	r26, 0x2C	; 44
 414:	b1 e0       	ldi	r27, 0x01	; 1
 416:	ca 9f       	mul	r28, r26
 418:	f0 01       	movw	r30, r0
 41a:	cb 9f       	mul	r28, r27
 41c:	f0 0d       	add	r31, r0
 41e:	11 24       	eor	r1, r1
 420:	1f 2f       	mov	r17, r31
 422:	11 0f       	add	r17, r17
 424:	11 0b       	sbc	r17, r17
 426:	ae 2e       	mov	r10, r30
 428:	bf 2e       	mov	r11, r31
 42a:	c1 2e       	mov	r12, r17
 42c:	d1 2e       	mov	r13, r17
 42e:	e1 2e       	mov	r14, r17
 430:	f1 2e       	mov	r15, r17
 432:	01 2f       	mov	r16, r17
 434:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__adddi3>
 438:	20 93 32 21 	sts	0x2132, r18	; 0x802132 <UC_WAFER_ID>
 43c:	30 93 33 21 	sts	0x2133, r19	; 0x802133 <UC_WAFER_ID+0x1>
 440:	40 93 34 21 	sts	0x2134, r20	; 0x802134 <UC_WAFER_ID+0x2>
 444:	50 93 35 21 	sts	0x2135, r21	; 0x802135 <UC_WAFER_ID+0x3>
 448:	60 93 36 21 	sts	0x2136, r22	; 0x802136 <UC_WAFER_ID+0x4>
 44c:	70 93 37 21 	sts	0x2137, r23	; 0x802137 <UC_WAFER_ID+0x5>
 450:	80 93 38 21 	sts	0x2138, r24	; 0x802138 <UC_WAFER_ID+0x6>
 454:	90 93 39 21 	sts	0x2139, r25	; 0x802139 <UC_WAFER_ID+0x7>
	}
	
	serialNumber = -1; //Set the default serial number to -1 ("Not assigned yet")
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	9f ef       	ldi	r25, 0xFF	; 255
 45c:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 460:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
	
	//Hardcoded serial number lookups (don't judge)
	if(UC_LOT_NUMBER == 0x142DD && UC_WAFER_ID == 0x25F3)
 464:	22 2d       	mov	r18, r2
 466:	33 2d       	mov	r19, r3
 468:	44 2d       	mov	r20, r4
 46a:	55 2d       	mov	r21, r5
 46c:	66 2d       	mov	r22, r6
 46e:	77 2d       	mov	r23, r7
 470:	88 2d       	mov	r24, r8
 472:	99 2d       	mov	r25, r9
 474:	2d 3d       	cpi	r18, 0xDD	; 221
 476:	32 44       	sbci	r19, 0x42	; 66
 478:	41 40       	sbci	r20, 0x01	; 1
 47a:	51 05       	cpc	r21, r1
 47c:	61 05       	cpc	r22, r1
 47e:	71 05       	cpc	r23, r1
 480:	81 05       	cpc	r24, r1
 482:	91 05       	cpc	r25, r1
 484:	09 f5       	brne	.+66     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 486:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 48a:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 48e:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 492:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 496:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 49a:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 49e:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 4a2:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 4a6:	23 3f       	cpi	r18, 0xF3	; 243
 4a8:	35 42       	sbci	r19, 0x25	; 37
 4aa:	41 05       	cpc	r20, r1
 4ac:	51 05       	cpc	r21, r1
 4ae:	61 05       	cpc	r22, r1
 4b0:	71 05       	cpc	r23, r1
 4b2:	81 05       	cpc	r24, r1
 4b4:	91 05       	cpc	r25, r1
 4b6:	09 f0       	breq	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b8:	79 c0       	rjmp	.+242    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
		serialNumber = 1;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 4c2:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
 4c6:	72 c0       	rjmp	.+228    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x2E84)
 4c8:	22 2d       	mov	r18, r2
 4ca:	33 2d       	mov	r19, r3
 4cc:	44 2d       	mov	r20, r4
 4ce:	55 2d       	mov	r21, r5
 4d0:	66 2d       	mov	r22, r6
 4d2:	77 2d       	mov	r23, r7
 4d4:	88 2d       	mov	r24, r8
 4d6:	99 2d       	mov	r25, r9
 4d8:	29 31       	cpi	r18, 0x19	; 25
 4da:	39 43       	sbci	r19, 0x39	; 57
 4dc:	41 40       	sbci	r20, 0x01	; 1
 4de:	51 05       	cpc	r21, r1
 4e0:	61 05       	cpc	r22, r1
 4e2:	71 05       	cpc	r23, r1
 4e4:	81 05       	cpc	r24, r1
 4e6:	91 05       	cpc	r25, r1
 4e8:	09 f5       	brne	.+66     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 4ea:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 4ee:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 4f2:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 4f6:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 4fa:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 4fe:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 502:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 506:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 50a:	24 38       	cpi	r18, 0x84	; 132
 50c:	3e 42       	sbci	r19, 0x2E	; 46
 50e:	41 05       	cpc	r20, r1
 510:	51 05       	cpc	r21, r1
 512:	61 05       	cpc	r22, r1
 514:	71 05       	cpc	r23, r1
 516:	81 05       	cpc	r24, r1
 518:	91 05       	cpc	r25, r1
 51a:	09 f0       	breq	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51c:	47 c0       	rjmp	.+142    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
		serialNumber = 2;
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 526:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
 52a:	40 c0       	rjmp	.+128    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
	if(UC_LOT_NUMBER == 0x13D02 && UC_WAFER_ID == 0x1AA7)
 52c:	22 2d       	mov	r18, r2
 52e:	33 2d       	mov	r19, r3
 530:	44 2d       	mov	r20, r4
 532:	55 2d       	mov	r21, r5
 534:	66 2d       	mov	r22, r6
 536:	77 2d       	mov	r23, r7
 538:	88 2d       	mov	r24, r8
 53a:	99 2d       	mov	r25, r9
 53c:	22 30       	cpi	r18, 0x02	; 2
 53e:	3d 43       	sbci	r19, 0x3D	; 61
 540:	41 40       	sbci	r20, 0x01	; 1
 542:	51 05       	cpc	r21, r1
 544:	61 05       	cpc	r22, r1
 546:	71 05       	cpc	r23, r1
 548:	81 05       	cpc	r24, r1
 54a:	91 05       	cpc	r25, r1
 54c:	79 f5       	brne	.+94     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 54e:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 552:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 556:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 55a:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 55e:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 562:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 566:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 56a:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 56e:	27 3a       	cpi	r18, 0xA7	; 167
 570:	3a 41       	sbci	r19, 0x1A	; 26
 572:	41 05       	cpc	r20, r1
 574:	51 05       	cpc	r21, r1
 576:	61 05       	cpc	r22, r1
 578:	71 05       	cpc	r23, r1
 57a:	81 05       	cpc	r24, r1
 57c:	91 05       	cpc	r25, r1
 57e:	09 f0       	breq	.+2      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 580:	51 c0       	rjmp	.+162    	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
		serialNumber = 3;
 582:	83 e0       	ldi	r24, 0x03	; 3
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 58a:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
 58e:	4a c0       	rjmp	.+148    	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
	if(UC_LOT_NUMBER == 0x13D02 && UC_WAFER_ID == 0x1FBB)
		serialNumber = 4;
 590:	84 e0       	ldi	r24, 0x04	; 4
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 598:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
 59c:	5d c0       	rjmp	.+186    	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
	if(UC_LOT_NUMBER == 0x13D02 && UC_WAFER_ID == 0x3218)
		serialNumber = 5;
 59e:	85 e0       	ldi	r24, 0x05	; 5
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 5a6:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
 5aa:	71 c0       	rjmp	.+226    	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
	
	
	#ifndef OUTPUT_LOT_AND_WAFER_INFO
	if(serialNumber == -1){
 5ac:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <__data_end>
 5b0:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <__data_end+0x1>
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	09 f0       	breq	.+2      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5b8:	6a c0       	rjmp	.+212    	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
	#endif
		SendStringPC((char *)"#[Lot ID Number: ");
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e2       	ldi	r25, 0x20	; 32
 5be:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z12SendStringPCPc>
		SendNumPC(UC_LOT_NUMBER);
 5c2:	20 91 3a 21 	lds	r18, 0x213A	; 0x80213a <UC_LOT_NUMBER>
 5c6:	30 91 3b 21 	lds	r19, 0x213B	; 0x80213b <UC_LOT_NUMBER+0x1>
 5ca:	40 91 3c 21 	lds	r20, 0x213C	; 0x80213c <UC_LOT_NUMBER+0x2>
 5ce:	50 91 3d 21 	lds	r21, 0x213D	; 0x80213d <UC_LOT_NUMBER+0x3>
 5d2:	60 91 3e 21 	lds	r22, 0x213E	; 0x80213e <UC_LOT_NUMBER+0x4>
 5d6:	70 91 3f 21 	lds	r23, 0x213F	; 0x80213f <UC_LOT_NUMBER+0x5>
 5da:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <UC_LOT_NUMBER+0x6>
 5de:	90 91 41 21 	lds	r25, 0x2141	; 0x802141 <UC_LOT_NUMBER+0x7>
 5e2:	0e 94 6d 04 	call	0x8da	; 0x8da <_Z9SendNumPCy>
		SendStringPC((char *)"]");
 5e6:	82 e1       	ldi	r24, 0x12	; 18
 5e8:	90 e2       	ldi	r25, 0x20	; 32
 5ea:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z12SendStringPCPc>
		
		SendStringPC((char *)"[Wafer ID Number: ");
 5ee:	84 e1       	ldi	r24, 0x14	; 20
 5f0:	90 e2       	ldi	r25, 0x20	; 32
 5f2:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z12SendStringPCPc>
		SendNumPC(UC_WAFER_ID);
 5f6:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 5fa:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 5fe:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 602:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 606:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 60a:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 60e:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 612:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 616:	0e 94 6d 04 	call	0x8da	; 0x8da <_Z9SendNumPCy>
		SendStringPC((char *)"]");
 61a:	82 e1       	ldi	r24, 0x12	; 18
 61c:	90 e2       	ldi	r25, 0x20	; 32
 61e:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z12SendStringPCPc>
 622:	35 c0       	rjmp	.+106    	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
		serialNumber = 1;
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x2E84)
		serialNumber = 2;
	if(UC_LOT_NUMBER == 0x13D02 && UC_WAFER_ID == 0x1AA7)
		serialNumber = 3;
	if(UC_LOT_NUMBER == 0x13D02 && UC_WAFER_ID == 0x1FBB)
 624:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 628:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 62c:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 630:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 634:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 638:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 63c:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 640:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 644:	2b 3b       	cpi	r18, 0xBB	; 187
 646:	3f 41       	sbci	r19, 0x1F	; 31
 648:	41 05       	cpc	r20, r1
 64a:	51 05       	cpc	r21, r1
 64c:	61 05       	cpc	r22, r1
 64e:	71 05       	cpc	r23, r1
 650:	81 05       	cpc	r24, r1
 652:	91 05       	cpc	r25, r1
 654:	09 f4       	brne	.+2      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 656:	9c cf       	rjmp	.-200    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
		serialNumber = 4;
	if(UC_LOT_NUMBER == 0x13D02 && UC_WAFER_ID == 0x3218)
 658:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 65c:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 660:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 664:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 668:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 66c:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 670:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 674:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 678:	28 31       	cpi	r18, 0x18	; 24
 67a:	32 43       	sbci	r19, 0x32	; 50
 67c:	41 05       	cpc	r20, r1
 67e:	51 05       	cpc	r21, r1
 680:	61 05       	cpc	r22, r1
 682:	71 05       	cpc	r23, r1
 684:	81 05       	cpc	r24, r1
 686:	91 05       	cpc	r25, r1
 688:	09 f0       	breq	.+2      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 68a:	90 cf       	rjmp	.-224    	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 68c:	88 cf       	rjmp	.-240    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
		SendNumPC(UC_WAFER_ID);
		SendStringPC((char *)"]");
	#ifndef OUTPUT_LOT_AND_WAFER_INFO
	}	
	#endif
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	1f 91       	pop	r17
 694:	0f 91       	pop	r16
 696:	ff 90       	pop	r15
 698:	ef 90       	pop	r14
 69a:	df 90       	pop	r13
 69c:	cf 90       	pop	r12
 69e:	bf 90       	pop	r11
 6a0:	af 90       	pop	r10
 6a2:	9f 90       	pop	r9
 6a4:	8f 90       	pop	r8
 6a6:	7f 90       	pop	r7
 6a8:	6f 90       	pop	r6
 6aa:	5f 90       	pop	r5
 6ac:	4f 90       	pop	r4
 6ae:	3f 90       	pop	r3
 6b0:	2f 90       	pop	r2
 6b2:	08 95       	ret

000006b4 <main>:


int main(void)
{

	configureIO();	
 6b4:	0e 94 75 00 	call	0xea	; 0xea <_Z11configureIOv>
	configureExternalOscillator();
 6b8:	0e 94 a4 00 	call	0x148	; 0x148 <_Z27configureExternalOscillatorv>
	configureUSART();
 6bc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z14configureUSARTv>
	configureSerialNumber();
 6c0:	0e 94 4e 01 	call	0x29c	; 0x29c <_Z21configureSerialNumberv>
	configureTimerCounter();
 6c4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_Z21configureTimerCounterv>

	uint8_t receivedUSARTData;  //Holds received bytes from serial devices

	LOW_LEVEL_INTERRUPTS_ENABLE();
 6c8:	e0 ea       	ldi	r30, 0xA0	; 160
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	82 81       	ldd	r24, Z+2	; 0x02
 6ce:	81 60       	ori	r24, 0x01	; 1
 6d0:	82 83       	std	Z+2, r24	; 0x02
	sei();
 6d2:	78 94       	sei
	
	//Setup radios
	XBEE_SLEEP();
 6d4:	e0 e0       	ldi	r30, 0x00	; 0
 6d6:	f6 e0       	ldi	r31, 0x06	; 6
 6d8:	88 e0       	ldi	r24, 0x08	; 8
 6da:	85 83       	std	Z+5, r24	; 0x05
	IRIDIUM_SLEEP();
 6dc:	80 e2       	ldi	r24, 0x20	; 32
 6de:	86 83       	std	Z+6, r24	; 0x06
	
	//PORTD.OUTSET = PIN5_bm; //RGB LED Test

	//Init string with basic documentation
	SendStringPC("\n\n\r#[INIT ROSS COMMS]\n\r");
 6e0:	87 e2       	ldi	r24, 0x27	; 39
 6e2:	90 e2       	ldi	r25, 0x20	; 32
 6e4:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
	SendStringPC("#Firmware version ");
 6e8:	8f e3       	ldi	r24, 0x3F	; 63
 6ea:	90 e2       	ldi	r25, 0x20	; 32
 6ec:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
	SendStringPC(FIRMWARE_VERSION_STR);
 6f0:	82 e5       	ldi	r24, 0x52	; 82
 6f2:	90 e2       	ldi	r25, 0x20	; 32
 6f4:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
	SendStringPC("\n\r#Serial Number: ");
 6f8:	86 e5       	ldi	r24, 0x56	; 86
 6fa:	90 e2       	ldi	r25, 0x20	; 32
 6fc:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
	if(serialNumber == -1)
 700:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <__data_end>
 704:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <__data_end+0x1>
 708:	8f 3f       	cpi	r24, 0xFF	; 255
 70a:	2f ef       	ldi	r18, 0xFF	; 255
 70c:	92 07       	cpc	r25, r18
 70e:	29 f4       	brne	.+10     	; 0x71a <main+0x66>
		SendStringPC("NOT SET");
 710:	89 e6       	ldi	r24, 0x69	; 105
 712:	90 e2       	ldi	r25, 0x20	; 32
 714:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
 718:	02 c0       	rjmp	.+4      	; 0x71e <main+0x6a>
	else
		SendNumPC(serialNumber);
 71a:	0e 94 56 04 	call	0x8ac	; 0x8ac <_Z9SendNumPCi>
	SendStringPC("\n\r#Msg format: Iridium Status | RSSI Value | Comms Status\n\r");
 71e:	81 e7       	ldi	r24, 0x71	; 113
 720:	90 e2       	ldi	r25, 0x20	; 32
 722:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
	
	RED_OFF();
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	GREEN_OFF();
 72c:	e0 e6       	ldi	r30, 0x60	; 96
 72e:	f6 e0       	ldi	r31, 0x06	; 6
 730:	80 e2       	ldi	r24, 0x20	; 32
 732:	85 83       	std	Z+5, r24	; 0x05
	BLUE_OFF();
 734:	80 e1       	ldi	r24, 0x10	; 16
 736:	85 83       	std	Z+5, r24	; 0x05
		if(broadcastStatus){
			broadcastStatus = 0;
			//SendStringPC("Broadcast, yo\n\r");
			
			//Assemble Iridium Status byte
			uint8_t iridiumStatus = (CHECK_IRID_PG() << 1) | (CHECK_IRID_NETWORK() << 0);
 738:	0f 2e       	mov	r0, r31
 73a:	f0 e4       	ldi	r31, 0x40	; 64
 73c:	af 2e       	mov	r10, r31
 73e:	f6 e0       	ldi	r31, 0x06	; 6
 740:	bf 2e       	mov	r11, r31
 742:	f0 2d       	mov	r31, r0
			
			//Assemble Comms Value Byte
			uint8_t commsStatus = ((!CHECK_TX_SW()) << 0);
 744:	c0 e0       	ldi	r28, 0x00	; 0
 746:	d6 e0       	ldi	r29, 0x06	; 6
		}
		
		_delay_ms(25);
		
		//Process misc. communication
		if(USART_IsRXComplete(&COMP_USART)){
 748:	0f 2e       	mov	r0, r31
 74a:	f0 ec       	ldi	r31, 0xC0	; 192
 74c:	ef 2e       	mov	r14, r31
 74e:	f8 e0       	ldi	r31, 0x08	; 8
 750:	ff 2e       	mov	r15, r31
 752:	f0 2d       	mov	r31, r0
				SendStringPC("Turning off Xbee\n\r");
				XBEE_SLEEP();
			}
			if(receivedUSARTData == 51){ //Turn on XBee
				SendStringPC("Turning on XBee\n\r");
				XBEE_WAKE();
 754:	68 94       	set
 756:	88 24       	eor	r8, r8
 758:	83 f8       	bld	r8, 3
				SendStringPC("Turning off Iridium Modem\n\r");
				IRIDIUM_SLEEP();
			}
			if(receivedUSARTData == 41){ //Turn on Iridium Modem
				SendStringPC("Turning on Iridium Modem\n\r");
				IRIDIUM_WAKE();
 75a:	10 e2       	ldi	r17, 0x20	; 32
		
		if(CHECK_LED_SW()){
			GREEN_ON();
		}
		else{
			GREEN_OFF();	
 75c:	0f 2e       	mov	r0, r31
 75e:	f0 e6       	ldi	r31, 0x60	; 96
 760:	cf 2e       	mov	r12, r31
 762:	f6 e0       	ldi	r31, 0x06	; 6
 764:	df 2e       	mov	r13, r31
 766:	f0 2d       	mov	r31, r0
	BLUE_OFF();
		
	
    while (1) 
    {
		if(broadcastStatus){
 768:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <broadcastStatus>
 76c:	88 23       	and	r24, r24
 76e:	09 f1       	breq	.+66     	; 0x7b2 <main+0xfe>
			broadcastStatus = 0;
 770:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <broadcastStatus>
			//SendStringPC("Broadcast, yo\n\r");
			
			//Assemble Iridium Status byte
			uint8_t iridiumStatus = (CHECK_IRID_PG() << 1) | (CHECK_IRID_NETWORK() << 0);
 774:	f5 01       	movw	r30, r10
 776:	90 85       	ldd	r25, Z+8	; 0x08
 778:	80 85       	ldd	r24, Z+8	; 0x08
			
			//Assemble Comms Value Byte
			uint8_t commsStatus = ((!CHECK_TX_SW()) << 0);
 77a:	98 84       	ldd	r9, Y+8	; 0x08
		if(broadcastStatus){
			broadcastStatus = 0;
			//SendStringPC("Broadcast, yo\n\r");
			
			//Assemble Iridium Status byte
			uint8_t iridiumStatus = (CHECK_IRID_PG() << 1) | (CHECK_IRID_NETWORK() << 0);
 77c:	90 72       	andi	r25, 0x20	; 32
 77e:	99 0f       	add	r25, r25
 780:	80 71       	andi	r24, 0x10	; 16
			
			//Assemble Comms Value Byte
			uint8_t commsStatus = ((!CHECK_TX_SW()) << 0);
			
			SendNumPC(iridiumStatus);
 782:	89 2b       	or	r24, r25
 784:	0e 94 3e 04 	call	0x87c	; 0x87c <_Z9SendNumPCh>
			SendStringPC("|");
 788:	8d ea       	ldi	r24, 0xAD	; 173
 78a:	90 e2       	ldi	r25, 0x20	; 32
 78c:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
			SendStringPC("RSSI");
 790:	8f ea       	ldi	r24, 0xAF	; 175
 792:	90 e2       	ldi	r25, 0x20	; 32
 794:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
			SendStringPC("|");
 798:	8d ea       	ldi	r24, 0xAD	; 173
 79a:	90 e2       	ldi	r25, 0x20	; 32
 79c:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
			SendNumPC(commsStatus);
 7a0:	94 fa       	bst	r9, 4
 7a2:	88 27       	eor	r24, r24
 7a4:	80 f9       	bld	r24, 0
 7a6:	0e 94 3e 04 	call	0x87c	; 0x87c <_Z9SendNumPCh>
			SendStringPC("\n\r");
 7aa:	8c e3       	ldi	r24, 0x3C	; 60
 7ac:	90 e2       	ldi	r25, 0x20	; 32
 7ae:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7b2:	ff ef       	ldi	r31, 0xFF	; 255
 7b4:	20 e7       	ldi	r18, 0x70	; 112
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	f1 50       	subi	r31, 0x01	; 1
 7ba:	20 40       	sbci	r18, 0x00	; 0
 7bc:	80 40       	sbci	r24, 0x00	; 0
 7be:	e1 f7       	brne	.-8      	; 0x7b8 <main+0x104>
 7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <main+0x10e>
 7c2:	00 00       	nop
		}
		
		_delay_ms(25);
		
		//Process misc. communication
		if(USART_IsRXComplete(&COMP_USART)){
 7c4:	f7 01       	movw	r30, r14
 7c6:	81 81       	ldd	r24, Z+1	; 0x01
 7c8:	88 23       	and	r24, r24
 7ca:	4c f5       	brge	.+82     	; 0x81e <main+0x16a>
			SendStringPC("Received data. ");
 7cc:	84 eb       	ldi	r24, 0xB4	; 180
 7ce:	90 e2       	ldi	r25, 0x20	; 32
 7d0:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
			SendStringPC("\n\r");
 7d4:	8c e3       	ldi	r24, 0x3C	; 60
 7d6:	90 e2       	ldi	r25, 0x20	; 32
 7d8:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
			receivedUSARTData = USART_GetChar(&COMP_USART);
 7dc:	f7 01       	movw	r30, r14
 7de:	00 81       	ld	r16, Z
			
			//Iridium Controls
			if(receivedUSARTData == 40){ //Turn off Iridium Modem
 7e0:	08 32       	cpi	r16, 0x28	; 40
 7e2:	31 f4       	brne	.+12     	; 0x7f0 <main+0x13c>
				SendStringPC("Turning off Iridium Modem\n\r");
 7e4:	84 ec       	ldi	r24, 0xC4	; 196
 7e6:	90 e2       	ldi	r25, 0x20	; 32
 7e8:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
				IRIDIUM_SLEEP();
 7ec:	1e 83       	std	Y+6, r17	; 0x06
 7ee:	10 c0       	rjmp	.+32     	; 0x810 <main+0x15c>
			}
			if(receivedUSARTData == 41){ //Turn on Iridium Modem
 7f0:	09 32       	cpi	r16, 0x29	; 41
 7f2:	31 f4       	brne	.+12     	; 0x800 <main+0x14c>
				SendStringPC("Turning on Iridium Modem\n\r");
 7f4:	80 ee       	ldi	r24, 0xE0	; 224
 7f6:	90 e2       	ldi	r25, 0x20	; 32
 7f8:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
				IRIDIUM_WAKE();
 7fc:	1d 83       	std	Y+5, r17	; 0x05
 7fe:	0f c0       	rjmp	.+30     	; 0x81e <main+0x16a>
			}
			
			//Xbee controls
			if(receivedUSARTData == 50){ //Turn off XBee
 800:	02 33       	cpi	r16, 0x32	; 50
 802:	31 f4       	brne	.+12     	; 0x810 <main+0x15c>
				SendStringPC("Turning off Xbee\n\r");
 804:	8b ef       	ldi	r24, 0xFB	; 251
 806:	90 e2       	ldi	r25, 0x20	; 32
 808:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
				XBEE_SLEEP();
 80c:	8d 82       	std	Y+5, r8	; 0x05
 80e:	07 c0       	rjmp	.+14     	; 0x81e <main+0x16a>
			}
			if(receivedUSARTData == 51){ //Turn on XBee
 810:	03 33       	cpi	r16, 0x33	; 51
 812:	29 f4       	brne	.+10     	; 0x81e <main+0x16a>
				SendStringPC("Turning on XBee\n\r");
 814:	8e e0       	ldi	r24, 0x0E	; 14
 816:	91 e2       	ldi	r25, 0x21	; 33
 818:	0e 94 2e 04 	call	0x85c	; 0x85c <_Z12SendStringPCPKc>
				XBEE_WAKE();
 81c:	8e 82       	std	Y+6, r8	; 0x06
			}
				
			
		}
		
		if (CHECK_TX_SW()) {
 81e:	88 85       	ldd	r24, Y+8	; 0x08
 820:	84 fd       	sbrc	r24, 4
 822:	02 c0       	rjmp	.+4      	; 0x828 <main+0x174>
			//XBEE_WAKE();
			IRIDIUM_WAKE();
 824:	1d 83       	std	Y+5, r17	; 0x05
 826:	01 c0       	rjmp	.+2      	; 0x82a <main+0x176>
		}
		else{
			//XBEE_SLEEP();
			IRIDIUM_SLEEP();
 828:	1e 83       	std	Y+6, r17	; 0x06
		}
		
		if(CHECK_LED_SW()){
 82a:	88 85       	ldd	r24, Y+8	; 0x08
 82c:	88 23       	and	r24, r24
 82e:	1c f0       	brlt	.+6      	; 0x836 <main+0x182>
			GREEN_ON();
 830:	f6 01       	movw	r30, r12
 832:	16 83       	std	Z+6, r17	; 0x06
 834:	99 cf       	rjmp	.-206    	; 0x768 <main+0xb4>
		}
		else{
			GREEN_OFF();	
 836:	f6 01       	movw	r30, r12
 838:	15 83       	std	Z+5, r17	; 0x05
 83a:	96 cf       	rjmp	.-212    	; 0x768 <main+0xb4>

0000083c <_Z12SendStringPCPc>:

void SendNumPC(uint16_t numToSend){
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
}
 83c:	fc 01       	movw	r30, r24
 83e:	20 81       	ld	r18, Z
 840:	22 23       	and	r18, r18
 842:	59 f0       	breq	.+22     	; 0x85a <_Z12SendStringPCPc+0x1e>
 844:	dc 01       	movw	r26, r24
 846:	11 96       	adiw	r26, 0x01	; 1
 848:	e0 ec       	ldi	r30, 0xC0	; 192
 84a:	f8 e0       	ldi	r31, 0x08	; 8
 84c:	91 81       	ldd	r25, Z+1	; 0x01
 84e:	95 ff       	sbrs	r25, 5
 850:	fd cf       	rjmp	.-6      	; 0x84c <_Z12SendStringPCPc+0x10>
 852:	20 83       	st	Z, r18
 854:	2d 91       	ld	r18, X+
 856:	21 11       	cpse	r18, r1
 858:	f9 cf       	rjmp	.-14     	; 0x84c <_Z12SendStringPCPc+0x10>
 85a:	08 95       	ret

0000085c <_Z12SendStringPCPKc>:
 85c:	fc 01       	movw	r30, r24
 85e:	20 81       	ld	r18, Z
 860:	22 23       	and	r18, r18
 862:	59 f0       	breq	.+22     	; 0x87a <_Z12SendStringPCPKc+0x1e>
 864:	dc 01       	movw	r26, r24
 866:	11 96       	adiw	r26, 0x01	; 1
 868:	e0 ec       	ldi	r30, 0xC0	; 192
 86a:	f8 e0       	ldi	r31, 0x08	; 8
 86c:	91 81       	ldd	r25, Z+1	; 0x01
 86e:	95 ff       	sbrs	r25, 5
 870:	fd cf       	rjmp	.-6      	; 0x86c <_Z12SendStringPCPKc+0x10>
 872:	20 83       	st	Z, r18
 874:	2d 91       	ld	r18, X+
 876:	21 11       	cpse	r18, r1
 878:	f9 cf       	rjmp	.-14     	; 0x86c <_Z12SendStringPCPKc+0x10>
 87a:	08 95       	ret

0000087c <_Z9SendNumPCh>:
 87c:	cf 93       	push	r28
 87e:	df 93       	push	r29
 880:	cd b7       	in	r28, 0x3d	; 61
 882:	de b7       	in	r29, 0x3e	; 62
 884:	2a 97       	sbiw	r28, 0x0a	; 10
 886:	cd bf       	out	0x3d, r28	; 61
 888:	de bf       	out	0x3e, r29	; 62
 88a:	4a e0       	ldi	r20, 0x0A	; 10
 88c:	be 01       	movw	r22, r28
 88e:	6f 5f       	subi	r22, 0xFF	; 255
 890:	7f 4f       	sbci	r23, 0xFF	; 255
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__itoa_ncheck>
 898:	ce 01       	movw	r24, r28
 89a:	01 96       	adiw	r24, 0x01	; 1
 89c:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z12SendStringPCPc>
 8a0:	2a 96       	adiw	r28, 0x0a	; 10
 8a2:	cd bf       	out	0x3d, r28	; 61
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	08 95       	ret

000008ac <_Z9SendNumPCi>:

void SendNumPC(int16_t numToSend){
 8ac:	cf 93       	push	r28
 8ae:	df 93       	push	r29
 8b0:	cd b7       	in	r28, 0x3d	; 61
 8b2:	de b7       	in	r29, 0x3e	; 62
 8b4:	64 97       	sbiw	r28, 0x14	; 20
 8b6:	cd bf       	out	0x3d, r28	; 61
 8b8:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 8ba:	4a e0       	ldi	r20, 0x0A	; 10
 8bc:	be 01       	movw	r22, r28
 8be:	6f 5f       	subi	r22, 0xFF	; 255
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
 8c6:	ce 01       	movw	r24, r28
 8c8:	01 96       	adiw	r24, 0x01	; 1
 8ca:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z12SendStringPCPc>
}
 8ce:	64 96       	adiw	r28, 0x14	; 20
 8d0:	cd bf       	out	0x3d, r28	; 61
 8d2:	de bf       	out	0x3e, r29	; 62
 8d4:	df 91       	pop	r29
 8d6:	cf 91       	pop	r28
 8d8:	08 95       	ret

000008da <_Z9SendNumPCy>:
/*
For this function, we need to split the 64 bit integer into two separate
32 bit integers because %llx and %lld are not implemented in this version
of sprintf/
*/
void SendNumPC(uint64_t numToSend){
 8da:	ff 92       	push	r15
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	cd b7       	in	r28, 0x3d	; 61
 8e6:	de b7       	in	r29, 0x3e	; 62
 8e8:	e2 97       	sbiw	r28, 0x32	; 50
 8ea:	cd bf       	out	0x3d, r28	; 61
 8ec:	de bf       	out	0x3e, r29	; 62
 8ee:	f5 2e       	mov	r15, r21
	char buffer[50];
	uint32_t tempLSB;
	uint32_t tempMSB;
	
	tempLSB = numToSend & 0xFFFFFFFF;	//Least significant four bytes
 8f0:	e2 2f       	mov	r30, r18
 8f2:	f3 2f       	mov	r31, r19
 8f4:	14 2f       	mov	r17, r20
	tempMSB = (uint32_t) ((numToSend & 0xFFFFFFFF00000000) >> 32);		//Most significant four bytes
 8f6:	20 e0       	ldi	r18, 0x00	; 0
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	40 e0       	ldi	r20, 0x00	; 0
 8fc:	50 e0       	ldi	r21, 0x00	; 0
 8fe:	00 e2       	ldi	r16, 0x20	; 32
 900:	0e 94 be 04 	call	0x97c	; 0x97c <__lshrdi3>
 904:	82 2f       	mov	r24, r18
 906:	93 2f       	mov	r25, r19
 908:	a4 2f       	mov	r26, r20
 90a:	b5 2f       	mov	r27, r21
		
	if(tempMSB)
 90c:	89 2b       	or	r24, r25
 90e:	8a 2b       	or	r24, r26
 910:	8b 2b       	or	r24, r27
 912:	a9 f0       	breq	.+42     	; 0x93e <_Z9SendNumPCy+0x64>
		sprintf(buffer,"%lx%lx", tempMSB, tempLSB);		
 914:	ff 92       	push	r15
 916:	1f 93       	push	r17
 918:	ff 93       	push	r31
 91a:	ef 93       	push	r30
 91c:	5f 93       	push	r21
 91e:	4f 93       	push	r20
 920:	3f 93       	push	r19
 922:	2f 93       	push	r18
 924:	80 e2       	ldi	r24, 0x20	; 32
 926:	91 e2       	ldi	r25, 0x21	; 33
 928:	9f 93       	push	r25
 92a:	8f 93       	push	r24
 92c:	ce 01       	movw	r24, r28
 92e:	01 96       	adiw	r24, 0x01	; 1
 930:	9f 93       	push	r25
 932:	8f 93       	push	r24
 934:	0e 94 08 05 	call	0xa10	; 0xa10 <sprintf>
 938:	cd bf       	out	0x3d, r28	; 61
 93a:	de bf       	out	0x3e, r29	; 62
 93c:	10 c0       	rjmp	.+32     	; 0x95e <_Z9SendNumPCy+0x84>
	else
		sprintf(buffer,"%lx", tempLSB);		
 93e:	ff 92       	push	r15
 940:	1f 93       	push	r17
 942:	ff 93       	push	r31
 944:	ef 93       	push	r30
 946:	83 e2       	ldi	r24, 0x23	; 35
 948:	91 e2       	ldi	r25, 0x21	; 33
 94a:	9f 93       	push	r25
 94c:	8f 93       	push	r24
 94e:	ce 01       	movw	r24, r28
 950:	01 96       	adiw	r24, 0x01	; 1
 952:	9f 93       	push	r25
 954:	8f 93       	push	r24
 956:	0e 94 08 05 	call	0xa10	; 0xa10 <sprintf>
 95a:	cd bf       	out	0x3d, r28	; 61
 95c:	de bf       	out	0x3e, r29	; 62
	
	SendStringPC(buffer);
 95e:	ce 01       	movw	r24, r28
 960:	01 96       	adiw	r24, 0x01	; 1
 962:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z12SendStringPCPc>
}
 966:	e2 96       	adiw	r28, 0x32	; 50
 968:	cd bf       	out	0x3d, r28	; 61
 96a:	de bf       	out	0x3e, r29	; 62
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	1f 91       	pop	r17
 972:	0f 91       	pop	r16
 974:	ff 90       	pop	r15
 976:	08 95       	ret

00000978 <__ashrdi3>:
 978:	97 fb       	bst	r25, 7
 97a:	10 f8       	bld	r1, 0

0000097c <__lshrdi3>:
 97c:	16 94       	lsr	r1
 97e:	00 08       	sbc	r0, r0
 980:	0f 93       	push	r16
 982:	08 30       	cpi	r16, 0x08	; 8
 984:	98 f0       	brcs	.+38     	; 0x9ac <__lshrdi3+0x30>
 986:	08 50       	subi	r16, 0x08	; 8
 988:	23 2f       	mov	r18, r19
 98a:	34 2f       	mov	r19, r20
 98c:	45 2f       	mov	r20, r21
 98e:	56 2f       	mov	r21, r22
 990:	67 2f       	mov	r22, r23
 992:	78 2f       	mov	r23, r24
 994:	89 2f       	mov	r24, r25
 996:	90 2d       	mov	r25, r0
 998:	f4 cf       	rjmp	.-24     	; 0x982 <__lshrdi3+0x6>
 99a:	05 94       	asr	r0
 99c:	97 95       	ror	r25
 99e:	87 95       	ror	r24
 9a0:	77 95       	ror	r23
 9a2:	67 95       	ror	r22
 9a4:	57 95       	ror	r21
 9a6:	47 95       	ror	r20
 9a8:	37 95       	ror	r19
 9aa:	27 95       	ror	r18
 9ac:	0a 95       	dec	r16
 9ae:	aa f7       	brpl	.-22     	; 0x99a <__lshrdi3+0x1e>
 9b0:	0f 91       	pop	r16
 9b2:	08 95       	ret

000009b4 <__adddi3>:
 9b4:	2a 0d       	add	r18, r10
 9b6:	3b 1d       	adc	r19, r11
 9b8:	4c 1d       	adc	r20, r12
 9ba:	5d 1d       	adc	r21, r13
 9bc:	6e 1d       	adc	r22, r14
 9be:	7f 1d       	adc	r23, r15
 9c0:	80 1f       	adc	r24, r16
 9c2:	91 1f       	adc	r25, r17
 9c4:	08 95       	ret

000009c6 <__itoa_ncheck>:
 9c6:	bb 27       	eor	r27, r27
 9c8:	4a 30       	cpi	r20, 0x0A	; 10
 9ca:	31 f4       	brne	.+12     	; 0x9d8 <__itoa_ncheck+0x12>
 9cc:	99 23       	and	r25, r25
 9ce:	22 f4       	brpl	.+8      	; 0x9d8 <__itoa_ncheck+0x12>
 9d0:	bd e2       	ldi	r27, 0x2D	; 45
 9d2:	90 95       	com	r25
 9d4:	81 95       	neg	r24
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__utoa_common>

000009dc <__utoa_ncheck>:
 9dc:	bb 27       	eor	r27, r27

000009de <__utoa_common>:
 9de:	fb 01       	movw	r30, r22
 9e0:	55 27       	eor	r21, r21
 9e2:	aa 27       	eor	r26, r26
 9e4:	88 0f       	add	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	aa 1f       	adc	r26, r26
 9ea:	a4 17       	cp	r26, r20
 9ec:	10 f0       	brcs	.+4      	; 0x9f2 <__utoa_common+0x14>
 9ee:	a4 1b       	sub	r26, r20
 9f0:	83 95       	inc	r24
 9f2:	50 51       	subi	r21, 0x10	; 16
 9f4:	b9 f7       	brne	.-18     	; 0x9e4 <__utoa_common+0x6>
 9f6:	a0 5d       	subi	r26, 0xD0	; 208
 9f8:	aa 33       	cpi	r26, 0x3A	; 58
 9fa:	08 f0       	brcs	.+2      	; 0x9fe <__utoa_common+0x20>
 9fc:	a9 5d       	subi	r26, 0xD9	; 217
 9fe:	a1 93       	st	Z+, r26
 a00:	00 97       	sbiw	r24, 0x00	; 0
 a02:	79 f7       	brne	.-34     	; 0x9e2 <__utoa_common+0x4>
 a04:	b1 11       	cpse	r27, r1
 a06:	b1 93       	st	Z+, r27
 a08:	11 92       	st	Z+, r1
 a0a:	cb 01       	movw	r24, r22
 a0c:	0c 94 13 07 	jmp	0xe26	; 0xe26 <strrev>

00000a10 <sprintf>:
 a10:	ae e0       	ldi	r26, 0x0E	; 14
 a12:	b0 e0       	ldi	r27, 0x00	; 0
 a14:	ee e0       	ldi	r30, 0x0E	; 14
 a16:	f5 e0       	ldi	r31, 0x05	; 5
 a18:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__prologue_saves__+0x1c>
 a1c:	0d 89       	ldd	r16, Y+21	; 0x15
 a1e:	1e 89       	ldd	r17, Y+22	; 0x16
 a20:	86 e0       	ldi	r24, 0x06	; 6
 a22:	8c 83       	std	Y+4, r24	; 0x04
 a24:	09 83       	std	Y+1, r16	; 0x01
 a26:	1a 83       	std	Y+2, r17	; 0x02
 a28:	8f ef       	ldi	r24, 0xFF	; 255
 a2a:	9f e7       	ldi	r25, 0x7F	; 127
 a2c:	8d 83       	std	Y+5, r24	; 0x05
 a2e:	9e 83       	std	Y+6, r25	; 0x06
 a30:	ae 01       	movw	r20, r28
 a32:	47 5e       	subi	r20, 0xE7	; 231
 a34:	5f 4f       	sbci	r21, 0xFF	; 255
 a36:	6f 89       	ldd	r22, Y+23	; 0x17
 a38:	78 8d       	ldd	r23, Y+24	; 0x18
 a3a:	ce 01       	movw	r24, r28
 a3c:	01 96       	adiw	r24, 0x01	; 1
 a3e:	0e 94 2b 05 	call	0xa56	; 0xa56 <vfprintf>
 a42:	2f 81       	ldd	r18, Y+7	; 0x07
 a44:	38 85       	ldd	r19, Y+8	; 0x08
 a46:	f8 01       	movw	r30, r16
 a48:	e2 0f       	add	r30, r18
 a4a:	f3 1f       	adc	r31, r19
 a4c:	10 82       	st	Z, r1
 a4e:	2e 96       	adiw	r28, 0x0e	; 14
 a50:	e4 e0       	ldi	r30, 0x04	; 4
 a52:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__epilogue_restores__+0x1c>

00000a56 <vfprintf>:
 a56:	ac e0       	ldi	r26, 0x0C	; 12
 a58:	b0 e0       	ldi	r27, 0x00	; 0
 a5a:	e1 e3       	ldi	r30, 0x31	; 49
 a5c:	f5 e0       	ldi	r31, 0x05	; 5
 a5e:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__prologue_saves__>
 a62:	7c 01       	movw	r14, r24
 a64:	6b 01       	movw	r12, r22
 a66:	8a 01       	movw	r16, r20
 a68:	fc 01       	movw	r30, r24
 a6a:	16 82       	std	Z+6, r1	; 0x06
 a6c:	17 82       	std	Z+7, r1	; 0x07
 a6e:	83 81       	ldd	r24, Z+3	; 0x03
 a70:	81 ff       	sbrs	r24, 1
 a72:	bd c1       	rjmp	.+890    	; 0xdee <vfprintf+0x398>
 a74:	ce 01       	movw	r24, r28
 a76:	01 96       	adiw	r24, 0x01	; 1
 a78:	4c 01       	movw	r8, r24
 a7a:	f7 01       	movw	r30, r14
 a7c:	93 81       	ldd	r25, Z+3	; 0x03
 a7e:	f6 01       	movw	r30, r12
 a80:	93 fd       	sbrc	r25, 3
 a82:	85 91       	lpm	r24, Z+
 a84:	93 ff       	sbrs	r25, 3
 a86:	81 91       	ld	r24, Z+
 a88:	6f 01       	movw	r12, r30
 a8a:	88 23       	and	r24, r24
 a8c:	09 f4       	brne	.+2      	; 0xa90 <vfprintf+0x3a>
 a8e:	ab c1       	rjmp	.+854    	; 0xde6 <vfprintf+0x390>
 a90:	85 32       	cpi	r24, 0x25	; 37
 a92:	39 f4       	brne	.+14     	; 0xaa2 <vfprintf+0x4c>
 a94:	93 fd       	sbrc	r25, 3
 a96:	85 91       	lpm	r24, Z+
 a98:	93 ff       	sbrs	r25, 3
 a9a:	81 91       	ld	r24, Z+
 a9c:	6f 01       	movw	r12, r30
 a9e:	85 32       	cpi	r24, 0x25	; 37
 aa0:	29 f4       	brne	.+10     	; 0xaac <vfprintf+0x56>
 aa2:	b7 01       	movw	r22, r14
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 aaa:	e7 cf       	rjmp	.-50     	; 0xa7a <vfprintf+0x24>
 aac:	51 2c       	mov	r5, r1
 aae:	31 2c       	mov	r3, r1
 ab0:	20 e0       	ldi	r18, 0x00	; 0
 ab2:	20 32       	cpi	r18, 0x20	; 32
 ab4:	a0 f4       	brcc	.+40     	; 0xade <vfprintf+0x88>
 ab6:	8b 32       	cpi	r24, 0x2B	; 43
 ab8:	69 f0       	breq	.+26     	; 0xad4 <vfprintf+0x7e>
 aba:	30 f4       	brcc	.+12     	; 0xac8 <vfprintf+0x72>
 abc:	80 32       	cpi	r24, 0x20	; 32
 abe:	59 f0       	breq	.+22     	; 0xad6 <vfprintf+0x80>
 ac0:	83 32       	cpi	r24, 0x23	; 35
 ac2:	69 f4       	brne	.+26     	; 0xade <vfprintf+0x88>
 ac4:	20 61       	ori	r18, 0x10	; 16
 ac6:	2c c0       	rjmp	.+88     	; 0xb20 <vfprintf+0xca>
 ac8:	8d 32       	cpi	r24, 0x2D	; 45
 aca:	39 f0       	breq	.+14     	; 0xada <vfprintf+0x84>
 acc:	80 33       	cpi	r24, 0x30	; 48
 ace:	39 f4       	brne	.+14     	; 0xade <vfprintf+0x88>
 ad0:	21 60       	ori	r18, 0x01	; 1
 ad2:	26 c0       	rjmp	.+76     	; 0xb20 <vfprintf+0xca>
 ad4:	22 60       	ori	r18, 0x02	; 2
 ad6:	24 60       	ori	r18, 0x04	; 4
 ad8:	23 c0       	rjmp	.+70     	; 0xb20 <vfprintf+0xca>
 ada:	28 60       	ori	r18, 0x08	; 8
 adc:	21 c0       	rjmp	.+66     	; 0xb20 <vfprintf+0xca>
 ade:	27 fd       	sbrc	r18, 7
 ae0:	27 c0       	rjmp	.+78     	; 0xb30 <vfprintf+0xda>
 ae2:	30 ed       	ldi	r19, 0xD0	; 208
 ae4:	38 0f       	add	r19, r24
 ae6:	3a 30       	cpi	r19, 0x0A	; 10
 ae8:	78 f4       	brcc	.+30     	; 0xb08 <vfprintf+0xb2>
 aea:	26 ff       	sbrs	r18, 6
 aec:	06 c0       	rjmp	.+12     	; 0xafa <vfprintf+0xa4>
 aee:	fa e0       	ldi	r31, 0x0A	; 10
 af0:	5f 9e       	mul	r5, r31
 af2:	30 0d       	add	r19, r0
 af4:	11 24       	eor	r1, r1
 af6:	53 2e       	mov	r5, r19
 af8:	13 c0       	rjmp	.+38     	; 0xb20 <vfprintf+0xca>
 afa:	8a e0       	ldi	r24, 0x0A	; 10
 afc:	38 9e       	mul	r3, r24
 afe:	30 0d       	add	r19, r0
 b00:	11 24       	eor	r1, r1
 b02:	33 2e       	mov	r3, r19
 b04:	20 62       	ori	r18, 0x20	; 32
 b06:	0c c0       	rjmp	.+24     	; 0xb20 <vfprintf+0xca>
 b08:	8e 32       	cpi	r24, 0x2E	; 46
 b0a:	21 f4       	brne	.+8      	; 0xb14 <vfprintf+0xbe>
 b0c:	26 fd       	sbrc	r18, 6
 b0e:	6b c1       	rjmp	.+726    	; 0xde6 <vfprintf+0x390>
 b10:	20 64       	ori	r18, 0x40	; 64
 b12:	06 c0       	rjmp	.+12     	; 0xb20 <vfprintf+0xca>
 b14:	8c 36       	cpi	r24, 0x6C	; 108
 b16:	11 f4       	brne	.+4      	; 0xb1c <vfprintf+0xc6>
 b18:	20 68       	ori	r18, 0x80	; 128
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <vfprintf+0xca>
 b1c:	88 36       	cpi	r24, 0x68	; 104
 b1e:	41 f4       	brne	.+16     	; 0xb30 <vfprintf+0xda>
 b20:	f6 01       	movw	r30, r12
 b22:	93 fd       	sbrc	r25, 3
 b24:	85 91       	lpm	r24, Z+
 b26:	93 ff       	sbrs	r25, 3
 b28:	81 91       	ld	r24, Z+
 b2a:	6f 01       	movw	r12, r30
 b2c:	81 11       	cpse	r24, r1
 b2e:	c1 cf       	rjmp	.-126    	; 0xab2 <vfprintf+0x5c>
 b30:	98 2f       	mov	r25, r24
 b32:	9f 7d       	andi	r25, 0xDF	; 223
 b34:	95 54       	subi	r25, 0x45	; 69
 b36:	93 30       	cpi	r25, 0x03	; 3
 b38:	28 f4       	brcc	.+10     	; 0xb44 <vfprintf+0xee>
 b3a:	0c 5f       	subi	r16, 0xFC	; 252
 b3c:	1f 4f       	sbci	r17, 0xFF	; 255
 b3e:	ff e3       	ldi	r31, 0x3F	; 63
 b40:	f9 83       	std	Y+1, r31	; 0x01
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <vfprintf+0x108>
 b44:	83 36       	cpi	r24, 0x63	; 99
 b46:	31 f0       	breq	.+12     	; 0xb54 <vfprintf+0xfe>
 b48:	83 37       	cpi	r24, 0x73	; 115
 b4a:	71 f0       	breq	.+28     	; 0xb68 <vfprintf+0x112>
 b4c:	83 35       	cpi	r24, 0x53	; 83
 b4e:	09 f0       	breq	.+2      	; 0xb52 <vfprintf+0xfc>
 b50:	5b c0       	rjmp	.+182    	; 0xc08 <vfprintf+0x1b2>
 b52:	22 c0       	rjmp	.+68     	; 0xb98 <vfprintf+0x142>
 b54:	f8 01       	movw	r30, r16
 b56:	80 81       	ld	r24, Z
 b58:	89 83       	std	Y+1, r24	; 0x01
 b5a:	0e 5f       	subi	r16, 0xFE	; 254
 b5c:	1f 4f       	sbci	r17, 0xFF	; 255
 b5e:	44 24       	eor	r4, r4
 b60:	43 94       	inc	r4
 b62:	51 2c       	mov	r5, r1
 b64:	54 01       	movw	r10, r8
 b66:	15 c0       	rjmp	.+42     	; 0xb92 <vfprintf+0x13c>
 b68:	38 01       	movw	r6, r16
 b6a:	f2 e0       	ldi	r31, 0x02	; 2
 b6c:	6f 0e       	add	r6, r31
 b6e:	71 1c       	adc	r7, r1
 b70:	f8 01       	movw	r30, r16
 b72:	a0 80       	ld	r10, Z
 b74:	b1 80       	ldd	r11, Z+1	; 0x01
 b76:	26 ff       	sbrs	r18, 6
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <vfprintf+0x12a>
 b7a:	65 2d       	mov	r22, r5
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x12e>
 b80:	6f ef       	ldi	r22, 0xFF	; 255
 b82:	7f ef       	ldi	r23, 0xFF	; 255
 b84:	c5 01       	movw	r24, r10
 b86:	2c 87       	std	Y+12, r18	; 0x0c
 b88:	0e 94 08 07 	call	0xe10	; 0xe10 <strnlen>
 b8c:	2c 01       	movw	r4, r24
 b8e:	83 01       	movw	r16, r6
 b90:	2c 85       	ldd	r18, Y+12	; 0x0c
 b92:	2f 77       	andi	r18, 0x7F	; 127
 b94:	22 2e       	mov	r2, r18
 b96:	17 c0       	rjmp	.+46     	; 0xbc6 <vfprintf+0x170>
 b98:	38 01       	movw	r6, r16
 b9a:	f2 e0       	ldi	r31, 0x02	; 2
 b9c:	6f 0e       	add	r6, r31
 b9e:	71 1c       	adc	r7, r1
 ba0:	f8 01       	movw	r30, r16
 ba2:	a0 80       	ld	r10, Z
 ba4:	b1 80       	ldd	r11, Z+1	; 0x01
 ba6:	26 ff       	sbrs	r18, 6
 ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <vfprintf+0x15a>
 baa:	65 2d       	mov	r22, r5
 bac:	70 e0       	ldi	r23, 0x00	; 0
 bae:	02 c0       	rjmp	.+4      	; 0xbb4 <vfprintf+0x15e>
 bb0:	6f ef       	ldi	r22, 0xFF	; 255
 bb2:	7f ef       	ldi	r23, 0xFF	; 255
 bb4:	c5 01       	movw	r24, r10
 bb6:	2c 87       	std	Y+12, r18	; 0x0c
 bb8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <strnlen_P>
 bbc:	2c 01       	movw	r4, r24
 bbe:	2c 85       	ldd	r18, Y+12	; 0x0c
 bc0:	20 68       	ori	r18, 0x80	; 128
 bc2:	22 2e       	mov	r2, r18
 bc4:	83 01       	movw	r16, r6
 bc6:	23 fc       	sbrc	r2, 3
 bc8:	1b c0       	rjmp	.+54     	; 0xc00 <vfprintf+0x1aa>
 bca:	83 2d       	mov	r24, r3
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	48 16       	cp	r4, r24
 bd0:	59 06       	cpc	r5, r25
 bd2:	b0 f4       	brcc	.+44     	; 0xc00 <vfprintf+0x1aa>
 bd4:	b7 01       	movw	r22, r14
 bd6:	80 e2       	ldi	r24, 0x20	; 32
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 bde:	3a 94       	dec	r3
 be0:	f4 cf       	rjmp	.-24     	; 0xbca <vfprintf+0x174>
 be2:	f5 01       	movw	r30, r10
 be4:	27 fc       	sbrc	r2, 7
 be6:	85 91       	lpm	r24, Z+
 be8:	27 fe       	sbrs	r2, 7
 bea:	81 91       	ld	r24, Z+
 bec:	5f 01       	movw	r10, r30
 bee:	b7 01       	movw	r22, r14
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 bf6:	31 10       	cpse	r3, r1
 bf8:	3a 94       	dec	r3
 bfa:	f1 e0       	ldi	r31, 0x01	; 1
 bfc:	4f 1a       	sub	r4, r31
 bfe:	51 08       	sbc	r5, r1
 c00:	41 14       	cp	r4, r1
 c02:	51 04       	cpc	r5, r1
 c04:	71 f7       	brne	.-36     	; 0xbe2 <vfprintf+0x18c>
 c06:	e5 c0       	rjmp	.+458    	; 0xdd2 <vfprintf+0x37c>
 c08:	84 36       	cpi	r24, 0x64	; 100
 c0a:	11 f0       	breq	.+4      	; 0xc10 <vfprintf+0x1ba>
 c0c:	89 36       	cpi	r24, 0x69	; 105
 c0e:	39 f5       	brne	.+78     	; 0xc5e <vfprintf+0x208>
 c10:	f8 01       	movw	r30, r16
 c12:	27 ff       	sbrs	r18, 7
 c14:	07 c0       	rjmp	.+14     	; 0xc24 <vfprintf+0x1ce>
 c16:	60 81       	ld	r22, Z
 c18:	71 81       	ldd	r23, Z+1	; 0x01
 c1a:	82 81       	ldd	r24, Z+2	; 0x02
 c1c:	93 81       	ldd	r25, Z+3	; 0x03
 c1e:	0c 5f       	subi	r16, 0xFC	; 252
 c20:	1f 4f       	sbci	r17, 0xFF	; 255
 c22:	08 c0       	rjmp	.+16     	; 0xc34 <vfprintf+0x1de>
 c24:	60 81       	ld	r22, Z
 c26:	71 81       	ldd	r23, Z+1	; 0x01
 c28:	07 2e       	mov	r0, r23
 c2a:	00 0c       	add	r0, r0
 c2c:	88 0b       	sbc	r24, r24
 c2e:	99 0b       	sbc	r25, r25
 c30:	0e 5f       	subi	r16, 0xFE	; 254
 c32:	1f 4f       	sbci	r17, 0xFF	; 255
 c34:	2f 76       	andi	r18, 0x6F	; 111
 c36:	72 2e       	mov	r7, r18
 c38:	97 ff       	sbrs	r25, 7
 c3a:	09 c0       	rjmp	.+18     	; 0xc4e <vfprintf+0x1f8>
 c3c:	90 95       	com	r25
 c3e:	80 95       	com	r24
 c40:	70 95       	com	r23
 c42:	61 95       	neg	r22
 c44:	7f 4f       	sbci	r23, 0xFF	; 255
 c46:	8f 4f       	sbci	r24, 0xFF	; 255
 c48:	9f 4f       	sbci	r25, 0xFF	; 255
 c4a:	20 68       	ori	r18, 0x80	; 128
 c4c:	72 2e       	mov	r7, r18
 c4e:	2a e0       	ldi	r18, 0x0A	; 10
 c50:	30 e0       	ldi	r19, 0x00	; 0
 c52:	a4 01       	movw	r20, r8
 c54:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__ultoa_invert>
 c58:	a8 2e       	mov	r10, r24
 c5a:	a8 18       	sub	r10, r8
 c5c:	44 c0       	rjmp	.+136    	; 0xce6 <vfprintf+0x290>
 c5e:	85 37       	cpi	r24, 0x75	; 117
 c60:	29 f4       	brne	.+10     	; 0xc6c <vfprintf+0x216>
 c62:	2f 7e       	andi	r18, 0xEF	; 239
 c64:	b2 2e       	mov	r11, r18
 c66:	2a e0       	ldi	r18, 0x0A	; 10
 c68:	30 e0       	ldi	r19, 0x00	; 0
 c6a:	25 c0       	rjmp	.+74     	; 0xcb6 <vfprintf+0x260>
 c6c:	f2 2f       	mov	r31, r18
 c6e:	f9 7f       	andi	r31, 0xF9	; 249
 c70:	bf 2e       	mov	r11, r31
 c72:	8f 36       	cpi	r24, 0x6F	; 111
 c74:	c1 f0       	breq	.+48     	; 0xca6 <vfprintf+0x250>
 c76:	18 f4       	brcc	.+6      	; 0xc7e <vfprintf+0x228>
 c78:	88 35       	cpi	r24, 0x58	; 88
 c7a:	79 f0       	breq	.+30     	; 0xc9a <vfprintf+0x244>
 c7c:	b4 c0       	rjmp	.+360    	; 0xde6 <vfprintf+0x390>
 c7e:	80 37       	cpi	r24, 0x70	; 112
 c80:	19 f0       	breq	.+6      	; 0xc88 <vfprintf+0x232>
 c82:	88 37       	cpi	r24, 0x78	; 120
 c84:	21 f0       	breq	.+8      	; 0xc8e <vfprintf+0x238>
 c86:	af c0       	rjmp	.+350    	; 0xde6 <vfprintf+0x390>
 c88:	2f 2f       	mov	r18, r31
 c8a:	20 61       	ori	r18, 0x10	; 16
 c8c:	b2 2e       	mov	r11, r18
 c8e:	b4 fe       	sbrs	r11, 4
 c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x256>
 c92:	8b 2d       	mov	r24, r11
 c94:	84 60       	ori	r24, 0x04	; 4
 c96:	b8 2e       	mov	r11, r24
 c98:	09 c0       	rjmp	.+18     	; 0xcac <vfprintf+0x256>
 c9a:	24 ff       	sbrs	r18, 4
 c9c:	0a c0       	rjmp	.+20     	; 0xcb2 <vfprintf+0x25c>
 c9e:	9f 2f       	mov	r25, r31
 ca0:	96 60       	ori	r25, 0x06	; 6
 ca2:	b9 2e       	mov	r11, r25
 ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <vfprintf+0x25c>
 ca6:	28 e0       	ldi	r18, 0x08	; 8
 ca8:	30 e0       	ldi	r19, 0x00	; 0
 caa:	05 c0       	rjmp	.+10     	; 0xcb6 <vfprintf+0x260>
 cac:	20 e1       	ldi	r18, 0x10	; 16
 cae:	30 e0       	ldi	r19, 0x00	; 0
 cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <vfprintf+0x260>
 cb2:	20 e1       	ldi	r18, 0x10	; 16
 cb4:	32 e0       	ldi	r19, 0x02	; 2
 cb6:	f8 01       	movw	r30, r16
 cb8:	b7 fe       	sbrs	r11, 7
 cba:	07 c0       	rjmp	.+14     	; 0xcca <vfprintf+0x274>
 cbc:	60 81       	ld	r22, Z
 cbe:	71 81       	ldd	r23, Z+1	; 0x01
 cc0:	82 81       	ldd	r24, Z+2	; 0x02
 cc2:	93 81       	ldd	r25, Z+3	; 0x03
 cc4:	0c 5f       	subi	r16, 0xFC	; 252
 cc6:	1f 4f       	sbci	r17, 0xFF	; 255
 cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <vfprintf+0x280>
 cca:	60 81       	ld	r22, Z
 ccc:	71 81       	ldd	r23, Z+1	; 0x01
 cce:	80 e0       	ldi	r24, 0x00	; 0
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	0e 5f       	subi	r16, 0xFE	; 254
 cd4:	1f 4f       	sbci	r17, 0xFF	; 255
 cd6:	a4 01       	movw	r20, r8
 cd8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__ultoa_invert>
 cdc:	a8 2e       	mov	r10, r24
 cde:	a8 18       	sub	r10, r8
 ce0:	fb 2d       	mov	r31, r11
 ce2:	ff 77       	andi	r31, 0x7F	; 127
 ce4:	7f 2e       	mov	r7, r31
 ce6:	76 fe       	sbrs	r7, 6
 ce8:	0b c0       	rjmp	.+22     	; 0xd00 <vfprintf+0x2aa>
 cea:	37 2d       	mov	r19, r7
 cec:	3e 7f       	andi	r19, 0xFE	; 254
 cee:	a5 14       	cp	r10, r5
 cf0:	50 f4       	brcc	.+20     	; 0xd06 <vfprintf+0x2b0>
 cf2:	74 fe       	sbrs	r7, 4
 cf4:	0a c0       	rjmp	.+20     	; 0xd0a <vfprintf+0x2b4>
 cf6:	72 fc       	sbrc	r7, 2
 cf8:	08 c0       	rjmp	.+16     	; 0xd0a <vfprintf+0x2b4>
 cfa:	37 2d       	mov	r19, r7
 cfc:	3e 7e       	andi	r19, 0xEE	; 238
 cfe:	05 c0       	rjmp	.+10     	; 0xd0a <vfprintf+0x2b4>
 d00:	ba 2c       	mov	r11, r10
 d02:	37 2d       	mov	r19, r7
 d04:	03 c0       	rjmp	.+6      	; 0xd0c <vfprintf+0x2b6>
 d06:	ba 2c       	mov	r11, r10
 d08:	01 c0       	rjmp	.+2      	; 0xd0c <vfprintf+0x2b6>
 d0a:	b5 2c       	mov	r11, r5
 d0c:	34 ff       	sbrs	r19, 4
 d0e:	0d c0       	rjmp	.+26     	; 0xd2a <vfprintf+0x2d4>
 d10:	fe 01       	movw	r30, r28
 d12:	ea 0d       	add	r30, r10
 d14:	f1 1d       	adc	r31, r1
 d16:	80 81       	ld	r24, Z
 d18:	80 33       	cpi	r24, 0x30	; 48
 d1a:	11 f4       	brne	.+4      	; 0xd20 <vfprintf+0x2ca>
 d1c:	39 7e       	andi	r19, 0xE9	; 233
 d1e:	09 c0       	rjmp	.+18     	; 0xd32 <vfprintf+0x2dc>
 d20:	32 ff       	sbrs	r19, 2
 d22:	06 c0       	rjmp	.+12     	; 0xd30 <vfprintf+0x2da>
 d24:	b3 94       	inc	r11
 d26:	b3 94       	inc	r11
 d28:	04 c0       	rjmp	.+8      	; 0xd32 <vfprintf+0x2dc>
 d2a:	83 2f       	mov	r24, r19
 d2c:	86 78       	andi	r24, 0x86	; 134
 d2e:	09 f0       	breq	.+2      	; 0xd32 <vfprintf+0x2dc>
 d30:	b3 94       	inc	r11
 d32:	33 fd       	sbrc	r19, 3
 d34:	13 c0       	rjmp	.+38     	; 0xd5c <vfprintf+0x306>
 d36:	30 ff       	sbrs	r19, 0
 d38:	06 c0       	rjmp	.+12     	; 0xd46 <vfprintf+0x2f0>
 d3a:	5a 2c       	mov	r5, r10
 d3c:	b3 14       	cp	r11, r3
 d3e:	18 f4       	brcc	.+6      	; 0xd46 <vfprintf+0x2f0>
 d40:	53 0c       	add	r5, r3
 d42:	5b 18       	sub	r5, r11
 d44:	b3 2c       	mov	r11, r3
 d46:	b3 14       	cp	r11, r3
 d48:	68 f4       	brcc	.+26     	; 0xd64 <vfprintf+0x30e>
 d4a:	b7 01       	movw	r22, r14
 d4c:	80 e2       	ldi	r24, 0x20	; 32
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	3c 87       	std	Y+12, r19	; 0x0c
 d52:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 d56:	b3 94       	inc	r11
 d58:	3c 85       	ldd	r19, Y+12	; 0x0c
 d5a:	f5 cf       	rjmp	.-22     	; 0xd46 <vfprintf+0x2f0>
 d5c:	b3 14       	cp	r11, r3
 d5e:	10 f4       	brcc	.+4      	; 0xd64 <vfprintf+0x30e>
 d60:	3b 18       	sub	r3, r11
 d62:	01 c0       	rjmp	.+2      	; 0xd66 <vfprintf+0x310>
 d64:	31 2c       	mov	r3, r1
 d66:	34 ff       	sbrs	r19, 4
 d68:	12 c0       	rjmp	.+36     	; 0xd8e <vfprintf+0x338>
 d6a:	b7 01       	movw	r22, r14
 d6c:	80 e3       	ldi	r24, 0x30	; 48
 d6e:	90 e0       	ldi	r25, 0x00	; 0
 d70:	3c 87       	std	Y+12, r19	; 0x0c
 d72:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 d76:	3c 85       	ldd	r19, Y+12	; 0x0c
 d78:	32 ff       	sbrs	r19, 2
 d7a:	17 c0       	rjmp	.+46     	; 0xdaa <vfprintf+0x354>
 d7c:	31 fd       	sbrc	r19, 1
 d7e:	03 c0       	rjmp	.+6      	; 0xd86 <vfprintf+0x330>
 d80:	88 e7       	ldi	r24, 0x78	; 120
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0x334>
 d86:	88 e5       	ldi	r24, 0x58	; 88
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	b7 01       	movw	r22, r14
 d8c:	0c c0       	rjmp	.+24     	; 0xda6 <vfprintf+0x350>
 d8e:	83 2f       	mov	r24, r19
 d90:	86 78       	andi	r24, 0x86	; 134
 d92:	59 f0       	breq	.+22     	; 0xdaa <vfprintf+0x354>
 d94:	31 ff       	sbrs	r19, 1
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x346>
 d98:	8b e2       	ldi	r24, 0x2B	; 43
 d9a:	01 c0       	rjmp	.+2      	; 0xd9e <vfprintf+0x348>
 d9c:	80 e2       	ldi	r24, 0x20	; 32
 d9e:	37 fd       	sbrc	r19, 7
 da0:	8d e2       	ldi	r24, 0x2D	; 45
 da2:	b7 01       	movw	r22, r14
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 daa:	a5 14       	cp	r10, r5
 dac:	38 f4       	brcc	.+14     	; 0xdbc <vfprintf+0x366>
 dae:	b7 01       	movw	r22, r14
 db0:	80 e3       	ldi	r24, 0x30	; 48
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 db8:	5a 94       	dec	r5
 dba:	f7 cf       	rjmp	.-18     	; 0xdaa <vfprintf+0x354>
 dbc:	aa 94       	dec	r10
 dbe:	f4 01       	movw	r30, r8
 dc0:	ea 0d       	add	r30, r10
 dc2:	f1 1d       	adc	r31, r1
 dc4:	80 81       	ld	r24, Z
 dc6:	b7 01       	movw	r22, r14
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 dce:	a1 10       	cpse	r10, r1
 dd0:	f5 cf       	rjmp	.-22     	; 0xdbc <vfprintf+0x366>
 dd2:	33 20       	and	r3, r3
 dd4:	09 f4       	brne	.+2      	; 0xdd8 <vfprintf+0x382>
 dd6:	51 ce       	rjmp	.-862    	; 0xa7a <vfprintf+0x24>
 dd8:	b7 01       	movw	r22, r14
 dda:	80 e2       	ldi	r24, 0x20	; 32
 ddc:	90 e0       	ldi	r25, 0x00	; 0
 dde:	0e 94 23 07 	call	0xe46	; 0xe46 <fputc>
 de2:	3a 94       	dec	r3
 de4:	f6 cf       	rjmp	.-20     	; 0xdd2 <vfprintf+0x37c>
 de6:	f7 01       	movw	r30, r14
 de8:	86 81       	ldd	r24, Z+6	; 0x06
 dea:	97 81       	ldd	r25, Z+7	; 0x07
 dec:	02 c0       	rjmp	.+4      	; 0xdf2 <vfprintf+0x39c>
 dee:	8f ef       	ldi	r24, 0xFF	; 255
 df0:	9f ef       	ldi	r25, 0xFF	; 255
 df2:	2c 96       	adiw	r28, 0x0c	; 12
 df4:	e2 e1       	ldi	r30, 0x12	; 18
 df6:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__epilogue_restores__>

00000dfa <strnlen_P>:
 dfa:	fc 01       	movw	r30, r24
 dfc:	05 90       	lpm	r0, Z+
 dfe:	61 50       	subi	r22, 0x01	; 1
 e00:	70 40       	sbci	r23, 0x00	; 0
 e02:	01 10       	cpse	r0, r1
 e04:	d8 f7       	brcc	.-10     	; 0xdfc <strnlen_P+0x2>
 e06:	80 95       	com	r24
 e08:	90 95       	com	r25
 e0a:	8e 0f       	add	r24, r30
 e0c:	9f 1f       	adc	r25, r31
 e0e:	08 95       	ret

00000e10 <strnlen>:
 e10:	fc 01       	movw	r30, r24
 e12:	61 50       	subi	r22, 0x01	; 1
 e14:	70 40       	sbci	r23, 0x00	; 0
 e16:	01 90       	ld	r0, Z+
 e18:	01 10       	cpse	r0, r1
 e1a:	d8 f7       	brcc	.-10     	; 0xe12 <strnlen+0x2>
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	8e 0f       	add	r24, r30
 e22:	9f 1f       	adc	r25, r31
 e24:	08 95       	ret

00000e26 <strrev>:
 e26:	dc 01       	movw	r26, r24
 e28:	fc 01       	movw	r30, r24
 e2a:	67 2f       	mov	r22, r23
 e2c:	71 91       	ld	r23, Z+
 e2e:	77 23       	and	r23, r23
 e30:	e1 f7       	brne	.-8      	; 0xe2a <strrev+0x4>
 e32:	32 97       	sbiw	r30, 0x02	; 2
 e34:	04 c0       	rjmp	.+8      	; 0xe3e <strrev+0x18>
 e36:	7c 91       	ld	r23, X
 e38:	6d 93       	st	X+, r22
 e3a:	70 83       	st	Z, r23
 e3c:	62 91       	ld	r22, -Z
 e3e:	ae 17       	cp	r26, r30
 e40:	bf 07       	cpc	r27, r31
 e42:	c8 f3       	brcs	.-14     	; 0xe36 <strrev+0x10>
 e44:	08 95       	ret

00000e46 <fputc>:
 e46:	0f 93       	push	r16
 e48:	1f 93       	push	r17
 e4a:	cf 93       	push	r28
 e4c:	df 93       	push	r29
 e4e:	fb 01       	movw	r30, r22
 e50:	23 81       	ldd	r18, Z+3	; 0x03
 e52:	21 fd       	sbrc	r18, 1
 e54:	03 c0       	rjmp	.+6      	; 0xe5c <fputc+0x16>
 e56:	8f ef       	ldi	r24, 0xFF	; 255
 e58:	9f ef       	ldi	r25, 0xFF	; 255
 e5a:	28 c0       	rjmp	.+80     	; 0xeac <fputc+0x66>
 e5c:	22 ff       	sbrs	r18, 2
 e5e:	16 c0       	rjmp	.+44     	; 0xe8c <fputc+0x46>
 e60:	46 81       	ldd	r20, Z+6	; 0x06
 e62:	57 81       	ldd	r21, Z+7	; 0x07
 e64:	24 81       	ldd	r18, Z+4	; 0x04
 e66:	35 81       	ldd	r19, Z+5	; 0x05
 e68:	42 17       	cp	r20, r18
 e6a:	53 07       	cpc	r21, r19
 e6c:	44 f4       	brge	.+16     	; 0xe7e <fputc+0x38>
 e6e:	a0 81       	ld	r26, Z
 e70:	b1 81       	ldd	r27, Z+1	; 0x01
 e72:	9d 01       	movw	r18, r26
 e74:	2f 5f       	subi	r18, 0xFF	; 255
 e76:	3f 4f       	sbci	r19, 0xFF	; 255
 e78:	20 83       	st	Z, r18
 e7a:	31 83       	std	Z+1, r19	; 0x01
 e7c:	8c 93       	st	X, r24
 e7e:	26 81       	ldd	r18, Z+6	; 0x06
 e80:	37 81       	ldd	r19, Z+7	; 0x07
 e82:	2f 5f       	subi	r18, 0xFF	; 255
 e84:	3f 4f       	sbci	r19, 0xFF	; 255
 e86:	26 83       	std	Z+6, r18	; 0x06
 e88:	37 83       	std	Z+7, r19	; 0x07
 e8a:	10 c0       	rjmp	.+32     	; 0xeac <fputc+0x66>
 e8c:	eb 01       	movw	r28, r22
 e8e:	09 2f       	mov	r16, r25
 e90:	18 2f       	mov	r17, r24
 e92:	00 84       	ldd	r0, Z+8	; 0x08
 e94:	f1 85       	ldd	r31, Z+9	; 0x09
 e96:	e0 2d       	mov	r30, r0
 e98:	09 95       	icall
 e9a:	89 2b       	or	r24, r25
 e9c:	e1 f6       	brne	.-72     	; 0xe56 <fputc+0x10>
 e9e:	8e 81       	ldd	r24, Y+6	; 0x06
 ea0:	9f 81       	ldd	r25, Y+7	; 0x07
 ea2:	01 96       	adiw	r24, 0x01	; 1
 ea4:	8e 83       	std	Y+6, r24	; 0x06
 ea6:	9f 83       	std	Y+7, r25	; 0x07
 ea8:	81 2f       	mov	r24, r17
 eaa:	90 2f       	mov	r25, r16
 eac:	df 91       	pop	r29
 eae:	cf 91       	pop	r28
 eb0:	1f 91       	pop	r17
 eb2:	0f 91       	pop	r16
 eb4:	08 95       	ret

00000eb6 <__ultoa_invert>:
 eb6:	fa 01       	movw	r30, r20
 eb8:	aa 27       	eor	r26, r26
 eba:	28 30       	cpi	r18, 0x08	; 8
 ebc:	51 f1       	breq	.+84     	; 0xf12 <__ultoa_invert+0x5c>
 ebe:	20 31       	cpi	r18, 0x10	; 16
 ec0:	81 f1       	breq	.+96     	; 0xf22 <__ultoa_invert+0x6c>
 ec2:	e8 94       	clt
 ec4:	6f 93       	push	r22
 ec6:	6e 7f       	andi	r22, 0xFE	; 254
 ec8:	6e 5f       	subi	r22, 0xFE	; 254
 eca:	7f 4f       	sbci	r23, 0xFF	; 255
 ecc:	8f 4f       	sbci	r24, 0xFF	; 255
 ece:	9f 4f       	sbci	r25, 0xFF	; 255
 ed0:	af 4f       	sbci	r26, 0xFF	; 255
 ed2:	b1 e0       	ldi	r27, 0x01	; 1
 ed4:	3e d0       	rcall	.+124    	; 0xf52 <__ultoa_invert+0x9c>
 ed6:	b4 e0       	ldi	r27, 0x04	; 4
 ed8:	3c d0       	rcall	.+120    	; 0xf52 <__ultoa_invert+0x9c>
 eda:	67 0f       	add	r22, r23
 edc:	78 1f       	adc	r23, r24
 ede:	89 1f       	adc	r24, r25
 ee0:	9a 1f       	adc	r25, r26
 ee2:	a1 1d       	adc	r26, r1
 ee4:	68 0f       	add	r22, r24
 ee6:	79 1f       	adc	r23, r25
 ee8:	8a 1f       	adc	r24, r26
 eea:	91 1d       	adc	r25, r1
 eec:	a1 1d       	adc	r26, r1
 eee:	6a 0f       	add	r22, r26
 ef0:	71 1d       	adc	r23, r1
 ef2:	81 1d       	adc	r24, r1
 ef4:	91 1d       	adc	r25, r1
 ef6:	a1 1d       	adc	r26, r1
 ef8:	20 d0       	rcall	.+64     	; 0xf3a <__ultoa_invert+0x84>
 efa:	09 f4       	brne	.+2      	; 0xefe <__ultoa_invert+0x48>
 efc:	68 94       	set
 efe:	3f 91       	pop	r19
 f00:	2a e0       	ldi	r18, 0x0A	; 10
 f02:	26 9f       	mul	r18, r22
 f04:	11 24       	eor	r1, r1
 f06:	30 19       	sub	r19, r0
 f08:	30 5d       	subi	r19, 0xD0	; 208
 f0a:	31 93       	st	Z+, r19
 f0c:	de f6       	brtc	.-74     	; 0xec4 <__ultoa_invert+0xe>
 f0e:	cf 01       	movw	r24, r30
 f10:	08 95       	ret
 f12:	46 2f       	mov	r20, r22
 f14:	47 70       	andi	r20, 0x07	; 7
 f16:	40 5d       	subi	r20, 0xD0	; 208
 f18:	41 93       	st	Z+, r20
 f1a:	b3 e0       	ldi	r27, 0x03	; 3
 f1c:	0f d0       	rcall	.+30     	; 0xf3c <__ultoa_invert+0x86>
 f1e:	c9 f7       	brne	.-14     	; 0xf12 <__ultoa_invert+0x5c>
 f20:	f6 cf       	rjmp	.-20     	; 0xf0e <__ultoa_invert+0x58>
 f22:	46 2f       	mov	r20, r22
 f24:	4f 70       	andi	r20, 0x0F	; 15
 f26:	40 5d       	subi	r20, 0xD0	; 208
 f28:	4a 33       	cpi	r20, 0x3A	; 58
 f2a:	18 f0       	brcs	.+6      	; 0xf32 <__ultoa_invert+0x7c>
 f2c:	49 5d       	subi	r20, 0xD9	; 217
 f2e:	31 fd       	sbrc	r19, 1
 f30:	40 52       	subi	r20, 0x20	; 32
 f32:	41 93       	st	Z+, r20
 f34:	02 d0       	rcall	.+4      	; 0xf3a <__ultoa_invert+0x84>
 f36:	a9 f7       	brne	.-22     	; 0xf22 <__ultoa_invert+0x6c>
 f38:	ea cf       	rjmp	.-44     	; 0xf0e <__ultoa_invert+0x58>
 f3a:	b4 e0       	ldi	r27, 0x04	; 4
 f3c:	a6 95       	lsr	r26
 f3e:	97 95       	ror	r25
 f40:	87 95       	ror	r24
 f42:	77 95       	ror	r23
 f44:	67 95       	ror	r22
 f46:	ba 95       	dec	r27
 f48:	c9 f7       	brne	.-14     	; 0xf3c <__ultoa_invert+0x86>
 f4a:	00 97       	sbiw	r24, 0x00	; 0
 f4c:	61 05       	cpc	r22, r1
 f4e:	71 05       	cpc	r23, r1
 f50:	08 95       	ret
 f52:	9b 01       	movw	r18, r22
 f54:	ac 01       	movw	r20, r24
 f56:	0a 2e       	mov	r0, r26
 f58:	06 94       	lsr	r0
 f5a:	57 95       	ror	r21
 f5c:	47 95       	ror	r20
 f5e:	37 95       	ror	r19
 f60:	27 95       	ror	r18
 f62:	ba 95       	dec	r27
 f64:	c9 f7       	brne	.-14     	; 0xf58 <__ultoa_invert+0xa2>
 f66:	62 0f       	add	r22, r18
 f68:	73 1f       	adc	r23, r19
 f6a:	84 1f       	adc	r24, r20
 f6c:	95 1f       	adc	r25, r21
 f6e:	a0 1d       	adc	r26, r0
 f70:	08 95       	ret

00000f72 <__prologue_saves__>:
 f72:	2f 92       	push	r2
 f74:	3f 92       	push	r3
 f76:	4f 92       	push	r4
 f78:	5f 92       	push	r5
 f7a:	6f 92       	push	r6
 f7c:	7f 92       	push	r7
 f7e:	8f 92       	push	r8
 f80:	9f 92       	push	r9
 f82:	af 92       	push	r10
 f84:	bf 92       	push	r11
 f86:	cf 92       	push	r12
 f88:	df 92       	push	r13
 f8a:	ef 92       	push	r14
 f8c:	ff 92       	push	r15
 f8e:	0f 93       	push	r16
 f90:	1f 93       	push	r17
 f92:	cf 93       	push	r28
 f94:	df 93       	push	r29
 f96:	cd b7       	in	r28, 0x3d	; 61
 f98:	de b7       	in	r29, 0x3e	; 62
 f9a:	ca 1b       	sub	r28, r26
 f9c:	db 0b       	sbc	r29, r27
 f9e:	cd bf       	out	0x3d, r28	; 61
 fa0:	de bf       	out	0x3e, r29	; 62
 fa2:	09 94       	ijmp

00000fa4 <__epilogue_restores__>:
 fa4:	2a 88       	ldd	r2, Y+18	; 0x12
 fa6:	39 88       	ldd	r3, Y+17	; 0x11
 fa8:	48 88       	ldd	r4, Y+16	; 0x10
 faa:	5f 84       	ldd	r5, Y+15	; 0x0f
 fac:	6e 84       	ldd	r6, Y+14	; 0x0e
 fae:	7d 84       	ldd	r7, Y+13	; 0x0d
 fb0:	8c 84       	ldd	r8, Y+12	; 0x0c
 fb2:	9b 84       	ldd	r9, Y+11	; 0x0b
 fb4:	aa 84       	ldd	r10, Y+10	; 0x0a
 fb6:	b9 84       	ldd	r11, Y+9	; 0x09
 fb8:	c8 84       	ldd	r12, Y+8	; 0x08
 fba:	df 80       	ldd	r13, Y+7	; 0x07
 fbc:	ee 80       	ldd	r14, Y+6	; 0x06
 fbe:	fd 80       	ldd	r15, Y+5	; 0x05
 fc0:	0c 81       	ldd	r16, Y+4	; 0x04
 fc2:	1b 81       	ldd	r17, Y+3	; 0x03
 fc4:	aa 81       	ldd	r26, Y+2	; 0x02
 fc6:	b9 81       	ldd	r27, Y+1	; 0x01
 fc8:	ce 0f       	add	r28, r30
 fca:	d1 1d       	adc	r29, r1
 fcc:	cd bf       	out	0x3d, r28	; 61
 fce:	de bf       	out	0x3e, r29	; 62
 fd0:	ed 01       	movw	r28, r26
 fd2:	08 95       	ret

00000fd4 <_exit>:
 fd4:	f8 94       	cli

00000fd6 <__stop_program>:
 fd6:	ff cf       	rjmp	.-2      	; 0xfd6 <__stop_program>
