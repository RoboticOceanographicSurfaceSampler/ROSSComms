
ROSSComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00802000  00000de2  00000e76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  0080213c  0080213c  00000fb2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000407b  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021ce  00000000  00000000  000051c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c82  00000000  00000000  00007391  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00008014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a13  00000000  00000000  000082f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e7  00000000  00000000  0000ad03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000b5ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_7>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_8>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_12>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	11 e2       	ldi	r17, 0x21	; 33
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	e2 ee       	ldi	r30, 0xE2	; 226
  c0:	fd e0       	ldi	r31, 0x0D	; 13
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ac 33       	cpi	r26, 0x3C	; 60
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e2       	ldi	r18, 0x21	; 33
  d0:	ac e3       	ldi	r26, 0x3C	; 60
  d2:	b1 e2       	ldi	r27, 0x21	; 33
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ab 35       	cpi	r26, 0x5B	; 91
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 a3 02 	call	0x546	; 0x546 <main>
  e2:	0c 94 ef 06 	jmp	0xdde	; 0xdde <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z11configureIOv>:

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b6 e0       	ldi	r27, 0x06	; 6
  ee:	34 e0       	ldi	r19, 0x04	; 4
  f0:	12 96       	adiw	r26, 0x02	; 2
  f2:	3c 93       	st	X, r19
  f4:	12 97       	sbiw	r26, 0x02	; 2
  f6:	e0 e4       	ldi	r30, 0x40	; 64
  f8:	f6 e0       	ldi	r31, 0x06	; 6
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	82 83       	std	Z+2, r24	; 0x02
  fe:	90 e2       	ldi	r25, 0x20	; 32
 100:	92 83       	std	Z+2, r25	; 0x02
 102:	12 96       	adiw	r26, 0x02	; 2
 104:	8c 93       	st	X, r24
 106:	12 97       	sbiw	r26, 0x02	; 2
 108:	11 96       	adiw	r26, 0x01	; 1
 10a:	9c 93       	st	X, r25
 10c:	11 97       	sbiw	r26, 0x01	; 1
 10e:	28 e0       	ldi	r18, 0x08	; 8
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	2c 93       	st	X, r18
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	41 83       	std	Z+1, r20	; 0x01
 118:	a0 e6       	ldi	r26, 0x60	; 96
 11a:	b6 e0       	ldi	r27, 0x06	; 6
 11c:	11 96       	adiw	r26, 0x01	; 1
 11e:	9c 93       	st	X, r25
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	11 96       	adiw	r26, 0x01	; 1
 124:	8c 93       	st	X, r24
 126:	11 97       	sbiw	r26, 0x01	; 1
 128:	31 83       	std	Z+1, r19	; 0x01
 12a:	21 83       	std	Z+1, r18	; 0x01
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	12 96       	adiw	r26, 0x02	; 2
 130:	8c 93       	st	X, r24
 132:	08 95       	ret

00000134 <_Z27configureExternalOscillatorv>:
 134:	e0 e5       	ldi	r30, 0x50	; 80
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	8b e4       	ldi	r24, 0x4B	; 75
 13a:	82 83       	std	Z+2, r24	; 0x02
 13c:	80 81       	ld	r24, Z
 13e:	88 60       	ori	r24, 0x08	; 8
 140:	80 83       	st	Z, r24
 142:	81 81       	ldd	r24, Z+1	; 0x01
 144:	83 fd       	sbrc	r24, 3
 146:	09 c0       	rjmp	.+18     	; 0x15a <_Z27configureExternalOscillatorv+0x26>
 148:	a0 e4       	ldi	r26, 0x40	; 64
 14a:	b6 e0       	ldi	r27, 0x06	; 6
 14c:	98 e0       	ldi	r25, 0x08	; 8
 14e:	15 96       	adiw	r26, 0x05	; 5
 150:	9c 93       	st	X, r25
 152:	15 97       	sbiw	r26, 0x05	; 5
 154:	81 81       	ldd	r24, Z+1	; 0x01
 156:	83 ff       	sbrs	r24, 3
 158:	fa cf       	rjmp	.-12     	; 0x14e <_Z27configureExternalOscillatorv+0x1a>
 15a:	88 e0       	ldi	r24, 0x08	; 8
 15c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 160:	88 ed       	ldi	r24, 0xD8	; 216
 162:	84 bf       	out	0x34, r24	; 52
 164:	e0 e5       	ldi	r30, 0x50	; 80
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	88 ec       	ldi	r24, 0xC8	; 200
 16a:	85 83       	std	Z+5, r24	; 0x05
 16c:	80 81       	ld	r24, Z
 16e:	80 61       	ori	r24, 0x10	; 16
 170:	80 83       	st	Z, r24
 172:	81 81       	ldd	r24, Z+1	; 0x01
 174:	84 fd       	sbrc	r24, 4
 176:	09 c0       	rjmp	.+18     	; 0x18a <_Z27configureExternalOscillatorv+0x56>
 178:	a0 e4       	ldi	r26, 0x40	; 64
 17a:	b6 e0       	ldi	r27, 0x06	; 6
 17c:	98 e0       	ldi	r25, 0x08	; 8
 17e:	15 96       	adiw	r26, 0x05	; 5
 180:	9c 93       	st	X, r25
 182:	15 97       	sbiw	r26, 0x05	; 5
 184:	81 81       	ldd	r24, Z+1	; 0x01
 186:	84 ff       	sbrs	r24, 4
 188:	fa cf       	rjmp	.-12     	; 0x17e <_Z27configureExternalOscillatorv+0x4a>
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 190:	88 ed       	ldi	r24, 0xD8	; 216
 192:	84 bf       	out	0x34, r24	; 52
 194:	e0 e4       	ldi	r30, 0x40	; 64
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	10 82       	st	Z, r1
 19a:	84 bf       	out	0x34, r24	; 52
 19c:	84 e0       	ldi	r24, 0x04	; 4
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <_Z14configureUSARTv>:
 1a2:	e0 e4       	ldi	r30, 0x40	; 64
 1a4:	f6 e0       	ldi	r31, 0x06	; 6
 1a6:	80 e8       	ldi	r24, 0x80	; 128
 1a8:	81 83       	std	Z+1, r24	; 0x01
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	82 83       	std	Z+2, r24	; 0x02
 1ae:	86 85       	ldd	r24, Z+14	; 0x0e
 1b0:	80 61       	ori	r24, 0x10	; 16
 1b2:	86 87       	std	Z+14, r24	; 0x0e
 1b4:	e0 ec       	ldi	r30, 0xC0	; 192
 1b6:	f8 e0       	ldi	r31, 0x08	; 8
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	84 83       	std	Z+4, r24	; 0x04
 1bc:	82 e2       	ldi	r24, 0x22	; 34
 1be:	86 83       	std	Z+6, r24	; 0x06
 1c0:	17 82       	std	Z+7, r1	; 0x07
 1c2:	83 81       	ldd	r24, Z+3	; 0x03
 1c4:	80 61       	ori	r24, 0x10	; 16
 1c6:	83 83       	std	Z+3, r24	; 0x03
 1c8:	83 81       	ldd	r24, Z+3	; 0x03
 1ca:	88 60       	ori	r24, 0x08	; 8
 1cc:	83 83       	std	Z+3, r24	; 0x03
 1ce:	08 95       	ret

000001d0 <_Z21configureTimerCounterv>:
 1d0:	e0 e0       	ldi	r30, 0x00	; 0
 1d2:	f8 e0       	ldi	r31, 0x08	; 8
 1d4:	87 e0       	ldi	r24, 0x07	; 7
 1d6:	80 83       	st	Z, r24
 1d8:	89 e0       	ldi	r24, 0x09	; 9
 1da:	9d e3       	ldi	r25, 0x3D	; 61
 1dc:	86 a3       	std	Z+38, r24	; 0x26
 1de:	97 a3       	std	Z+39, r25	; 0x27
 1e0:	11 82       	std	Z+1, r1	; 0x01
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	86 83       	std	Z+6, r24	; 0x06
 1e6:	08 95       	ret

000001e8 <__vector_12>:
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	8f 93       	push	r24
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
 1f8:	e0 e0       	ldi	r30, 0x00	; 0
 1fa:	f8 e0       	ldi	r31, 0x08	; 8
 1fc:	84 85       	ldd	r24, Z+12	; 0x0c
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	84 87       	std	Z+12, r24	; 0x0c
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <broadcastStatus>
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_7>:
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_8>:
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	8f 93       	push	r24
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
 23c:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <globalToggle>
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <__vector_8+0x24>
 244:	84 e0       	ldi	r24, 0x04	; 4
 246:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 24a:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <globalToggle>
 24e:	06 c0       	rjmp	.+12     	; 0x25c <__vector_8+0x30>
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <globalToggle>
 25c:	e0 e0       	ldi	r30, 0x00	; 0
 25e:	f4 e0       	ldi	r31, 0x04	; 4
 260:	10 86       	std	Z+8, r1	; 0x08
 262:	11 86       	std	Z+9, r1	; 0x09
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	83 83       	std	Z+3, r24	; 0x03
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <_Z17ReadSignatureBytej>:

uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 278:	aa ec       	ldi	r26, 0xCA	; 202
 27a:	b1 e0       	ldi	r27, 0x01	; 1
 27c:	22 e0       	ldi	r18, 0x02	; 2
 27e:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
 280:	fc 01       	movw	r30, r24
 282:	84 91       	lpm	r24, Z
	//  __asm__ ("lpm \n  mov %0, r0 \n" : "=r" (Result) : "z" (Address) : "r0");
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 284:	1c 92       	st	X, r1
	return Result;
}
 286:	08 95       	ret

00000288 <_Z21configureSerialNumberv>:

/*
Note: This function requires serial and should be called after configureUSART()
*/
void configureSerialNumber(){
 288:	2f 92       	push	r2
 28a:	3f 92       	push	r3
 28c:	4f 92       	push	r4
 28e:	5f 92       	push	r5
 290:	6f 92       	push	r6
 292:	7f 92       	push	r7
 294:	8f 92       	push	r8
 296:	9f 92       	push	r9
 298:	af 92       	push	r10
 29a:	bf 92       	push	r11
 29c:	cf 92       	push	r12
 29e:	df 92       	push	r13
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
	DeviceSignature[ 0] = ReadSignatureByte(LOTNUM0);
 2ac:	88 e0       	ldi	r24, 0x08	; 8
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17ReadSignatureBytej>
 2b4:	ce e4       	ldi	r28, 0x4E	; 78
 2b6:	d1 e2       	ldi	r29, 0x21	; 33
 2b8:	88 83       	st	Y, r24
	DeviceSignature[ 1] = ReadSignatureByte(LOTNUM1);
 2ba:	89 e0       	ldi	r24, 0x09	; 9
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17ReadSignatureBytej>
 2c2:	89 83       	std	Y+1, r24	; 0x01
	DeviceSignature[ 2] = ReadSignatureByte(LOTNUM2);
 2c4:	8a e0       	ldi	r24, 0x0A	; 10
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17ReadSignatureBytej>
 2cc:	8a 83       	std	Y+2, r24	; 0x02
	DeviceSignature[ 3] = ReadSignatureByte(LOTNUM3);
 2ce:	8b e0       	ldi	r24, 0x0B	; 11
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17ReadSignatureBytej>
 2d6:	8b 83       	std	Y+3, r24	; 0x03
	DeviceSignature[ 4] = ReadSignatureByte(LOTNUM4);
 2d8:	8c e0       	ldi	r24, 0x0C	; 12
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17ReadSignatureBytej>
 2e0:	8c 83       	std	Y+4, r24	; 0x04
	DeviceSignature[ 5] = ReadSignatureByte(LOTNUM5);
 2e2:	8d e0       	ldi	r24, 0x0D	; 13
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17ReadSignatureBytej>
 2ea:	8d 83       	std	Y+5, r24	; 0x05
	DeviceSignature[ 6] = ReadSignatureByte(WAFNUM );
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17ReadSignatureBytej>
 2f4:	8e 83       	std	Y+6, r24	; 0x06
	DeviceSignature[ 7] = ReadSignatureByte(COORDX0);
 2f6:	82 e1       	ldi	r24, 0x12	; 18
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17ReadSignatureBytej>
 2fe:	8f 83       	std	Y+7, r24	; 0x07
	DeviceSignature[ 8] = ReadSignatureByte(COORDX1);
 300:	83 e1       	ldi	r24, 0x13	; 19
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17ReadSignatureBytej>
 308:	88 87       	std	Y+8, r24	; 0x08
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
 30a:	84 e1       	ldi	r24, 0x14	; 20
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17ReadSignatureBytej>
 312:	89 87       	std	Y+9, r24	; 0x09
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
 314:	85 e1       	ldi	r24, 0x15	; 21
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 3c 01 	call	0x278	; 0x278 <_Z17ReadSignatureBytej>
 31c:	8a 87       	std	Y+10, r24	; 0x0a
	
	UC_LOT_NUMBER = DeviceSignature[0];
 31e:	28 80       	ld	r2, Y
 320:	31 2c       	mov	r3, r1
 322:	41 2c       	mov	r4, r1
 324:	51 2c       	mov	r5, r1
 326:	61 2c       	mov	r6, r1
 328:	71 2c       	mov	r7, r1
 32a:	43 01       	movw	r8, r6
 32c:	af e4       	ldi	r26, 0x4F	; 79
 32e:	b1 e2       	ldi	r27, 0x21	; 33
 330:	e4 e6       	ldi	r30, 0x64	; 100
 332:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(int i = 1; i < 6; ++i){
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
 334:	8d 91       	ld	r24, X+
 336:	8e 9f       	mul	r24, r30
 338:	e0 01       	movw	r28, r0
 33a:	8f 9f       	mul	r24, r31
 33c:	d0 0d       	add	r29, r0
 33e:	11 24       	eor	r1, r1
 340:	1d 2f       	mov	r17, r29
 342:	11 0f       	add	r17, r17
 344:	11 0b       	sbc	r17, r17
 346:	22 2d       	mov	r18, r2
 348:	33 2d       	mov	r19, r3
 34a:	44 2d       	mov	r20, r4
 34c:	55 2d       	mov	r21, r5
 34e:	66 2d       	mov	r22, r6
 350:	77 2d       	mov	r23, r7
 352:	88 2d       	mov	r24, r8
 354:	99 2d       	mov	r25, r9
 356:	ac 2e       	mov	r10, r28
 358:	bd 2e       	mov	r11, r29
 35a:	c1 2e       	mov	r12, r17
 35c:	d1 2e       	mov	r13, r17
 35e:	e1 2e       	mov	r14, r17
 360:	f1 2e       	mov	r15, r17
 362:	01 2f       	mov	r16, r17
 364:	0e 94 df 03 	call	0x7be	; 0x7be <__adddi3>
 368:	22 2e       	mov	r2, r18
 36a:	33 2e       	mov	r3, r19
 36c:	44 2e       	mov	r4, r20
 36e:	55 2e       	mov	r5, r21
 370:	66 2e       	mov	r6, r22
 372:	77 2e       	mov	r7, r23
 374:	88 2e       	mov	r8, r24
 376:	99 2e       	mov	r9, r25
 378:	ec 59       	subi	r30, 0x9C	; 156
 37a:	ff 4f       	sbci	r31, 0xFF	; 255
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
	
	UC_LOT_NUMBER = DeviceSignature[0];
	
	for(int i = 1; i < 6; ++i){
 37c:	e8 35       	cpi	r30, 0x58	; 88
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	f8 07       	cpc	r31, r24
 382:	c1 f6       	brne	.-80     	; 0x334 <_Z21configureSerialNumberv+0xac>
 384:	20 92 46 21 	sts	0x2146, r2	; 0x802146 <UC_LOT_NUMBER>
 388:	30 92 47 21 	sts	0x2147, r3	; 0x802147 <UC_LOT_NUMBER+0x1>
 38c:	40 92 48 21 	sts	0x2148, r4	; 0x802148 <UC_LOT_NUMBER+0x2>
 390:	50 92 49 21 	sts	0x2149, r5	; 0x802149 <UC_LOT_NUMBER+0x3>
 394:	60 92 4a 21 	sts	0x214A, r6	; 0x80214a <UC_LOT_NUMBER+0x4>
 398:	70 92 4b 21 	sts	0x214B, r7	; 0x80214b <UC_LOT_NUMBER+0x5>
 39c:	80 92 4c 21 	sts	0x214C, r8	; 0x80214c <UC_LOT_NUMBER+0x6>
 3a0:	90 92 4d 21 	sts	0x214D, r9	; 0x80214d <UC_LOT_NUMBER+0x7>
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
	}
	
	UC_WAFER_ID = DeviceSignature[6];
 3a4:	ee e4       	ldi	r30, 0x4E	; 78
 3a6:	f1 e2       	ldi	r31, 0x21	; 33
 3a8:	26 81       	ldd	r18, Z+6	; 0x06
	
	for(int i = 1; i < 4; ++i){  //Original stops at 5
		UC_WAFER_ID += DeviceSignature[i+6] * (100*i);
 3aa:	a7 81       	ldd	r26, Z+7	; 0x07
 3ac:	c4 e6       	ldi	r28, 0x64	; 100
 3ae:	ac 9f       	mul	r26, r28
 3b0:	d0 01       	movw	r26, r0
 3b2:	11 24       	eor	r1, r1
 3b4:	1b 2f       	mov	r17, r27
 3b6:	11 0f       	add	r17, r17
 3b8:	11 0b       	sbc	r17, r17
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	aa 2e       	mov	r10, r26
 3ca:	bb 2e       	mov	r11, r27
 3cc:	c1 2e       	mov	r12, r17
 3ce:	d1 2e       	mov	r13, r17
 3d0:	e1 2e       	mov	r14, r17
 3d2:	f1 2e       	mov	r15, r17
 3d4:	01 2f       	mov	r16, r17
 3d6:	0e 94 df 03 	call	0x7be	; 0x7be <__adddi3>
 3da:	a0 85       	ldd	r26, Z+8	; 0x08
 3dc:	c8 ec       	ldi	r28, 0xC8	; 200
 3de:	ac 9f       	mul	r26, r28
 3e0:	d0 01       	movw	r26, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	1b 2f       	mov	r17, r27
 3e6:	11 0f       	add	r17, r17
 3e8:	11 0b       	sbc	r17, r17
 3ea:	aa 2e       	mov	r10, r26
 3ec:	bb 2e       	mov	r11, r27
 3ee:	c1 2e       	mov	r12, r17
 3f0:	d1 2e       	mov	r13, r17
 3f2:	e1 2e       	mov	r14, r17
 3f4:	f1 2e       	mov	r15, r17
 3f6:	01 2f       	mov	r16, r17
 3f8:	0e 94 df 03 	call	0x7be	; 0x7be <__adddi3>
 3fc:	c1 85       	ldd	r28, Z+9	; 0x09
 3fe:	ac e2       	ldi	r26, 0x2C	; 44
 400:	b1 e0       	ldi	r27, 0x01	; 1
 402:	ca 9f       	mul	r28, r26
 404:	f0 01       	movw	r30, r0
 406:	cb 9f       	mul	r28, r27
 408:	f0 0d       	add	r31, r0
 40a:	11 24       	eor	r1, r1
 40c:	1f 2f       	mov	r17, r31
 40e:	11 0f       	add	r17, r17
 410:	11 0b       	sbc	r17, r17
 412:	ae 2e       	mov	r10, r30
 414:	bf 2e       	mov	r11, r31
 416:	c1 2e       	mov	r12, r17
 418:	d1 2e       	mov	r13, r17
 41a:	e1 2e       	mov	r14, r17
 41c:	f1 2e       	mov	r15, r17
 41e:	01 2f       	mov	r16, r17
 420:	0e 94 df 03 	call	0x7be	; 0x7be <__adddi3>
 424:	20 93 3e 21 	sts	0x213E, r18	; 0x80213e <UC_WAFER_ID>
 428:	30 93 3f 21 	sts	0x213F, r19	; 0x80213f <UC_WAFER_ID+0x1>
 42c:	40 93 40 21 	sts	0x2140, r20	; 0x802140 <UC_WAFER_ID+0x2>
 430:	50 93 41 21 	sts	0x2141, r21	; 0x802141 <UC_WAFER_ID+0x3>
 434:	60 93 42 21 	sts	0x2142, r22	; 0x802142 <UC_WAFER_ID+0x4>
 438:	70 93 43 21 	sts	0x2143, r23	; 0x802143 <UC_WAFER_ID+0x5>
 43c:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <UC_WAFER_ID+0x6>
 440:	90 93 45 21 	sts	0x2145, r25	; 0x802145 <UC_WAFER_ID+0x7>
	}
	
	serialNumber = -1; //Set the default serial number to -1 ("Not assigned yet")
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	9f ef       	ldi	r25, 0xFF	; 255
 448:	80 93 3c 21 	sts	0x213C, r24	; 0x80213c <__data_end>
 44c:	90 93 3d 21 	sts	0x213D, r25	; 0x80213d <__data_end+0x1>
	
	//Hardcoded serial number lookups (don't judge)
	if(UC_LOT_NUMBER == 0x142DD && UC_WAFER_ID == 0x25F3){
 450:	22 2d       	mov	r18, r2
 452:	33 2d       	mov	r19, r3
 454:	44 2d       	mov	r20, r4
 456:	55 2d       	mov	r21, r5
 458:	66 2d       	mov	r22, r6
 45a:	77 2d       	mov	r23, r7
 45c:	88 2d       	mov	r24, r8
 45e:	99 2d       	mov	r25, r9
 460:	2d 3d       	cpi	r18, 0xDD	; 221
 462:	32 44       	sbci	r19, 0x42	; 66
 464:	41 40       	sbci	r20, 0x01	; 1
 466:	51 05       	cpc	r21, r1
 468:	61 05       	cpc	r22, r1
 46a:	71 05       	cpc	r23, r1
 46c:	81 05       	cpc	r24, r1
 46e:	91 05       	cpc	r25, r1
 470:	19 f5       	brne	.+70     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 472:	20 91 3e 21 	lds	r18, 0x213E	; 0x80213e <UC_WAFER_ID>
 476:	30 91 3f 21 	lds	r19, 0x213F	; 0x80213f <UC_WAFER_ID+0x1>
 47a:	40 91 40 21 	lds	r20, 0x2140	; 0x802140 <UC_WAFER_ID+0x2>
 47e:	50 91 41 21 	lds	r21, 0x2141	; 0x802141 <UC_WAFER_ID+0x3>
 482:	60 91 42 21 	lds	r22, 0x2142	; 0x802142 <UC_WAFER_ID+0x4>
 486:	70 91 43 21 	lds	r23, 0x2143	; 0x802143 <UC_WAFER_ID+0x5>
 48a:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <UC_WAFER_ID+0x6>
 48e:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <UC_WAFER_ID+0x7>
 492:	23 3f       	cpi	r18, 0xF3	; 243
 494:	35 42       	sbci	r19, 0x25	; 37
 496:	41 05       	cpc	r20, r1
 498:	51 05       	cpc	r21, r1
 49a:	61 05       	cpc	r22, r1
 49c:	71 05       	cpc	r23, r1
 49e:	81 05       	cpc	r24, r1
 4a0:	91 05       	cpc	r25, r1
 4a2:	51 f4       	brne	.+20     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		serialNumber = 1;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	80 93 3c 21 	sts	0x213C, r24	; 0x80213c <__data_end>
 4ac:	90 93 3d 21 	sts	0x213D, r25	; 0x80213d <__data_end+0x1>
		SendStringPC("\n\rIdentified board.");
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	90 e2       	ldi	r25, 0x20	; 32
 4b4:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
	}
	
	#ifdef OUTPUT_LOT_AND_WAFER_INFO
		SendStringPC((char *)"#[Lot ID Number: ");
 4b8:	84 e1       	ldi	r24, 0x14	; 20
 4ba:	90 e2       	ldi	r25, 0x20	; 32
 4bc:	0e 94 3b 03 	call	0x676	; 0x676 <_Z12SendStringPCPc>
		SendNumPC(UC_LOT_NUMBER);
 4c0:	20 91 46 21 	lds	r18, 0x2146	; 0x802146 <UC_LOT_NUMBER>
 4c4:	30 91 47 21 	lds	r19, 0x2147	; 0x802147 <UC_LOT_NUMBER+0x1>
 4c8:	40 91 48 21 	lds	r20, 0x2148	; 0x802148 <UC_LOT_NUMBER+0x2>
 4cc:	50 91 49 21 	lds	r21, 0x2149	; 0x802149 <UC_LOT_NUMBER+0x3>
 4d0:	60 91 4a 21 	lds	r22, 0x214A	; 0x80214a <UC_LOT_NUMBER+0x4>
 4d4:	70 91 4b 21 	lds	r23, 0x214B	; 0x80214b <UC_LOT_NUMBER+0x5>
 4d8:	80 91 4c 21 	lds	r24, 0x214C	; 0x80214c <UC_LOT_NUMBER+0x6>
 4dc:	90 91 4d 21 	lds	r25, 0x214D	; 0x80214d <UC_LOT_NUMBER+0x7>
 4e0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z9SendNumPCy>
		SendStringPC((char *)"]");
 4e4:	86 e2       	ldi	r24, 0x26	; 38
 4e6:	90 e2       	ldi	r25, 0x20	; 32
 4e8:	0e 94 3b 03 	call	0x676	; 0x676 <_Z12SendStringPCPc>
		
		SendStringPC((char *)"[Wafer ID Number: ");
 4ec:	88 e2       	ldi	r24, 0x28	; 40
 4ee:	90 e2       	ldi	r25, 0x20	; 32
 4f0:	0e 94 3b 03 	call	0x676	; 0x676 <_Z12SendStringPCPc>
		SendNumPC(UC_WAFER_ID);
 4f4:	20 91 3e 21 	lds	r18, 0x213E	; 0x80213e <UC_WAFER_ID>
 4f8:	30 91 3f 21 	lds	r19, 0x213F	; 0x80213f <UC_WAFER_ID+0x1>
 4fc:	40 91 40 21 	lds	r20, 0x2140	; 0x802140 <UC_WAFER_ID+0x2>
 500:	50 91 41 21 	lds	r21, 0x2141	; 0x802141 <UC_WAFER_ID+0x3>
 504:	60 91 42 21 	lds	r22, 0x2142	; 0x802142 <UC_WAFER_ID+0x4>
 508:	70 91 43 21 	lds	r23, 0x2143	; 0x802143 <UC_WAFER_ID+0x5>
 50c:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <UC_WAFER_ID+0x6>
 510:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <UC_WAFER_ID+0x7>
 514:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_Z9SendNumPCy>
		SendStringPC((char *)"]");
 518:	86 e2       	ldi	r24, 0x26	; 38
 51a:	90 e2       	ldi	r25, 0x20	; 32
 51c:	0e 94 3b 03 	call	0x676	; 0x676 <_Z12SendStringPCPc>
	#endif
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	ff 90       	pop	r15
 52a:	ef 90       	pop	r14
 52c:	df 90       	pop	r13
 52e:	cf 90       	pop	r12
 530:	bf 90       	pop	r11
 532:	af 90       	pop	r10
 534:	9f 90       	pop	r9
 536:	8f 90       	pop	r8
 538:	7f 90       	pop	r7
 53a:	6f 90       	pop	r6
 53c:	5f 90       	pop	r5
 53e:	4f 90       	pop	r4
 540:	3f 90       	pop	r3
 542:	2f 90       	pop	r2
 544:	08 95       	ret

00000546 <main>:


int main(void)
{

	configureIO();	
 546:	0e 94 75 00 	call	0xea	; 0xea <_Z11configureIOv>
	configureExternalOscillator();
 54a:	0e 94 9a 00 	call	0x134	; 0x134 <_Z27configureExternalOscillatorv>
	configureUSART();
 54e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z14configureUSARTv>
	configureSerialNumber();
 552:	0e 94 44 01 	call	0x288	; 0x288 <_Z21configureSerialNumberv>
	configureTimerCounter();
 556:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_Z21configureTimerCounterv>

	uint8_t receivedUSARTData;  //Holds received bytes from serial devices

	LOW_LEVEL_INTERRUPTS_ENABLE();
 55a:	e0 ea       	ldi	r30, 0xA0	; 160
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	82 81       	ldd	r24, Z+2	; 0x02
 560:	81 60       	ori	r24, 0x01	; 1
 562:	82 83       	std	Z+2, r24	; 0x02
	sei();
 564:	78 94       	sei
	
	//Setup radios
	XBEE_SLEEP();
 566:	e0 e0       	ldi	r30, 0x00	; 0
 568:	f6 e0       	ldi	r31, 0x06	; 6
 56a:	88 e0       	ldi	r24, 0x08	; 8
 56c:	85 83       	std	Z+5, r24	; 0x05
	IRIDIUM_SLEEP();
 56e:	80 e2       	ldi	r24, 0x20	; 32
 570:	86 83       	std	Z+6, r24	; 0x06
	
	//PORTD.OUTSET = PIN5_bm; //RGB LED Test

	//Init string with basic documentation
	SendStringPC("\n\r#[INIT ROSE COMMS]\n\r");
 572:	8b e3       	ldi	r24, 0x3B	; 59
 574:	90 e2       	ldi	r25, 0x20	; 32
 576:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
	SendStringPC("#Firmware version ");
 57a:	82 e5       	ldi	r24, 0x52	; 82
 57c:	90 e2       	ldi	r25, 0x20	; 32
 57e:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
	SendStringPC(FIRMWARE_VERSION_STR);
 582:	85 e6       	ldi	r24, 0x65	; 101
 584:	90 e2       	ldi	r25, 0x20	; 32
 586:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
	SendStringPC("\n\r#Serial Number: ");
 58a:	89 e6       	ldi	r24, 0x69	; 105
 58c:	90 e2       	ldi	r25, 0x20	; 32
 58e:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
	if(serialNumber == -1)
 592:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <__data_end>
 596:	90 91 3d 21 	lds	r25, 0x213D	; 0x80213d <__data_end+0x1>
 59a:	8f 3f       	cpi	r24, 0xFF	; 255
 59c:	2f ef       	ldi	r18, 0xFF	; 255
 59e:	92 07       	cpc	r25, r18
 5a0:	29 f4       	brne	.+10     	; 0x5ac <main+0x66>
		SendStringPC("NOT SET");
 5a2:	8c e7       	ldi	r24, 0x7C	; 124
 5a4:	90 e2       	ldi	r25, 0x20	; 32
 5a6:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <main+0x6a>
	else
		SendNumPC(serialNumber);
 5ac:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z9SendNumPCi>
	SendStringPC("\n\r#Msg format: Iridium Status | RSSI Value | Comms Status\n\r");
 5b0:	84 e8       	ldi	r24, 0x84	; 132
 5b2:	90 e2       	ldi	r25, 0x20	; 32
 5b4:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
    {
		if(broadcastStatus){
			broadcastStatus = 0;
			//SendStringPC("Broadcast, yo\n\r");
		}
		STATUS_TOGGLE();
 5b8:	c0 e4       	ldi	r28, 0x40	; 64
 5ba:	d6 e0       	ldi	r29, 0x06	; 6
 5bc:	68 94       	set
 5be:	bb 24       	eor	r11, r11
 5c0:	b2 f8       	bld	r11, 2
		_delay_ms(25);
		
		
		if(USART_IsRXComplete(&COMP_USART)){
 5c2:	0f 2e       	mov	r0, r31
 5c4:	f0 ec       	ldi	r31, 0xC0	; 192
 5c6:	ef 2e       	mov	r14, r31
 5c8:	f8 e0       	ldi	r31, 0x08	; 8
 5ca:	ff 2e       	mov	r15, r31
 5cc:	f0 2d       	mov	r31, r0
			}
				
			
		}
		
		if (CHECK_TX_SW()) {
 5ce:	00 e0       	ldi	r16, 0x00	; 0
 5d0:	16 e0       	ldi	r17, 0x06	; 6
			ERROR_SET();
			//XBEE_WAKE();
			IRIDIUM_WAKE();
		}
		else{
			ERROR_CLR();
 5d2:	68 94       	set
 5d4:	cc 24       	eor	r12, r12
 5d6:	c3 f8       	bld	r12, 3
			//XBEE_SLEEP();
			IRIDIUM_SLEEP();
 5d8:	68 94       	set
 5da:	dd 24       	eor	r13, r13
 5dc:	d5 f8       	bld	r13, 5
	SendStringPC("\n\r#Msg format: Iridium Status | RSSI Value | Comms Status\n\r");
	
	
    while (1) 
    {
		if(broadcastStatus){
 5de:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <broadcastStatus>
 5e2:	81 11       	cpse	r24, r1
			broadcastStatus = 0;
 5e4:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <broadcastStatus>
			//SendStringPC("Broadcast, yo\n\r");
		}
		STATUS_TOGGLE();
 5e8:	8c 81       	ldd	r24, Y+4	; 0x04
 5ea:	82 fd       	sbrc	r24, 2
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <main+0xac>
 5ee:	bd 82       	std	Y+5, r11	; 0x05
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <main+0xae>
 5f2:	be 82       	std	Y+6, r11	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	90 e7       	ldi	r25, 0x70	; 112
 5f8:	e2 e0       	ldi	r30, 0x02	; 2
 5fa:	81 50       	subi	r24, 0x01	; 1
 5fc:	90 40       	sbci	r25, 0x00	; 0
 5fe:	e0 40       	sbci	r30, 0x00	; 0
 600:	e1 f7       	brne	.-8      	; 0x5fa <main+0xb4>
 602:	00 c0       	rjmp	.+0      	; 0x604 <main+0xbe>
 604:	00 00       	nop
		_delay_ms(25);
		
		
		if(USART_IsRXComplete(&COMP_USART)){
 606:	f7 01       	movw	r30, r14
 608:	81 81       	ldd	r24, Z+1	; 0x01
 60a:	88 23       	and	r24, r24
 60c:	4c f5       	brge	.+82     	; 0x660 <main+0x11a>
			SendStringPC("Received data. ");
 60e:	80 ec       	ldi	r24, 0xC0	; 192
 610:	90 e2       	ldi	r25, 0x20	; 32
 612:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
			SendStringPC("\n\r");
 616:	8f e4       	ldi	r24, 0x4F	; 79
 618:	90 e2       	ldi	r25, 0x20	; 32
 61a:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
			receivedUSARTData = USART_GetChar(&COMP_USART);
 61e:	f7 01       	movw	r30, r14
 620:	a0 80       	ld	r10, Z
			
			//Iridium Controls
			if(receivedUSARTData == 40){ //Turn off Iridium Modem
 622:	f8 e2       	ldi	r31, 0x28	; 40
 624:	af 12       	cpse	r10, r31
 626:	05 c0       	rjmp	.+10     	; 0x632 <main+0xec>
				SendStringPC("Turning off Iridium Modem\n\r");
 628:	80 ed       	ldi	r24, 0xD0	; 208
 62a:	90 e2       	ldi	r25, 0x20	; 32
 62c:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
 630:	10 c0       	rjmp	.+32     	; 0x652 <main+0x10c>
			}
			if(receivedUSARTData == 41){ //Turn on Iridium Modem
 632:	29 e2       	ldi	r18, 0x29	; 41
 634:	a2 12       	cpse	r10, r18
 636:	05 c0       	rjmp	.+10     	; 0x642 <main+0xfc>
				SendStringPC("Turning on Iridium Modem\n\r");
 638:	8c ee       	ldi	r24, 0xEC	; 236
 63a:	90 e2       	ldi	r25, 0x20	; 32
 63c:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
 640:	0f c0       	rjmp	.+30     	; 0x660 <main+0x11a>
			}
			
			//Xbee controls
			if(receivedUSARTData == 50){ //Turn off XBee
 642:	82 e3       	ldi	r24, 0x32	; 50
 644:	a8 12       	cpse	r10, r24
 646:	05 c0       	rjmp	.+10     	; 0x652 <main+0x10c>
				SendStringPC("Turning off Xbee\n\r");
 648:	87 e0       	ldi	r24, 0x07	; 7
 64a:	91 e2       	ldi	r25, 0x21	; 33
 64c:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
 650:	07 c0       	rjmp	.+14     	; 0x660 <main+0x11a>
			}
			if(receivedUSARTData == 51){ //Turn on XBee
 652:	93 e3       	ldi	r25, 0x33	; 51
 654:	a9 12       	cpse	r10, r25
 656:	04 c0       	rjmp	.+8      	; 0x660 <main+0x11a>
				SendStringPC("Turning on XBee\n\r");
 658:	8a e1       	ldi	r24, 0x1A	; 26
 65a:	91 e2       	ldi	r25, 0x21	; 33
 65c:	0e 94 4b 03 	call	0x696	; 0x696 <_Z12SendStringPCPKc>
			}
				
			
		}
		
		if (CHECK_TX_SW()) {
 660:	f8 01       	movw	r30, r16
 662:	80 85       	ldd	r24, Z+8	; 0x08
 664:	84 fd       	sbrc	r24, 4
 666:	03 c0       	rjmp	.+6      	; 0x66e <main+0x128>
			ERROR_SET();
 668:	cd 82       	std	Y+5, r12	; 0x05
			//XBEE_WAKE();
			IRIDIUM_WAKE();
 66a:	d5 82       	std	Z+5, r13	; 0x05
 66c:	b8 cf       	rjmp	.-144    	; 0x5de <main+0x98>
		}
		else{
			ERROR_CLR();
 66e:	ce 82       	std	Y+6, r12	; 0x06
			//XBEE_SLEEP();
			IRIDIUM_SLEEP();
 670:	f8 01       	movw	r30, r16
 672:	d6 82       	std	Z+6, r13	; 0x06
 674:	b4 cf       	rjmp	.-152    	; 0x5de <main+0x98>

00000676 <_Z12SendStringPCPc>:

void SendNumPC(uint16_t numToSend){
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
}
 676:	fc 01       	movw	r30, r24
 678:	20 81       	ld	r18, Z
 67a:	22 23       	and	r18, r18
 67c:	59 f0       	breq	.+22     	; 0x694 <_Z12SendStringPCPc+0x1e>
 67e:	dc 01       	movw	r26, r24
 680:	11 96       	adiw	r26, 0x01	; 1
 682:	e0 ec       	ldi	r30, 0xC0	; 192
 684:	f8 e0       	ldi	r31, 0x08	; 8
 686:	91 81       	ldd	r25, Z+1	; 0x01
 688:	95 ff       	sbrs	r25, 5
 68a:	fd cf       	rjmp	.-6      	; 0x686 <_Z12SendStringPCPc+0x10>
 68c:	20 83       	st	Z, r18
 68e:	2d 91       	ld	r18, X+
 690:	21 11       	cpse	r18, r1
 692:	f9 cf       	rjmp	.-14     	; 0x686 <_Z12SendStringPCPc+0x10>
 694:	08 95       	ret

00000696 <_Z12SendStringPCPKc>:
 696:	fc 01       	movw	r30, r24
 698:	20 81       	ld	r18, Z
 69a:	22 23       	and	r18, r18
 69c:	59 f0       	breq	.+22     	; 0x6b4 <_Z12SendStringPCPKc+0x1e>
 69e:	dc 01       	movw	r26, r24
 6a0:	11 96       	adiw	r26, 0x01	; 1
 6a2:	e0 ec       	ldi	r30, 0xC0	; 192
 6a4:	f8 e0       	ldi	r31, 0x08	; 8
 6a6:	91 81       	ldd	r25, Z+1	; 0x01
 6a8:	95 ff       	sbrs	r25, 5
 6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <_Z12SendStringPCPKc+0x10>
 6ac:	20 83       	st	Z, r18
 6ae:	2d 91       	ld	r18, X+
 6b0:	21 11       	cpse	r18, r1
 6b2:	f9 cf       	rjmp	.-14     	; 0x6a6 <_Z12SendStringPCPKc+0x10>
 6b4:	08 95       	ret

000006b6 <_Z9SendNumPCi>:

void SendNumPC(int16_t numToSend){
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
 6be:	64 97       	sbiw	r28, 0x14	; 20
 6c0:	cd bf       	out	0x3d, r28	; 61
 6c2:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 6c4:	4a e0       	ldi	r20, 0x0A	; 10
 6c6:	be 01       	movw	r22, r28
 6c8:	6f 5f       	subi	r22, 0xFF	; 255
 6ca:	7f 4f       	sbci	r23, 0xFF	; 255
 6cc:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
 6d0:	ce 01       	movw	r24, r28
 6d2:	01 96       	adiw	r24, 0x01	; 1
 6d4:	0e 94 3b 03 	call	0x676	; 0x676 <_Z12SendStringPCPc>
}
 6d8:	64 96       	adiw	r28, 0x14	; 20
 6da:	cd bf       	out	0x3d, r28	; 61
 6dc:	de bf       	out	0x3e, r29	; 62
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <_Z9SendNumPCy>:
/*
For this function, we need to split the 64 bit integer into two separate
32 bit integers because %llx and %lld are not implemented in this version
of sprintf/
*/
void SendNumPC(uint64_t numToSend){
 6e4:	ff 92       	push	r15
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62
 6f2:	e2 97       	sbiw	r28, 0x32	; 50
 6f4:	cd bf       	out	0x3d, r28	; 61
 6f6:	de bf       	out	0x3e, r29	; 62
 6f8:	f5 2e       	mov	r15, r21
	char buffer[50];
	uint32_t tempLSB;
	uint32_t tempMSB;
	
	tempLSB = numToSend & 0xFFFFFFFF;	//Least significant four bytes
 6fa:	e2 2f       	mov	r30, r18
 6fc:	f3 2f       	mov	r31, r19
 6fe:	14 2f       	mov	r17, r20
	tempMSB = (uint32_t) ((numToSend & 0xFFFFFFFF00000000) >> 32);		//Most significant four bytes
 700:	20 e0       	ldi	r18, 0x00	; 0
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	40 e0       	ldi	r20, 0x00	; 0
 706:	50 e0       	ldi	r21, 0x00	; 0
 708:	00 e2       	ldi	r16, 0x20	; 32
 70a:	0e 94 c3 03 	call	0x786	; 0x786 <__lshrdi3>
 70e:	82 2f       	mov	r24, r18
 710:	93 2f       	mov	r25, r19
 712:	a4 2f       	mov	r26, r20
 714:	b5 2f       	mov	r27, r21
		
	if(tempMSB)
 716:	89 2b       	or	r24, r25
 718:	8a 2b       	or	r24, r26
 71a:	8b 2b       	or	r24, r27
 71c:	a9 f0       	breq	.+42     	; 0x748 <_Z9SendNumPCy+0x64>
		sprintf(buffer,"%lx%lx", tempMSB, tempLSB);		
 71e:	ff 92       	push	r15
 720:	1f 93       	push	r17
 722:	ff 93       	push	r31
 724:	ef 93       	push	r30
 726:	5f 93       	push	r21
 728:	4f 93       	push	r20
 72a:	3f 93       	push	r19
 72c:	2f 93       	push	r18
 72e:	8c e2       	ldi	r24, 0x2C	; 44
 730:	91 e2       	ldi	r25, 0x21	; 33
 732:	9f 93       	push	r25
 734:	8f 93       	push	r24
 736:	ce 01       	movw	r24, r28
 738:	01 96       	adiw	r24, 0x01	; 1
 73a:	9f 93       	push	r25
 73c:	8f 93       	push	r24
 73e:	0e 94 0d 04 	call	0x81a	; 0x81a <sprintf>
 742:	cd bf       	out	0x3d, r28	; 61
 744:	de bf       	out	0x3e, r29	; 62
 746:	10 c0       	rjmp	.+32     	; 0x768 <_Z9SendNumPCy+0x84>
	else
		sprintf(buffer,"%lx", tempLSB);		
 748:	ff 92       	push	r15
 74a:	1f 93       	push	r17
 74c:	ff 93       	push	r31
 74e:	ef 93       	push	r30
 750:	8f e2       	ldi	r24, 0x2F	; 47
 752:	91 e2       	ldi	r25, 0x21	; 33
 754:	9f 93       	push	r25
 756:	8f 93       	push	r24
 758:	ce 01       	movw	r24, r28
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	9f 93       	push	r25
 75e:	8f 93       	push	r24
 760:	0e 94 0d 04 	call	0x81a	; 0x81a <sprintf>
 764:	cd bf       	out	0x3d, r28	; 61
 766:	de bf       	out	0x3e, r29	; 62
	
	SendStringPC(buffer);
 768:	ce 01       	movw	r24, r28
 76a:	01 96       	adiw	r24, 0x01	; 1
 76c:	0e 94 3b 03 	call	0x676	; 0x676 <_Z12SendStringPCPc>
}
 770:	e2 96       	adiw	r28, 0x32	; 50
 772:	cd bf       	out	0x3d, r28	; 61
 774:	de bf       	out	0x3e, r29	; 62
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	ff 90       	pop	r15
 780:	08 95       	ret

00000782 <__ashrdi3>:
 782:	97 fb       	bst	r25, 7
 784:	10 f8       	bld	r1, 0

00000786 <__lshrdi3>:
 786:	16 94       	lsr	r1
 788:	00 08       	sbc	r0, r0
 78a:	0f 93       	push	r16
 78c:	08 30       	cpi	r16, 0x08	; 8
 78e:	98 f0       	brcs	.+38     	; 0x7b6 <__lshrdi3+0x30>
 790:	08 50       	subi	r16, 0x08	; 8
 792:	23 2f       	mov	r18, r19
 794:	34 2f       	mov	r19, r20
 796:	45 2f       	mov	r20, r21
 798:	56 2f       	mov	r21, r22
 79a:	67 2f       	mov	r22, r23
 79c:	78 2f       	mov	r23, r24
 79e:	89 2f       	mov	r24, r25
 7a0:	90 2d       	mov	r25, r0
 7a2:	f4 cf       	rjmp	.-24     	; 0x78c <__lshrdi3+0x6>
 7a4:	05 94       	asr	r0
 7a6:	97 95       	ror	r25
 7a8:	87 95       	ror	r24
 7aa:	77 95       	ror	r23
 7ac:	67 95       	ror	r22
 7ae:	57 95       	ror	r21
 7b0:	47 95       	ror	r20
 7b2:	37 95       	ror	r19
 7b4:	27 95       	ror	r18
 7b6:	0a 95       	dec	r16
 7b8:	aa f7       	brpl	.-22     	; 0x7a4 <__lshrdi3+0x1e>
 7ba:	0f 91       	pop	r16
 7bc:	08 95       	ret

000007be <__adddi3>:
 7be:	2a 0d       	add	r18, r10
 7c0:	3b 1d       	adc	r19, r11
 7c2:	4c 1d       	adc	r20, r12
 7c4:	5d 1d       	adc	r21, r13
 7c6:	6e 1d       	adc	r22, r14
 7c8:	7f 1d       	adc	r23, r15
 7ca:	80 1f       	adc	r24, r16
 7cc:	91 1f       	adc	r25, r17
 7ce:	08 95       	ret

000007d0 <__itoa_ncheck>:
 7d0:	bb 27       	eor	r27, r27
 7d2:	4a 30       	cpi	r20, 0x0A	; 10
 7d4:	31 f4       	brne	.+12     	; 0x7e2 <__itoa_ncheck+0x12>
 7d6:	99 23       	and	r25, r25
 7d8:	22 f4       	brpl	.+8      	; 0x7e2 <__itoa_ncheck+0x12>
 7da:	bd e2       	ldi	r27, 0x2D	; 45
 7dc:	90 95       	com	r25
 7de:	81 95       	neg	r24
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__utoa_common>

000007e6 <__utoa_ncheck>:
 7e6:	bb 27       	eor	r27, r27

000007e8 <__utoa_common>:
 7e8:	fb 01       	movw	r30, r22
 7ea:	55 27       	eor	r21, r21
 7ec:	aa 27       	eor	r26, r26
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	aa 1f       	adc	r26, r26
 7f4:	a4 17       	cp	r26, r20
 7f6:	10 f0       	brcs	.+4      	; 0x7fc <__utoa_common+0x14>
 7f8:	a4 1b       	sub	r26, r20
 7fa:	83 95       	inc	r24
 7fc:	50 51       	subi	r21, 0x10	; 16
 7fe:	b9 f7       	brne	.-18     	; 0x7ee <__utoa_common+0x6>
 800:	a0 5d       	subi	r26, 0xD0	; 208
 802:	aa 33       	cpi	r26, 0x3A	; 58
 804:	08 f0       	brcs	.+2      	; 0x808 <__utoa_common+0x20>
 806:	a9 5d       	subi	r26, 0xD9	; 217
 808:	a1 93       	st	Z+, r26
 80a:	00 97       	sbiw	r24, 0x00	; 0
 80c:	79 f7       	brne	.-34     	; 0x7ec <__utoa_common+0x4>
 80e:	b1 11       	cpse	r27, r1
 810:	b1 93       	st	Z+, r27
 812:	11 92       	st	Z+, r1
 814:	cb 01       	movw	r24, r22
 816:	0c 94 18 06 	jmp	0xc30	; 0xc30 <strrev>

0000081a <sprintf>:
 81a:	ae e0       	ldi	r26, 0x0E	; 14
 81c:	b0 e0       	ldi	r27, 0x00	; 0
 81e:	e3 e1       	ldi	r30, 0x13	; 19
 820:	f4 e0       	ldi	r31, 0x04	; 4
 822:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__prologue_saves__+0x1c>
 826:	0d 89       	ldd	r16, Y+21	; 0x15
 828:	1e 89       	ldd	r17, Y+22	; 0x16
 82a:	86 e0       	ldi	r24, 0x06	; 6
 82c:	8c 83       	std	Y+4, r24	; 0x04
 82e:	09 83       	std	Y+1, r16	; 0x01
 830:	1a 83       	std	Y+2, r17	; 0x02
 832:	8f ef       	ldi	r24, 0xFF	; 255
 834:	9f e7       	ldi	r25, 0x7F	; 127
 836:	8d 83       	std	Y+5, r24	; 0x05
 838:	9e 83       	std	Y+6, r25	; 0x06
 83a:	ae 01       	movw	r20, r28
 83c:	47 5e       	subi	r20, 0xE7	; 231
 83e:	5f 4f       	sbci	r21, 0xFF	; 255
 840:	6f 89       	ldd	r22, Y+23	; 0x17
 842:	78 8d       	ldd	r23, Y+24	; 0x18
 844:	ce 01       	movw	r24, r28
 846:	01 96       	adiw	r24, 0x01	; 1
 848:	0e 94 30 04 	call	0x860	; 0x860 <vfprintf>
 84c:	2f 81       	ldd	r18, Y+7	; 0x07
 84e:	38 85       	ldd	r19, Y+8	; 0x08
 850:	f8 01       	movw	r30, r16
 852:	e2 0f       	add	r30, r18
 854:	f3 1f       	adc	r31, r19
 856:	10 82       	st	Z, r1
 858:	2e 96       	adiw	r28, 0x0e	; 14
 85a:	e4 e0       	ldi	r30, 0x04	; 4
 85c:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__epilogue_restores__+0x1c>

00000860 <vfprintf>:
 860:	ac e0       	ldi	r26, 0x0C	; 12
 862:	b0 e0       	ldi	r27, 0x00	; 0
 864:	e6 e3       	ldi	r30, 0x36	; 54
 866:	f4 e0       	ldi	r31, 0x04	; 4
 868:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__prologue_saves__>
 86c:	7c 01       	movw	r14, r24
 86e:	6b 01       	movw	r12, r22
 870:	8a 01       	movw	r16, r20
 872:	fc 01       	movw	r30, r24
 874:	16 82       	std	Z+6, r1	; 0x06
 876:	17 82       	std	Z+7, r1	; 0x07
 878:	83 81       	ldd	r24, Z+3	; 0x03
 87a:	81 ff       	sbrs	r24, 1
 87c:	bd c1       	rjmp	.+890    	; 0xbf8 <vfprintf+0x398>
 87e:	ce 01       	movw	r24, r28
 880:	01 96       	adiw	r24, 0x01	; 1
 882:	4c 01       	movw	r8, r24
 884:	f7 01       	movw	r30, r14
 886:	93 81       	ldd	r25, Z+3	; 0x03
 888:	f6 01       	movw	r30, r12
 88a:	93 fd       	sbrc	r25, 3
 88c:	85 91       	lpm	r24, Z+
 88e:	93 ff       	sbrs	r25, 3
 890:	81 91       	ld	r24, Z+
 892:	6f 01       	movw	r12, r30
 894:	88 23       	and	r24, r24
 896:	09 f4       	brne	.+2      	; 0x89a <vfprintf+0x3a>
 898:	ab c1       	rjmp	.+854    	; 0xbf0 <vfprintf+0x390>
 89a:	85 32       	cpi	r24, 0x25	; 37
 89c:	39 f4       	brne	.+14     	; 0x8ac <vfprintf+0x4c>
 89e:	93 fd       	sbrc	r25, 3
 8a0:	85 91       	lpm	r24, Z+
 8a2:	93 ff       	sbrs	r25, 3
 8a4:	81 91       	ld	r24, Z+
 8a6:	6f 01       	movw	r12, r30
 8a8:	85 32       	cpi	r24, 0x25	; 37
 8aa:	29 f4       	brne	.+10     	; 0x8b6 <vfprintf+0x56>
 8ac:	b7 01       	movw	r22, r14
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 28 06 	call	0xc50	; 0xc50 <fputc>
 8b4:	e7 cf       	rjmp	.-50     	; 0x884 <vfprintf+0x24>
 8b6:	51 2c       	mov	r5, r1
 8b8:	31 2c       	mov	r3, r1
 8ba:	20 e0       	ldi	r18, 0x00	; 0
 8bc:	20 32       	cpi	r18, 0x20	; 32
 8be:	a0 f4       	brcc	.+40     	; 0x8e8 <vfprintf+0x88>
 8c0:	8b 32       	cpi	r24, 0x2B	; 43
 8c2:	69 f0       	breq	.+26     	; 0x8de <vfprintf+0x7e>
 8c4:	30 f4       	brcc	.+12     	; 0x8d2 <vfprintf+0x72>
 8c6:	80 32       	cpi	r24, 0x20	; 32
 8c8:	59 f0       	breq	.+22     	; 0x8e0 <vfprintf+0x80>
 8ca:	83 32       	cpi	r24, 0x23	; 35
 8cc:	69 f4       	brne	.+26     	; 0x8e8 <vfprintf+0x88>
 8ce:	20 61       	ori	r18, 0x10	; 16
 8d0:	2c c0       	rjmp	.+88     	; 0x92a <vfprintf+0xca>
 8d2:	8d 32       	cpi	r24, 0x2D	; 45
 8d4:	39 f0       	breq	.+14     	; 0x8e4 <vfprintf+0x84>
 8d6:	80 33       	cpi	r24, 0x30	; 48
 8d8:	39 f4       	brne	.+14     	; 0x8e8 <vfprintf+0x88>
 8da:	21 60       	ori	r18, 0x01	; 1
 8dc:	26 c0       	rjmp	.+76     	; 0x92a <vfprintf+0xca>
 8de:	22 60       	ori	r18, 0x02	; 2
 8e0:	24 60       	ori	r18, 0x04	; 4
 8e2:	23 c0       	rjmp	.+70     	; 0x92a <vfprintf+0xca>
 8e4:	28 60       	ori	r18, 0x08	; 8
 8e6:	21 c0       	rjmp	.+66     	; 0x92a <vfprintf+0xca>
 8e8:	27 fd       	sbrc	r18, 7
 8ea:	27 c0       	rjmp	.+78     	; 0x93a <vfprintf+0xda>
 8ec:	30 ed       	ldi	r19, 0xD0	; 208
 8ee:	38 0f       	add	r19, r24
 8f0:	3a 30       	cpi	r19, 0x0A	; 10
 8f2:	78 f4       	brcc	.+30     	; 0x912 <vfprintf+0xb2>
 8f4:	26 ff       	sbrs	r18, 6
 8f6:	06 c0       	rjmp	.+12     	; 0x904 <vfprintf+0xa4>
 8f8:	fa e0       	ldi	r31, 0x0A	; 10
 8fa:	5f 9e       	mul	r5, r31
 8fc:	30 0d       	add	r19, r0
 8fe:	11 24       	eor	r1, r1
 900:	53 2e       	mov	r5, r19
 902:	13 c0       	rjmp	.+38     	; 0x92a <vfprintf+0xca>
 904:	8a e0       	ldi	r24, 0x0A	; 10
 906:	38 9e       	mul	r3, r24
 908:	30 0d       	add	r19, r0
 90a:	11 24       	eor	r1, r1
 90c:	33 2e       	mov	r3, r19
 90e:	20 62       	ori	r18, 0x20	; 32
 910:	0c c0       	rjmp	.+24     	; 0x92a <vfprintf+0xca>
 912:	8e 32       	cpi	r24, 0x2E	; 46
 914:	21 f4       	brne	.+8      	; 0x91e <vfprintf+0xbe>
 916:	26 fd       	sbrc	r18, 6
 918:	6b c1       	rjmp	.+726    	; 0xbf0 <vfprintf+0x390>
 91a:	20 64       	ori	r18, 0x40	; 64
 91c:	06 c0       	rjmp	.+12     	; 0x92a <vfprintf+0xca>
 91e:	8c 36       	cpi	r24, 0x6C	; 108
 920:	11 f4       	brne	.+4      	; 0x926 <vfprintf+0xc6>
 922:	20 68       	ori	r18, 0x80	; 128
 924:	02 c0       	rjmp	.+4      	; 0x92a <vfprintf+0xca>
 926:	88 36       	cpi	r24, 0x68	; 104
 928:	41 f4       	brne	.+16     	; 0x93a <vfprintf+0xda>
 92a:	f6 01       	movw	r30, r12
 92c:	93 fd       	sbrc	r25, 3
 92e:	85 91       	lpm	r24, Z+
 930:	93 ff       	sbrs	r25, 3
 932:	81 91       	ld	r24, Z+
 934:	6f 01       	movw	r12, r30
 936:	81 11       	cpse	r24, r1
 938:	c1 cf       	rjmp	.-126    	; 0x8bc <vfprintf+0x5c>
 93a:	98 2f       	mov	r25, r24
 93c:	9f 7d       	andi	r25, 0xDF	; 223
 93e:	95 54       	subi	r25, 0x45	; 69
 940:	93 30       	cpi	r25, 0x03	; 3
 942:	28 f4       	brcc	.+10     	; 0x94e <vfprintf+0xee>
 944:	0c 5f       	subi	r16, 0xFC	; 252
 946:	1f 4f       	sbci	r17, 0xFF	; 255
 948:	ff e3       	ldi	r31, 0x3F	; 63
 94a:	f9 83       	std	Y+1, r31	; 0x01
 94c:	0d c0       	rjmp	.+26     	; 0x968 <vfprintf+0x108>
 94e:	83 36       	cpi	r24, 0x63	; 99
 950:	31 f0       	breq	.+12     	; 0x95e <vfprintf+0xfe>
 952:	83 37       	cpi	r24, 0x73	; 115
 954:	71 f0       	breq	.+28     	; 0x972 <vfprintf+0x112>
 956:	83 35       	cpi	r24, 0x53	; 83
 958:	09 f0       	breq	.+2      	; 0x95c <vfprintf+0xfc>
 95a:	5b c0       	rjmp	.+182    	; 0xa12 <vfprintf+0x1b2>
 95c:	22 c0       	rjmp	.+68     	; 0x9a2 <vfprintf+0x142>
 95e:	f8 01       	movw	r30, r16
 960:	80 81       	ld	r24, Z
 962:	89 83       	std	Y+1, r24	; 0x01
 964:	0e 5f       	subi	r16, 0xFE	; 254
 966:	1f 4f       	sbci	r17, 0xFF	; 255
 968:	44 24       	eor	r4, r4
 96a:	43 94       	inc	r4
 96c:	51 2c       	mov	r5, r1
 96e:	54 01       	movw	r10, r8
 970:	15 c0       	rjmp	.+42     	; 0x99c <vfprintf+0x13c>
 972:	38 01       	movw	r6, r16
 974:	f2 e0       	ldi	r31, 0x02	; 2
 976:	6f 0e       	add	r6, r31
 978:	71 1c       	adc	r7, r1
 97a:	f8 01       	movw	r30, r16
 97c:	a0 80       	ld	r10, Z
 97e:	b1 80       	ldd	r11, Z+1	; 0x01
 980:	26 ff       	sbrs	r18, 6
 982:	03 c0       	rjmp	.+6      	; 0x98a <vfprintf+0x12a>
 984:	65 2d       	mov	r22, r5
 986:	70 e0       	ldi	r23, 0x00	; 0
 988:	02 c0       	rjmp	.+4      	; 0x98e <vfprintf+0x12e>
 98a:	6f ef       	ldi	r22, 0xFF	; 255
 98c:	7f ef       	ldi	r23, 0xFF	; 255
 98e:	c5 01       	movw	r24, r10
 990:	2c 87       	std	Y+12, r18	; 0x0c
 992:	0e 94 0d 06 	call	0xc1a	; 0xc1a <strnlen>
 996:	2c 01       	movw	r4, r24
 998:	83 01       	movw	r16, r6
 99a:	2c 85       	ldd	r18, Y+12	; 0x0c
 99c:	2f 77       	andi	r18, 0x7F	; 127
 99e:	22 2e       	mov	r2, r18
 9a0:	17 c0       	rjmp	.+46     	; 0x9d0 <vfprintf+0x170>
 9a2:	38 01       	movw	r6, r16
 9a4:	f2 e0       	ldi	r31, 0x02	; 2
 9a6:	6f 0e       	add	r6, r31
 9a8:	71 1c       	adc	r7, r1
 9aa:	f8 01       	movw	r30, r16
 9ac:	a0 80       	ld	r10, Z
 9ae:	b1 80       	ldd	r11, Z+1	; 0x01
 9b0:	26 ff       	sbrs	r18, 6
 9b2:	03 c0       	rjmp	.+6      	; 0x9ba <vfprintf+0x15a>
 9b4:	65 2d       	mov	r22, r5
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <vfprintf+0x15e>
 9ba:	6f ef       	ldi	r22, 0xFF	; 255
 9bc:	7f ef       	ldi	r23, 0xFF	; 255
 9be:	c5 01       	movw	r24, r10
 9c0:	2c 87       	std	Y+12, r18	; 0x0c
 9c2:	0e 94 02 06 	call	0xc04	; 0xc04 <strnlen_P>
 9c6:	2c 01       	movw	r4, r24
 9c8:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ca:	20 68       	ori	r18, 0x80	; 128
 9cc:	22 2e       	mov	r2, r18
 9ce:	83 01       	movw	r16, r6
 9d0:	23 fc       	sbrc	r2, 3
 9d2:	1b c0       	rjmp	.+54     	; 0xa0a <vfprintf+0x1aa>
 9d4:	83 2d       	mov	r24, r3
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	48 16       	cp	r4, r24
 9da:	59 06       	cpc	r5, r25
 9dc:	b0 f4       	brcc	.+44     	; 0xa0a <vfprintf+0x1aa>
 9de:	b7 01       	movw	r22, r14
 9e0:	80 e2       	ldi	r24, 0x20	; 32
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 28 06 	call	0xc50	; 0xc50 <fputc>
 9e8:	3a 94       	dec	r3
 9ea:	f4 cf       	rjmp	.-24     	; 0x9d4 <vfprintf+0x174>
 9ec:	f5 01       	movw	r30, r10
 9ee:	27 fc       	sbrc	r2, 7
 9f0:	85 91       	lpm	r24, Z+
 9f2:	27 fe       	sbrs	r2, 7
 9f4:	81 91       	ld	r24, Z+
 9f6:	5f 01       	movw	r10, r30
 9f8:	b7 01       	movw	r22, r14
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 28 06 	call	0xc50	; 0xc50 <fputc>
 a00:	31 10       	cpse	r3, r1
 a02:	3a 94       	dec	r3
 a04:	f1 e0       	ldi	r31, 0x01	; 1
 a06:	4f 1a       	sub	r4, r31
 a08:	51 08       	sbc	r5, r1
 a0a:	41 14       	cp	r4, r1
 a0c:	51 04       	cpc	r5, r1
 a0e:	71 f7       	brne	.-36     	; 0x9ec <vfprintf+0x18c>
 a10:	e5 c0       	rjmp	.+458    	; 0xbdc <vfprintf+0x37c>
 a12:	84 36       	cpi	r24, 0x64	; 100
 a14:	11 f0       	breq	.+4      	; 0xa1a <vfprintf+0x1ba>
 a16:	89 36       	cpi	r24, 0x69	; 105
 a18:	39 f5       	brne	.+78     	; 0xa68 <vfprintf+0x208>
 a1a:	f8 01       	movw	r30, r16
 a1c:	27 ff       	sbrs	r18, 7
 a1e:	07 c0       	rjmp	.+14     	; 0xa2e <vfprintf+0x1ce>
 a20:	60 81       	ld	r22, Z
 a22:	71 81       	ldd	r23, Z+1	; 0x01
 a24:	82 81       	ldd	r24, Z+2	; 0x02
 a26:	93 81       	ldd	r25, Z+3	; 0x03
 a28:	0c 5f       	subi	r16, 0xFC	; 252
 a2a:	1f 4f       	sbci	r17, 0xFF	; 255
 a2c:	08 c0       	rjmp	.+16     	; 0xa3e <vfprintf+0x1de>
 a2e:	60 81       	ld	r22, Z
 a30:	71 81       	ldd	r23, Z+1	; 0x01
 a32:	07 2e       	mov	r0, r23
 a34:	00 0c       	add	r0, r0
 a36:	88 0b       	sbc	r24, r24
 a38:	99 0b       	sbc	r25, r25
 a3a:	0e 5f       	subi	r16, 0xFE	; 254
 a3c:	1f 4f       	sbci	r17, 0xFF	; 255
 a3e:	2f 76       	andi	r18, 0x6F	; 111
 a40:	72 2e       	mov	r7, r18
 a42:	97 ff       	sbrs	r25, 7
 a44:	09 c0       	rjmp	.+18     	; 0xa58 <vfprintf+0x1f8>
 a46:	90 95       	com	r25
 a48:	80 95       	com	r24
 a4a:	70 95       	com	r23
 a4c:	61 95       	neg	r22
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255
 a50:	8f 4f       	sbci	r24, 0xFF	; 255
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	20 68       	ori	r18, 0x80	; 128
 a56:	72 2e       	mov	r7, r18
 a58:	2a e0       	ldi	r18, 0x0A	; 10
 a5a:	30 e0       	ldi	r19, 0x00	; 0
 a5c:	a4 01       	movw	r20, r8
 a5e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__ultoa_invert>
 a62:	a8 2e       	mov	r10, r24
 a64:	a8 18       	sub	r10, r8
 a66:	44 c0       	rjmp	.+136    	; 0xaf0 <vfprintf+0x290>
 a68:	85 37       	cpi	r24, 0x75	; 117
 a6a:	29 f4       	brne	.+10     	; 0xa76 <vfprintf+0x216>
 a6c:	2f 7e       	andi	r18, 0xEF	; 239
 a6e:	b2 2e       	mov	r11, r18
 a70:	2a e0       	ldi	r18, 0x0A	; 10
 a72:	30 e0       	ldi	r19, 0x00	; 0
 a74:	25 c0       	rjmp	.+74     	; 0xac0 <vfprintf+0x260>
 a76:	f2 2f       	mov	r31, r18
 a78:	f9 7f       	andi	r31, 0xF9	; 249
 a7a:	bf 2e       	mov	r11, r31
 a7c:	8f 36       	cpi	r24, 0x6F	; 111
 a7e:	c1 f0       	breq	.+48     	; 0xab0 <vfprintf+0x250>
 a80:	18 f4       	brcc	.+6      	; 0xa88 <vfprintf+0x228>
 a82:	88 35       	cpi	r24, 0x58	; 88
 a84:	79 f0       	breq	.+30     	; 0xaa4 <vfprintf+0x244>
 a86:	b4 c0       	rjmp	.+360    	; 0xbf0 <vfprintf+0x390>
 a88:	80 37       	cpi	r24, 0x70	; 112
 a8a:	19 f0       	breq	.+6      	; 0xa92 <vfprintf+0x232>
 a8c:	88 37       	cpi	r24, 0x78	; 120
 a8e:	21 f0       	breq	.+8      	; 0xa98 <vfprintf+0x238>
 a90:	af c0       	rjmp	.+350    	; 0xbf0 <vfprintf+0x390>
 a92:	2f 2f       	mov	r18, r31
 a94:	20 61       	ori	r18, 0x10	; 16
 a96:	b2 2e       	mov	r11, r18
 a98:	b4 fe       	sbrs	r11, 4
 a9a:	0d c0       	rjmp	.+26     	; 0xab6 <vfprintf+0x256>
 a9c:	8b 2d       	mov	r24, r11
 a9e:	84 60       	ori	r24, 0x04	; 4
 aa0:	b8 2e       	mov	r11, r24
 aa2:	09 c0       	rjmp	.+18     	; 0xab6 <vfprintf+0x256>
 aa4:	24 ff       	sbrs	r18, 4
 aa6:	0a c0       	rjmp	.+20     	; 0xabc <vfprintf+0x25c>
 aa8:	9f 2f       	mov	r25, r31
 aaa:	96 60       	ori	r25, 0x06	; 6
 aac:	b9 2e       	mov	r11, r25
 aae:	06 c0       	rjmp	.+12     	; 0xabc <vfprintf+0x25c>
 ab0:	28 e0       	ldi	r18, 0x08	; 8
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	05 c0       	rjmp	.+10     	; 0xac0 <vfprintf+0x260>
 ab6:	20 e1       	ldi	r18, 0x10	; 16
 ab8:	30 e0       	ldi	r19, 0x00	; 0
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <vfprintf+0x260>
 abc:	20 e1       	ldi	r18, 0x10	; 16
 abe:	32 e0       	ldi	r19, 0x02	; 2
 ac0:	f8 01       	movw	r30, r16
 ac2:	b7 fe       	sbrs	r11, 7
 ac4:	07 c0       	rjmp	.+14     	; 0xad4 <vfprintf+0x274>
 ac6:	60 81       	ld	r22, Z
 ac8:	71 81       	ldd	r23, Z+1	; 0x01
 aca:	82 81       	ldd	r24, Z+2	; 0x02
 acc:	93 81       	ldd	r25, Z+3	; 0x03
 ace:	0c 5f       	subi	r16, 0xFC	; 252
 ad0:	1f 4f       	sbci	r17, 0xFF	; 255
 ad2:	06 c0       	rjmp	.+12     	; 0xae0 <vfprintf+0x280>
 ad4:	60 81       	ld	r22, Z
 ad6:	71 81       	ldd	r23, Z+1	; 0x01
 ad8:	80 e0       	ldi	r24, 0x00	; 0
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0e 5f       	subi	r16, 0xFE	; 254
 ade:	1f 4f       	sbci	r17, 0xFF	; 255
 ae0:	a4 01       	movw	r20, r8
 ae2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__ultoa_invert>
 ae6:	a8 2e       	mov	r10, r24
 ae8:	a8 18       	sub	r10, r8
 aea:	fb 2d       	mov	r31, r11
 aec:	ff 77       	andi	r31, 0x7F	; 127
 aee:	7f 2e       	mov	r7, r31
 af0:	76 fe       	sbrs	r7, 6
 af2:	0b c0       	rjmp	.+22     	; 0xb0a <vfprintf+0x2aa>
 af4:	37 2d       	mov	r19, r7
 af6:	3e 7f       	andi	r19, 0xFE	; 254
 af8:	a5 14       	cp	r10, r5
 afa:	50 f4       	brcc	.+20     	; 0xb10 <vfprintf+0x2b0>
 afc:	74 fe       	sbrs	r7, 4
 afe:	0a c0       	rjmp	.+20     	; 0xb14 <vfprintf+0x2b4>
 b00:	72 fc       	sbrc	r7, 2
 b02:	08 c0       	rjmp	.+16     	; 0xb14 <vfprintf+0x2b4>
 b04:	37 2d       	mov	r19, r7
 b06:	3e 7e       	andi	r19, 0xEE	; 238
 b08:	05 c0       	rjmp	.+10     	; 0xb14 <vfprintf+0x2b4>
 b0a:	ba 2c       	mov	r11, r10
 b0c:	37 2d       	mov	r19, r7
 b0e:	03 c0       	rjmp	.+6      	; 0xb16 <vfprintf+0x2b6>
 b10:	ba 2c       	mov	r11, r10
 b12:	01 c0       	rjmp	.+2      	; 0xb16 <vfprintf+0x2b6>
 b14:	b5 2c       	mov	r11, r5
 b16:	34 ff       	sbrs	r19, 4
 b18:	0d c0       	rjmp	.+26     	; 0xb34 <vfprintf+0x2d4>
 b1a:	fe 01       	movw	r30, r28
 b1c:	ea 0d       	add	r30, r10
 b1e:	f1 1d       	adc	r31, r1
 b20:	80 81       	ld	r24, Z
 b22:	80 33       	cpi	r24, 0x30	; 48
 b24:	11 f4       	brne	.+4      	; 0xb2a <vfprintf+0x2ca>
 b26:	39 7e       	andi	r19, 0xE9	; 233
 b28:	09 c0       	rjmp	.+18     	; 0xb3c <vfprintf+0x2dc>
 b2a:	32 ff       	sbrs	r19, 2
 b2c:	06 c0       	rjmp	.+12     	; 0xb3a <vfprintf+0x2da>
 b2e:	b3 94       	inc	r11
 b30:	b3 94       	inc	r11
 b32:	04 c0       	rjmp	.+8      	; 0xb3c <vfprintf+0x2dc>
 b34:	83 2f       	mov	r24, r19
 b36:	86 78       	andi	r24, 0x86	; 134
 b38:	09 f0       	breq	.+2      	; 0xb3c <vfprintf+0x2dc>
 b3a:	b3 94       	inc	r11
 b3c:	33 fd       	sbrc	r19, 3
 b3e:	13 c0       	rjmp	.+38     	; 0xb66 <vfprintf+0x306>
 b40:	30 ff       	sbrs	r19, 0
 b42:	06 c0       	rjmp	.+12     	; 0xb50 <vfprintf+0x2f0>
 b44:	5a 2c       	mov	r5, r10
 b46:	b3 14       	cp	r11, r3
 b48:	18 f4       	brcc	.+6      	; 0xb50 <vfprintf+0x2f0>
 b4a:	53 0c       	add	r5, r3
 b4c:	5b 18       	sub	r5, r11
 b4e:	b3 2c       	mov	r11, r3
 b50:	b3 14       	cp	r11, r3
 b52:	68 f4       	brcc	.+26     	; 0xb6e <vfprintf+0x30e>
 b54:	b7 01       	movw	r22, r14
 b56:	80 e2       	ldi	r24, 0x20	; 32
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	3c 87       	std	Y+12, r19	; 0x0c
 b5c:	0e 94 28 06 	call	0xc50	; 0xc50 <fputc>
 b60:	b3 94       	inc	r11
 b62:	3c 85       	ldd	r19, Y+12	; 0x0c
 b64:	f5 cf       	rjmp	.-22     	; 0xb50 <vfprintf+0x2f0>
 b66:	b3 14       	cp	r11, r3
 b68:	10 f4       	brcc	.+4      	; 0xb6e <vfprintf+0x30e>
 b6a:	3b 18       	sub	r3, r11
 b6c:	01 c0       	rjmp	.+2      	; 0xb70 <vfprintf+0x310>
 b6e:	31 2c       	mov	r3, r1
 b70:	34 ff       	sbrs	r19, 4
 b72:	12 c0       	rjmp	.+36     	; 0xb98 <vfprintf+0x338>
 b74:	b7 01       	movw	r22, r14
 b76:	80 e3       	ldi	r24, 0x30	; 48
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	3c 87       	std	Y+12, r19	; 0x0c
 b7c:	0e 94 28 06 	call	0xc50	; 0xc50 <fputc>
 b80:	3c 85       	ldd	r19, Y+12	; 0x0c
 b82:	32 ff       	sbrs	r19, 2
 b84:	17 c0       	rjmp	.+46     	; 0xbb4 <vfprintf+0x354>
 b86:	31 fd       	sbrc	r19, 1
 b88:	03 c0       	rjmp	.+6      	; 0xb90 <vfprintf+0x330>
 b8a:	88 e7       	ldi	r24, 0x78	; 120
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	02 c0       	rjmp	.+4      	; 0xb94 <vfprintf+0x334>
 b90:	88 e5       	ldi	r24, 0x58	; 88
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	b7 01       	movw	r22, r14
 b96:	0c c0       	rjmp	.+24     	; 0xbb0 <vfprintf+0x350>
 b98:	83 2f       	mov	r24, r19
 b9a:	86 78       	andi	r24, 0x86	; 134
 b9c:	59 f0       	breq	.+22     	; 0xbb4 <vfprintf+0x354>
 b9e:	31 ff       	sbrs	r19, 1
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <vfprintf+0x346>
 ba2:	8b e2       	ldi	r24, 0x2B	; 43
 ba4:	01 c0       	rjmp	.+2      	; 0xba8 <vfprintf+0x348>
 ba6:	80 e2       	ldi	r24, 0x20	; 32
 ba8:	37 fd       	sbrc	r19, 7
 baa:	8d e2       	ldi	r24, 0x2D	; 45
 bac:	b7 01       	movw	r22, r14
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	0e 94 28 06 	call	0xc50	; 0xc50 <fputc>
 bb4:	a5 14       	cp	r10, r5
 bb6:	38 f4       	brcc	.+14     	; 0xbc6 <vfprintf+0x366>
 bb8:	b7 01       	movw	r22, r14
 bba:	80 e3       	ldi	r24, 0x30	; 48
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	0e 94 28 06 	call	0xc50	; 0xc50 <fputc>
 bc2:	5a 94       	dec	r5
 bc4:	f7 cf       	rjmp	.-18     	; 0xbb4 <vfprintf+0x354>
 bc6:	aa 94       	dec	r10
 bc8:	f4 01       	movw	r30, r8
 bca:	ea 0d       	add	r30, r10
 bcc:	f1 1d       	adc	r31, r1
 bce:	80 81       	ld	r24, Z
 bd0:	b7 01       	movw	r22, r14
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	0e 94 28 06 	call	0xc50	; 0xc50 <fputc>
 bd8:	a1 10       	cpse	r10, r1
 bda:	f5 cf       	rjmp	.-22     	; 0xbc6 <vfprintf+0x366>
 bdc:	33 20       	and	r3, r3
 bde:	09 f4       	brne	.+2      	; 0xbe2 <vfprintf+0x382>
 be0:	51 ce       	rjmp	.-862    	; 0x884 <vfprintf+0x24>
 be2:	b7 01       	movw	r22, r14
 be4:	80 e2       	ldi	r24, 0x20	; 32
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	0e 94 28 06 	call	0xc50	; 0xc50 <fputc>
 bec:	3a 94       	dec	r3
 bee:	f6 cf       	rjmp	.-20     	; 0xbdc <vfprintf+0x37c>
 bf0:	f7 01       	movw	r30, r14
 bf2:	86 81       	ldd	r24, Z+6	; 0x06
 bf4:	97 81       	ldd	r25, Z+7	; 0x07
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <vfprintf+0x39c>
 bf8:	8f ef       	ldi	r24, 0xFF	; 255
 bfa:	9f ef       	ldi	r25, 0xFF	; 255
 bfc:	2c 96       	adiw	r28, 0x0c	; 12
 bfe:	e2 e1       	ldi	r30, 0x12	; 18
 c00:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__epilogue_restores__>

00000c04 <strnlen_P>:
 c04:	fc 01       	movw	r30, r24
 c06:	05 90       	lpm	r0, Z+
 c08:	61 50       	subi	r22, 0x01	; 1
 c0a:	70 40       	sbci	r23, 0x00	; 0
 c0c:	01 10       	cpse	r0, r1
 c0e:	d8 f7       	brcc	.-10     	; 0xc06 <strnlen_P+0x2>
 c10:	80 95       	com	r24
 c12:	90 95       	com	r25
 c14:	8e 0f       	add	r24, r30
 c16:	9f 1f       	adc	r25, r31
 c18:	08 95       	ret

00000c1a <strnlen>:
 c1a:	fc 01       	movw	r30, r24
 c1c:	61 50       	subi	r22, 0x01	; 1
 c1e:	70 40       	sbci	r23, 0x00	; 0
 c20:	01 90       	ld	r0, Z+
 c22:	01 10       	cpse	r0, r1
 c24:	d8 f7       	brcc	.-10     	; 0xc1c <strnlen+0x2>
 c26:	80 95       	com	r24
 c28:	90 95       	com	r25
 c2a:	8e 0f       	add	r24, r30
 c2c:	9f 1f       	adc	r25, r31
 c2e:	08 95       	ret

00000c30 <strrev>:
 c30:	dc 01       	movw	r26, r24
 c32:	fc 01       	movw	r30, r24
 c34:	67 2f       	mov	r22, r23
 c36:	71 91       	ld	r23, Z+
 c38:	77 23       	and	r23, r23
 c3a:	e1 f7       	brne	.-8      	; 0xc34 <strrev+0x4>
 c3c:	32 97       	sbiw	r30, 0x02	; 2
 c3e:	04 c0       	rjmp	.+8      	; 0xc48 <strrev+0x18>
 c40:	7c 91       	ld	r23, X
 c42:	6d 93       	st	X+, r22
 c44:	70 83       	st	Z, r23
 c46:	62 91       	ld	r22, -Z
 c48:	ae 17       	cp	r26, r30
 c4a:	bf 07       	cpc	r27, r31
 c4c:	c8 f3       	brcs	.-14     	; 0xc40 <strrev+0x10>
 c4e:	08 95       	ret

00000c50 <fputc>:
 c50:	0f 93       	push	r16
 c52:	1f 93       	push	r17
 c54:	cf 93       	push	r28
 c56:	df 93       	push	r29
 c58:	fb 01       	movw	r30, r22
 c5a:	23 81       	ldd	r18, Z+3	; 0x03
 c5c:	21 fd       	sbrc	r18, 1
 c5e:	03 c0       	rjmp	.+6      	; 0xc66 <fputc+0x16>
 c60:	8f ef       	ldi	r24, 0xFF	; 255
 c62:	9f ef       	ldi	r25, 0xFF	; 255
 c64:	28 c0       	rjmp	.+80     	; 0xcb6 <fputc+0x66>
 c66:	22 ff       	sbrs	r18, 2
 c68:	16 c0       	rjmp	.+44     	; 0xc96 <fputc+0x46>
 c6a:	46 81       	ldd	r20, Z+6	; 0x06
 c6c:	57 81       	ldd	r21, Z+7	; 0x07
 c6e:	24 81       	ldd	r18, Z+4	; 0x04
 c70:	35 81       	ldd	r19, Z+5	; 0x05
 c72:	42 17       	cp	r20, r18
 c74:	53 07       	cpc	r21, r19
 c76:	44 f4       	brge	.+16     	; 0xc88 <fputc+0x38>
 c78:	a0 81       	ld	r26, Z
 c7a:	b1 81       	ldd	r27, Z+1	; 0x01
 c7c:	9d 01       	movw	r18, r26
 c7e:	2f 5f       	subi	r18, 0xFF	; 255
 c80:	3f 4f       	sbci	r19, 0xFF	; 255
 c82:	20 83       	st	Z, r18
 c84:	31 83       	std	Z+1, r19	; 0x01
 c86:	8c 93       	st	X, r24
 c88:	26 81       	ldd	r18, Z+6	; 0x06
 c8a:	37 81       	ldd	r19, Z+7	; 0x07
 c8c:	2f 5f       	subi	r18, 0xFF	; 255
 c8e:	3f 4f       	sbci	r19, 0xFF	; 255
 c90:	26 83       	std	Z+6, r18	; 0x06
 c92:	37 83       	std	Z+7, r19	; 0x07
 c94:	10 c0       	rjmp	.+32     	; 0xcb6 <fputc+0x66>
 c96:	eb 01       	movw	r28, r22
 c98:	09 2f       	mov	r16, r25
 c9a:	18 2f       	mov	r17, r24
 c9c:	00 84       	ldd	r0, Z+8	; 0x08
 c9e:	f1 85       	ldd	r31, Z+9	; 0x09
 ca0:	e0 2d       	mov	r30, r0
 ca2:	09 95       	icall
 ca4:	89 2b       	or	r24, r25
 ca6:	e1 f6       	brne	.-72     	; 0xc60 <fputc+0x10>
 ca8:	8e 81       	ldd	r24, Y+6	; 0x06
 caa:	9f 81       	ldd	r25, Y+7	; 0x07
 cac:	01 96       	adiw	r24, 0x01	; 1
 cae:	8e 83       	std	Y+6, r24	; 0x06
 cb0:	9f 83       	std	Y+7, r25	; 0x07
 cb2:	81 2f       	mov	r24, r17
 cb4:	90 2f       	mov	r25, r16
 cb6:	df 91       	pop	r29
 cb8:	cf 91       	pop	r28
 cba:	1f 91       	pop	r17
 cbc:	0f 91       	pop	r16
 cbe:	08 95       	ret

00000cc0 <__ultoa_invert>:
 cc0:	fa 01       	movw	r30, r20
 cc2:	aa 27       	eor	r26, r26
 cc4:	28 30       	cpi	r18, 0x08	; 8
 cc6:	51 f1       	breq	.+84     	; 0xd1c <__ultoa_invert+0x5c>
 cc8:	20 31       	cpi	r18, 0x10	; 16
 cca:	81 f1       	breq	.+96     	; 0xd2c <__ultoa_invert+0x6c>
 ccc:	e8 94       	clt
 cce:	6f 93       	push	r22
 cd0:	6e 7f       	andi	r22, 0xFE	; 254
 cd2:	6e 5f       	subi	r22, 0xFE	; 254
 cd4:	7f 4f       	sbci	r23, 0xFF	; 255
 cd6:	8f 4f       	sbci	r24, 0xFF	; 255
 cd8:	9f 4f       	sbci	r25, 0xFF	; 255
 cda:	af 4f       	sbci	r26, 0xFF	; 255
 cdc:	b1 e0       	ldi	r27, 0x01	; 1
 cde:	3e d0       	rcall	.+124    	; 0xd5c <__ultoa_invert+0x9c>
 ce0:	b4 e0       	ldi	r27, 0x04	; 4
 ce2:	3c d0       	rcall	.+120    	; 0xd5c <__ultoa_invert+0x9c>
 ce4:	67 0f       	add	r22, r23
 ce6:	78 1f       	adc	r23, r24
 ce8:	89 1f       	adc	r24, r25
 cea:	9a 1f       	adc	r25, r26
 cec:	a1 1d       	adc	r26, r1
 cee:	68 0f       	add	r22, r24
 cf0:	79 1f       	adc	r23, r25
 cf2:	8a 1f       	adc	r24, r26
 cf4:	91 1d       	adc	r25, r1
 cf6:	a1 1d       	adc	r26, r1
 cf8:	6a 0f       	add	r22, r26
 cfa:	71 1d       	adc	r23, r1
 cfc:	81 1d       	adc	r24, r1
 cfe:	91 1d       	adc	r25, r1
 d00:	a1 1d       	adc	r26, r1
 d02:	20 d0       	rcall	.+64     	; 0xd44 <__ultoa_invert+0x84>
 d04:	09 f4       	brne	.+2      	; 0xd08 <__ultoa_invert+0x48>
 d06:	68 94       	set
 d08:	3f 91       	pop	r19
 d0a:	2a e0       	ldi	r18, 0x0A	; 10
 d0c:	26 9f       	mul	r18, r22
 d0e:	11 24       	eor	r1, r1
 d10:	30 19       	sub	r19, r0
 d12:	30 5d       	subi	r19, 0xD0	; 208
 d14:	31 93       	st	Z+, r19
 d16:	de f6       	brtc	.-74     	; 0xcce <__ultoa_invert+0xe>
 d18:	cf 01       	movw	r24, r30
 d1a:	08 95       	ret
 d1c:	46 2f       	mov	r20, r22
 d1e:	47 70       	andi	r20, 0x07	; 7
 d20:	40 5d       	subi	r20, 0xD0	; 208
 d22:	41 93       	st	Z+, r20
 d24:	b3 e0       	ldi	r27, 0x03	; 3
 d26:	0f d0       	rcall	.+30     	; 0xd46 <__ultoa_invert+0x86>
 d28:	c9 f7       	brne	.-14     	; 0xd1c <__ultoa_invert+0x5c>
 d2a:	f6 cf       	rjmp	.-20     	; 0xd18 <__ultoa_invert+0x58>
 d2c:	46 2f       	mov	r20, r22
 d2e:	4f 70       	andi	r20, 0x0F	; 15
 d30:	40 5d       	subi	r20, 0xD0	; 208
 d32:	4a 33       	cpi	r20, 0x3A	; 58
 d34:	18 f0       	brcs	.+6      	; 0xd3c <__ultoa_invert+0x7c>
 d36:	49 5d       	subi	r20, 0xD9	; 217
 d38:	31 fd       	sbrc	r19, 1
 d3a:	40 52       	subi	r20, 0x20	; 32
 d3c:	41 93       	st	Z+, r20
 d3e:	02 d0       	rcall	.+4      	; 0xd44 <__ultoa_invert+0x84>
 d40:	a9 f7       	brne	.-22     	; 0xd2c <__ultoa_invert+0x6c>
 d42:	ea cf       	rjmp	.-44     	; 0xd18 <__ultoa_invert+0x58>
 d44:	b4 e0       	ldi	r27, 0x04	; 4
 d46:	a6 95       	lsr	r26
 d48:	97 95       	ror	r25
 d4a:	87 95       	ror	r24
 d4c:	77 95       	ror	r23
 d4e:	67 95       	ror	r22
 d50:	ba 95       	dec	r27
 d52:	c9 f7       	brne	.-14     	; 0xd46 <__ultoa_invert+0x86>
 d54:	00 97       	sbiw	r24, 0x00	; 0
 d56:	61 05       	cpc	r22, r1
 d58:	71 05       	cpc	r23, r1
 d5a:	08 95       	ret
 d5c:	9b 01       	movw	r18, r22
 d5e:	ac 01       	movw	r20, r24
 d60:	0a 2e       	mov	r0, r26
 d62:	06 94       	lsr	r0
 d64:	57 95       	ror	r21
 d66:	47 95       	ror	r20
 d68:	37 95       	ror	r19
 d6a:	27 95       	ror	r18
 d6c:	ba 95       	dec	r27
 d6e:	c9 f7       	brne	.-14     	; 0xd62 <__ultoa_invert+0xa2>
 d70:	62 0f       	add	r22, r18
 d72:	73 1f       	adc	r23, r19
 d74:	84 1f       	adc	r24, r20
 d76:	95 1f       	adc	r25, r21
 d78:	a0 1d       	adc	r26, r0
 d7a:	08 95       	ret

00000d7c <__prologue_saves__>:
 d7c:	2f 92       	push	r2
 d7e:	3f 92       	push	r3
 d80:	4f 92       	push	r4
 d82:	5f 92       	push	r5
 d84:	6f 92       	push	r6
 d86:	7f 92       	push	r7
 d88:	8f 92       	push	r8
 d8a:	9f 92       	push	r9
 d8c:	af 92       	push	r10
 d8e:	bf 92       	push	r11
 d90:	cf 92       	push	r12
 d92:	df 92       	push	r13
 d94:	ef 92       	push	r14
 d96:	ff 92       	push	r15
 d98:	0f 93       	push	r16
 d9a:	1f 93       	push	r17
 d9c:	cf 93       	push	r28
 d9e:	df 93       	push	r29
 da0:	cd b7       	in	r28, 0x3d	; 61
 da2:	de b7       	in	r29, 0x3e	; 62
 da4:	ca 1b       	sub	r28, r26
 da6:	db 0b       	sbc	r29, r27
 da8:	cd bf       	out	0x3d, r28	; 61
 daa:	de bf       	out	0x3e, r29	; 62
 dac:	09 94       	ijmp

00000dae <__epilogue_restores__>:
 dae:	2a 88       	ldd	r2, Y+18	; 0x12
 db0:	39 88       	ldd	r3, Y+17	; 0x11
 db2:	48 88       	ldd	r4, Y+16	; 0x10
 db4:	5f 84       	ldd	r5, Y+15	; 0x0f
 db6:	6e 84       	ldd	r6, Y+14	; 0x0e
 db8:	7d 84       	ldd	r7, Y+13	; 0x0d
 dba:	8c 84       	ldd	r8, Y+12	; 0x0c
 dbc:	9b 84       	ldd	r9, Y+11	; 0x0b
 dbe:	aa 84       	ldd	r10, Y+10	; 0x0a
 dc0:	b9 84       	ldd	r11, Y+9	; 0x09
 dc2:	c8 84       	ldd	r12, Y+8	; 0x08
 dc4:	df 80       	ldd	r13, Y+7	; 0x07
 dc6:	ee 80       	ldd	r14, Y+6	; 0x06
 dc8:	fd 80       	ldd	r15, Y+5	; 0x05
 dca:	0c 81       	ldd	r16, Y+4	; 0x04
 dcc:	1b 81       	ldd	r17, Y+3	; 0x03
 dce:	aa 81       	ldd	r26, Y+2	; 0x02
 dd0:	b9 81       	ldd	r27, Y+1	; 0x01
 dd2:	ce 0f       	add	r28, r30
 dd4:	d1 1d       	adc	r29, r1
 dd6:	cd bf       	out	0x3d, r28	; 61
 dd8:	de bf       	out	0x3e, r29	; 62
 dda:	ed 01       	movw	r28, r26
 ddc:	08 95       	ret

00000dde <_exit>:
 dde:	f8 94       	cli

00000de0 <__stop_program>:
 de0:	ff cf       	rjmp	.-2      	; 0xde0 <__stop_program>
