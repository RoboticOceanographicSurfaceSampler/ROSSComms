
ROSSComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00802000  00000ec0  00000f54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00802130  00802130  00001084  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004148  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021d0  00000000  00000000  00005360  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf4  00000000  00000000  00007530  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00008224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ae5  00000000  00000000  00008500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092c  00000000  00000000  0000afe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000b911  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_7>
  20:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_8>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_12>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	11 e2       	ldi	r17, 0x21	; 33
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	fe e0       	ldi	r31, 0x0E	; 14
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 33       	cpi	r26, 0x30	; 48
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e2       	ldi	r18, 0x21	; 33
  d0:	a0 e3       	ldi	r26, 0x30	; 48
  d2:	b1 e2       	ldi	r27, 0x21	; 33
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	af 34       	cpi	r26, 0x4F	; 79
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <main>
  e2:	0c 94 5e 07 	jmp	0xebc	; 0xebc <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z11configureIOv>:

	/* Clean up NVM Command register. */
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;

	return( result );
}
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b6 e0       	ldi	r27, 0x06	; 6
  ee:	34 e0       	ldi	r19, 0x04	; 4
  f0:	12 96       	adiw	r26, 0x02	; 2
  f2:	3c 93       	st	X, r19
  f4:	12 97       	sbiw	r26, 0x02	; 2
  f6:	e0 e4       	ldi	r30, 0x40	; 64
  f8:	f6 e0       	ldi	r31, 0x06	; 6
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	82 83       	std	Z+2, r24	; 0x02
  fe:	90 e2       	ldi	r25, 0x20	; 32
 100:	92 83       	std	Z+2, r25	; 0x02
 102:	84 8b       	std	Z+20, r24	; 0x14
 104:	85 8b       	std	Z+21, r24	; 0x15
 106:	12 96       	adiw	r26, 0x02	; 2
 108:	8c 93       	st	X, r24
 10a:	12 97       	sbiw	r26, 0x02	; 2
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	9c 93       	st	X, r25
 110:	11 97       	sbiw	r26, 0x01	; 1
 112:	28 e0       	ldi	r18, 0x08	; 8
 114:	11 96       	adiw	r26, 0x01	; 1
 116:	2c 93       	st	X, r18
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	41 83       	std	Z+1, r20	; 0x01
 11c:	a0 e6       	ldi	r26, 0x60	; 96
 11e:	b6 e0       	ldi	r27, 0x06	; 6
 120:	11 96       	adiw	r26, 0x01	; 1
 122:	9c 93       	st	X, r25
 124:	11 97       	sbiw	r26, 0x01	; 1
 126:	11 96       	adiw	r26, 0x01	; 1
 128:	8c 93       	st	X, r24
 12a:	11 97       	sbiw	r26, 0x01	; 1
 12c:	31 83       	std	Z+1, r19	; 0x01
 12e:	21 83       	std	Z+1, r18	; 0x01
 130:	80 e4       	ldi	r24, 0x40	; 64
 132:	12 96       	adiw	r26, 0x02	; 2
 134:	8c 93       	st	X, r24
 136:	08 95       	ret

00000138 <_Z27configureExternalOscillatorv>:
 138:	e0 e5       	ldi	r30, 0x50	; 80
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	8b e4       	ldi	r24, 0x4B	; 75
 13e:	82 83       	std	Z+2, r24	; 0x02
 140:	80 81       	ld	r24, Z
 142:	88 60       	ori	r24, 0x08	; 8
 144:	80 83       	st	Z, r24
 146:	81 81       	ldd	r24, Z+1	; 0x01
 148:	83 fd       	sbrc	r24, 3
 14a:	09 c0       	rjmp	.+18     	; 0x15e <_Z27configureExternalOscillatorv+0x26>
 14c:	a0 e4       	ldi	r26, 0x40	; 64
 14e:	b6 e0       	ldi	r27, 0x06	; 6
 150:	98 e0       	ldi	r25, 0x08	; 8
 152:	15 96       	adiw	r26, 0x05	; 5
 154:	9c 93       	st	X, r25
 156:	15 97       	sbiw	r26, 0x05	; 5
 158:	81 81       	ldd	r24, Z+1	; 0x01
 15a:	83 ff       	sbrs	r24, 3
 15c:	fa cf       	rjmp	.-12     	; 0x152 <_Z27configureExternalOscillatorv+0x1a>
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 164:	88 ed       	ldi	r24, 0xD8	; 216
 166:	84 bf       	out	0x34, r24	; 52
 168:	e0 e5       	ldi	r30, 0x50	; 80
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	88 ec       	ldi	r24, 0xC8	; 200
 16e:	85 83       	std	Z+5, r24	; 0x05
 170:	80 81       	ld	r24, Z
 172:	80 61       	ori	r24, 0x10	; 16
 174:	80 83       	st	Z, r24
 176:	81 81       	ldd	r24, Z+1	; 0x01
 178:	84 fd       	sbrc	r24, 4
 17a:	09 c0       	rjmp	.+18     	; 0x18e <_Z27configureExternalOscillatorv+0x56>
 17c:	a0 e4       	ldi	r26, 0x40	; 64
 17e:	b6 e0       	ldi	r27, 0x06	; 6
 180:	98 e0       	ldi	r25, 0x08	; 8
 182:	15 96       	adiw	r26, 0x05	; 5
 184:	9c 93       	st	X, r25
 186:	15 97       	sbiw	r26, 0x05	; 5
 188:	81 81       	ldd	r24, Z+1	; 0x01
 18a:	84 ff       	sbrs	r24, 4
 18c:	fa cf       	rjmp	.-12     	; 0x182 <_Z27configureExternalOscillatorv+0x4a>
 18e:	88 e0       	ldi	r24, 0x08	; 8
 190:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 194:	88 ed       	ldi	r24, 0xD8	; 216
 196:	84 bf       	out	0x34, r24	; 52
 198:	e0 e4       	ldi	r30, 0x40	; 64
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	10 82       	st	Z, r1
 19e:	84 bf       	out	0x34, r24	; 52
 1a0:	84 e0       	ldi	r24, 0x04	; 4
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <_Z14configureUSARTv>:
 1a6:	e0 e4       	ldi	r30, 0x40	; 64
 1a8:	f6 e0       	ldi	r31, 0x06	; 6
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	81 83       	std	Z+1, r24	; 0x01
 1ae:	80 e4       	ldi	r24, 0x40	; 64
 1b0:	82 83       	std	Z+2, r24	; 0x02
 1b2:	86 85       	ldd	r24, Z+14	; 0x0e
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	86 87       	std	Z+14, r24	; 0x0e
 1b8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ba:	f8 e0       	ldi	r31, 0x08	; 8
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	84 83       	std	Z+4, r24	; 0x04
 1c0:	82 e2       	ldi	r24, 0x22	; 34
 1c2:	86 83       	std	Z+6, r24	; 0x06
 1c4:	17 82       	std	Z+7, r1	; 0x07
 1c6:	83 81       	ldd	r24, Z+3	; 0x03
 1c8:	80 61       	ori	r24, 0x10	; 16
 1ca:	83 83       	std	Z+3, r24	; 0x03
 1cc:	83 81       	ldd	r24, Z+3	; 0x03
 1ce:	88 60       	ori	r24, 0x08	; 8
 1d0:	83 83       	std	Z+3, r24	; 0x03
 1d2:	08 95       	ret

000001d4 <_Z21configureTimerCounterv>:
 1d4:	e0 e0       	ldi	r30, 0x00	; 0
 1d6:	f8 e0       	ldi	r31, 0x08	; 8
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	80 83       	st	Z, r24
 1dc:	89 e0       	ldi	r24, 0x09	; 9
 1de:	9d e3       	ldi	r25, 0x3D	; 61
 1e0:	86 a3       	std	Z+38, r24	; 0x26
 1e2:	97 a3       	std	Z+39, r25	; 0x27
 1e4:	11 82       	std	Z+1, r1	; 0x01
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	86 83       	std	Z+6, r24	; 0x06
 1ea:	08 95       	ret

000001ec <__vector_12>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
 1fc:	e0 e0       	ldi	r30, 0x00	; 0
 1fe:	f8 e0       	ldi	r31, 0x08	; 8
 200:	84 85       	ldd	r24, Z+12	; 0x0c
 202:	81 60       	ori	r24, 0x01	; 1
 204:	84 87       	std	Z+12, r24	; 0x0c
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <broadcastStatus>
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	8f 91       	pop	r24
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_7>:
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__vector_8>:
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	8f 93       	push	r24
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
 240:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <globalToggle>
 244:	88 23       	and	r24, r24
 246:	31 f0       	breq	.+12     	; 0x254 <__vector_8+0x24>
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 24e:	10 92 4d 21 	sts	0x214D, r1	; 0x80214d <globalToggle>
 252:	06 c0       	rjmp	.+12     	; 0x260 <__vector_8+0x30>
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 4d 21 	sts	0x214D, r24	; 0x80214d <globalToggle>
 260:	e0 e0       	ldi	r30, 0x00	; 0
 262:	f4 e0       	ldi	r31, 0x04	; 4
 264:	10 86       	std	Z+8, r1	; 0x08
 266:	11 86       	std	Z+9, r1	; 0x09
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	83 83       	std	Z+3, r24	; 0x03
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <_Z17ReadSignatureBytej>:

uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 27c:	aa ec       	ldi	r26, 0xCA	; 202
 27e:	b1 e0       	ldi	r27, 0x01	; 1
 280:	22 e0       	ldi	r18, 0x02	; 2
 282:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
 284:	fc 01       	movw	r30, r24
 286:	84 91       	lpm	r24, Z
	//  __asm__ ("lpm \n  mov %0, r0 \n" : "=r" (Result) : "z" (Address) : "r0");
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 288:	1c 92       	st	X, r1
	return Result;
}
 28a:	08 95       	ret

0000028c <_Z21configureSerialNumberv>:

/*
Note: This function requires serial and should be called after configureUSART()
*/
void configureSerialNumber(){
 28c:	2f 92       	push	r2
 28e:	3f 92       	push	r3
 290:	4f 92       	push	r4
 292:	5f 92       	push	r5
 294:	6f 92       	push	r6
 296:	7f 92       	push	r7
 298:	8f 92       	push	r8
 29a:	9f 92       	push	r9
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
	DeviceSignature[ 0] = ReadSignatureByte(LOTNUM0);
 2b0:	88 e0       	ldi	r24, 0x08	; 8
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17ReadSignatureBytej>
 2b8:	c2 e4       	ldi	r28, 0x42	; 66
 2ba:	d1 e2       	ldi	r29, 0x21	; 33
 2bc:	88 83       	st	Y, r24
	DeviceSignature[ 1] = ReadSignatureByte(LOTNUM1);
 2be:	89 e0       	ldi	r24, 0x09	; 9
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17ReadSignatureBytej>
 2c6:	89 83       	std	Y+1, r24	; 0x01
	DeviceSignature[ 2] = ReadSignatureByte(LOTNUM2);
 2c8:	8a e0       	ldi	r24, 0x0A	; 10
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17ReadSignatureBytej>
 2d0:	8a 83       	std	Y+2, r24	; 0x02
	DeviceSignature[ 3] = ReadSignatureByte(LOTNUM3);
 2d2:	8b e0       	ldi	r24, 0x0B	; 11
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17ReadSignatureBytej>
 2da:	8b 83       	std	Y+3, r24	; 0x03
	DeviceSignature[ 4] = ReadSignatureByte(LOTNUM4);
 2dc:	8c e0       	ldi	r24, 0x0C	; 12
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17ReadSignatureBytej>
 2e4:	8c 83       	std	Y+4, r24	; 0x04
	DeviceSignature[ 5] = ReadSignatureByte(LOTNUM5);
 2e6:	8d e0       	ldi	r24, 0x0D	; 13
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17ReadSignatureBytej>
 2ee:	8d 83       	std	Y+5, r24	; 0x05
	DeviceSignature[ 6] = ReadSignatureByte(WAFNUM );
 2f0:	80 e1       	ldi	r24, 0x10	; 16
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17ReadSignatureBytej>
 2f8:	8e 83       	std	Y+6, r24	; 0x06
	DeviceSignature[ 7] = ReadSignatureByte(COORDX0);
 2fa:	82 e1       	ldi	r24, 0x12	; 18
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17ReadSignatureBytej>
 302:	8f 83       	std	Y+7, r24	; 0x07
	DeviceSignature[ 8] = ReadSignatureByte(COORDX1);
 304:	83 e1       	ldi	r24, 0x13	; 19
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17ReadSignatureBytej>
 30c:	88 87       	std	Y+8, r24	; 0x08
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
 30e:	84 e1       	ldi	r24, 0x14	; 20
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17ReadSignatureBytej>
 316:	89 87       	std	Y+9, r24	; 0x09
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
 318:	85 e1       	ldi	r24, 0x15	; 21
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z17ReadSignatureBytej>
 320:	8a 87       	std	Y+10, r24	; 0x0a
	
	UC_LOT_NUMBER = DeviceSignature[0];
 322:	28 80       	ld	r2, Y
 324:	31 2c       	mov	r3, r1
 326:	41 2c       	mov	r4, r1
 328:	51 2c       	mov	r5, r1
 32a:	61 2c       	mov	r6, r1
 32c:	71 2c       	mov	r7, r1
 32e:	43 01       	movw	r8, r6
 330:	a3 e4       	ldi	r26, 0x43	; 67
 332:	b1 e2       	ldi	r27, 0x21	; 33
 334:	e4 e6       	ldi	r30, 0x64	; 100
 336:	f0 e0       	ldi	r31, 0x00	; 0
	
	for(int i = 1; i < 6; ++i){
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
 338:	8d 91       	ld	r24, X+
 33a:	8e 9f       	mul	r24, r30
 33c:	e0 01       	movw	r28, r0
 33e:	8f 9f       	mul	r24, r31
 340:	d0 0d       	add	r29, r0
 342:	11 24       	eor	r1, r1
 344:	1d 2f       	mov	r17, r29
 346:	11 0f       	add	r17, r17
 348:	11 0b       	sbc	r17, r17
 34a:	22 2d       	mov	r18, r2
 34c:	33 2d       	mov	r19, r3
 34e:	44 2d       	mov	r20, r4
 350:	55 2d       	mov	r21, r5
 352:	66 2d       	mov	r22, r6
 354:	77 2d       	mov	r23, r7
 356:	88 2d       	mov	r24, r8
 358:	99 2d       	mov	r25, r9
 35a:	ac 2e       	mov	r10, r28
 35c:	bd 2e       	mov	r11, r29
 35e:	c1 2e       	mov	r12, r17
 360:	d1 2e       	mov	r13, r17
 362:	e1 2e       	mov	r14, r17
 364:	f1 2e       	mov	r15, r17
 366:	01 2f       	mov	r16, r17
 368:	0e 94 4e 04 	call	0x89c	; 0x89c <__adddi3>
 36c:	22 2e       	mov	r2, r18
 36e:	33 2e       	mov	r3, r19
 370:	44 2e       	mov	r4, r20
 372:	55 2e       	mov	r5, r21
 374:	66 2e       	mov	r6, r22
 376:	77 2e       	mov	r7, r23
 378:	88 2e       	mov	r8, r24
 37a:	99 2e       	mov	r9, r25
 37c:	ec 59       	subi	r30, 0x9C	; 156
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
	DeviceSignature[ 9] = ReadSignatureByte(COORDY0);
	DeviceSignature[10] = ReadSignatureByte(COORDY1);
	
	UC_LOT_NUMBER = DeviceSignature[0];
	
	for(int i = 1; i < 6; ++i){
 380:	e8 35       	cpi	r30, 0x58	; 88
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	f8 07       	cpc	r31, r24
 386:	c1 f6       	brne	.-80     	; 0x338 <_Z21configureSerialNumberv+0xac>
 388:	20 92 3a 21 	sts	0x213A, r2	; 0x80213a <UC_LOT_NUMBER>
 38c:	30 92 3b 21 	sts	0x213B, r3	; 0x80213b <UC_LOT_NUMBER+0x1>
 390:	40 92 3c 21 	sts	0x213C, r4	; 0x80213c <UC_LOT_NUMBER+0x2>
 394:	50 92 3d 21 	sts	0x213D, r5	; 0x80213d <UC_LOT_NUMBER+0x3>
 398:	60 92 3e 21 	sts	0x213E, r6	; 0x80213e <UC_LOT_NUMBER+0x4>
 39c:	70 92 3f 21 	sts	0x213F, r7	; 0x80213f <UC_LOT_NUMBER+0x5>
 3a0:	80 92 40 21 	sts	0x2140, r8	; 0x802140 <UC_LOT_NUMBER+0x6>
 3a4:	90 92 41 21 	sts	0x2141, r9	; 0x802141 <UC_LOT_NUMBER+0x7>
		UC_LOT_NUMBER += DeviceSignature[i] * (100*i);//(DeviceSignature[i] << i*8);
	}
	
	UC_WAFER_ID = DeviceSignature[6];
 3a8:	e2 e4       	ldi	r30, 0x42	; 66
 3aa:	f1 e2       	ldi	r31, 0x21	; 33
 3ac:	26 81       	ldd	r18, Z+6	; 0x06
	
	for(int i = 1; i < 4; ++i){  //Original stops at 5
		UC_WAFER_ID += DeviceSignature[i+6] * (100*i);
 3ae:	a7 81       	ldd	r26, Z+7	; 0x07
 3b0:	c4 e6       	ldi	r28, 0x64	; 100
 3b2:	ac 9f       	mul	r26, r28
 3b4:	d0 01       	movw	r26, r0
 3b6:	11 24       	eor	r1, r1
 3b8:	1b 2f       	mov	r17, r27
 3ba:	11 0f       	add	r17, r17
 3bc:	11 0b       	sbc	r17, r17
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	40 e0       	ldi	r20, 0x00	; 0
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	aa 2e       	mov	r10, r26
 3ce:	bb 2e       	mov	r11, r27
 3d0:	c1 2e       	mov	r12, r17
 3d2:	d1 2e       	mov	r13, r17
 3d4:	e1 2e       	mov	r14, r17
 3d6:	f1 2e       	mov	r15, r17
 3d8:	01 2f       	mov	r16, r17
 3da:	0e 94 4e 04 	call	0x89c	; 0x89c <__adddi3>
 3de:	a0 85       	ldd	r26, Z+8	; 0x08
 3e0:	c8 ec       	ldi	r28, 0xC8	; 200
 3e2:	ac 9f       	mul	r26, r28
 3e4:	d0 01       	movw	r26, r0
 3e6:	11 24       	eor	r1, r1
 3e8:	1b 2f       	mov	r17, r27
 3ea:	11 0f       	add	r17, r17
 3ec:	11 0b       	sbc	r17, r17
 3ee:	aa 2e       	mov	r10, r26
 3f0:	bb 2e       	mov	r11, r27
 3f2:	c1 2e       	mov	r12, r17
 3f4:	d1 2e       	mov	r13, r17
 3f6:	e1 2e       	mov	r14, r17
 3f8:	f1 2e       	mov	r15, r17
 3fa:	01 2f       	mov	r16, r17
 3fc:	0e 94 4e 04 	call	0x89c	; 0x89c <__adddi3>
 400:	c1 85       	ldd	r28, Z+9	; 0x09
 402:	ac e2       	ldi	r26, 0x2C	; 44
 404:	b1 e0       	ldi	r27, 0x01	; 1
 406:	ca 9f       	mul	r28, r26
 408:	f0 01       	movw	r30, r0
 40a:	cb 9f       	mul	r28, r27
 40c:	f0 0d       	add	r31, r0
 40e:	11 24       	eor	r1, r1
 410:	1f 2f       	mov	r17, r31
 412:	11 0f       	add	r17, r17
 414:	11 0b       	sbc	r17, r17
 416:	ae 2e       	mov	r10, r30
 418:	bf 2e       	mov	r11, r31
 41a:	c1 2e       	mov	r12, r17
 41c:	d1 2e       	mov	r13, r17
 41e:	e1 2e       	mov	r14, r17
 420:	f1 2e       	mov	r15, r17
 422:	01 2f       	mov	r16, r17
 424:	0e 94 4e 04 	call	0x89c	; 0x89c <__adddi3>
 428:	20 93 32 21 	sts	0x2132, r18	; 0x802132 <UC_WAFER_ID>
 42c:	30 93 33 21 	sts	0x2133, r19	; 0x802133 <UC_WAFER_ID+0x1>
 430:	40 93 34 21 	sts	0x2134, r20	; 0x802134 <UC_WAFER_ID+0x2>
 434:	50 93 35 21 	sts	0x2135, r21	; 0x802135 <UC_WAFER_ID+0x3>
 438:	60 93 36 21 	sts	0x2136, r22	; 0x802136 <UC_WAFER_ID+0x4>
 43c:	70 93 37 21 	sts	0x2137, r23	; 0x802137 <UC_WAFER_ID+0x5>
 440:	80 93 38 21 	sts	0x2138, r24	; 0x802138 <UC_WAFER_ID+0x6>
 444:	90 93 39 21 	sts	0x2139, r25	; 0x802139 <UC_WAFER_ID+0x7>
	}
	
	serialNumber = -1; //Set the default serial number to -1 ("Not assigned yet")
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	9f ef       	ldi	r25, 0xFF	; 255
 44c:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 450:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
	
	//Hardcoded serial number lookups (don't judge)
	if(UC_LOT_NUMBER == 0x142DD && UC_WAFER_ID == 0x25F3)
 454:	22 2d       	mov	r18, r2
 456:	33 2d       	mov	r19, r3
 458:	44 2d       	mov	r20, r4
 45a:	55 2d       	mov	r21, r5
 45c:	66 2d       	mov	r22, r6
 45e:	77 2d       	mov	r23, r7
 460:	88 2d       	mov	r24, r8
 462:	99 2d       	mov	r25, r9
 464:	2d 3d       	cpi	r18, 0xDD	; 221
 466:	32 44       	sbci	r19, 0x42	; 66
 468:	41 40       	sbci	r20, 0x01	; 1
 46a:	51 05       	cpc	r21, r1
 46c:	61 05       	cpc	r22, r1
 46e:	71 05       	cpc	r23, r1
 470:	81 05       	cpc	r24, r1
 472:	91 05       	cpc	r25, r1
 474:	01 f5       	brne	.+64     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 476:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 47a:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 47e:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 482:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 486:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 48a:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 48e:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 492:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 496:	23 3f       	cpi	r18, 0xF3	; 243
 498:	35 42       	sbci	r19, 0x25	; 37
 49a:	41 05       	cpc	r20, r1
 49c:	51 05       	cpc	r21, r1
 49e:	61 05       	cpc	r22, r1
 4a0:	71 05       	cpc	r23, r1
 4a2:	81 05       	cpc	r24, r1
 4a4:	91 05       	cpc	r25, r1
 4a6:	b9 f5       	brne	.+110    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
		serialNumber = 1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 4b0:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
 4b4:	30 c0       	rjmp	.+96     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
	if(UC_LOT_NUMBER == 0x13919 && UC_WAFER_ID == 0x2E84)
 4b6:	22 2d       	mov	r18, r2
 4b8:	33 2d       	mov	r19, r3
 4ba:	44 2d       	mov	r20, r4
 4bc:	55 2d       	mov	r21, r5
 4be:	66 2d       	mov	r22, r6
 4c0:	77 2d       	mov	r23, r7
 4c2:	88 2d       	mov	r24, r8
 4c4:	99 2d       	mov	r25, r9
 4c6:	29 31       	cpi	r18, 0x19	; 25
 4c8:	39 43       	sbci	r19, 0x39	; 57
 4ca:	41 40       	sbci	r20, 0x01	; 1
 4cc:	51 05       	cpc	r21, r1
 4ce:	61 05       	cpc	r22, r1
 4d0:	71 05       	cpc	r23, r1
 4d2:	81 05       	cpc	r24, r1
 4d4:	91 05       	cpc	r25, r1
 4d6:	f9 f4       	brne	.+62     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 4d8:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 4dc:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 4e0:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 4e4:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 4e8:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 4ec:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 4f0:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 4f4:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 4f8:	24 38       	cpi	r18, 0x84	; 132
 4fa:	3e 42       	sbci	r19, 0x2E	; 46
 4fc:	41 05       	cpc	r20, r1
 4fe:	51 05       	cpc	r21, r1
 500:	61 05       	cpc	r22, r1
 502:	71 05       	cpc	r23, r1
 504:	81 05       	cpc	r24, r1
 506:	91 05       	cpc	r25, r1
 508:	31 f4       	brne	.+12     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
		serialNumber = 2;
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <__data_end>
 512:	90 93 31 21 	sts	0x2131, r25	; 0x802131 <__data_end+0x1>
	
	
	#ifdef OUTPUT_LOT_AND_WAFER_INFO
		SendStringPC((char *)"#[Lot ID Number: ");
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	90 e2       	ldi	r25, 0x20	; 32
 51a:	0e 94 92 03 	call	0x724	; 0x724 <_Z12SendStringPCPc>
		SendNumPC(UC_LOT_NUMBER);
 51e:	20 91 3a 21 	lds	r18, 0x213A	; 0x80213a <UC_LOT_NUMBER>
 522:	30 91 3b 21 	lds	r19, 0x213B	; 0x80213b <UC_LOT_NUMBER+0x1>
 526:	40 91 3c 21 	lds	r20, 0x213C	; 0x80213c <UC_LOT_NUMBER+0x2>
 52a:	50 91 3d 21 	lds	r21, 0x213D	; 0x80213d <UC_LOT_NUMBER+0x3>
 52e:	60 91 3e 21 	lds	r22, 0x213E	; 0x80213e <UC_LOT_NUMBER+0x4>
 532:	70 91 3f 21 	lds	r23, 0x213F	; 0x80213f <UC_LOT_NUMBER+0x5>
 536:	80 91 40 21 	lds	r24, 0x2140	; 0x802140 <UC_LOT_NUMBER+0x6>
 53a:	90 91 41 21 	lds	r25, 0x2141	; 0x802141 <UC_LOT_NUMBER+0x7>
 53e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_Z9SendNumPCy>
		SendStringPC((char *)"]");
 542:	82 e1       	ldi	r24, 0x12	; 18
 544:	90 e2       	ldi	r25, 0x20	; 32
 546:	0e 94 92 03 	call	0x724	; 0x724 <_Z12SendStringPCPc>
		
		SendStringPC((char *)"[Wafer ID Number: ");
 54a:	84 e1       	ldi	r24, 0x14	; 20
 54c:	90 e2       	ldi	r25, 0x20	; 32
 54e:	0e 94 92 03 	call	0x724	; 0x724 <_Z12SendStringPCPc>
		SendNumPC(UC_WAFER_ID);
 552:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <UC_WAFER_ID>
 556:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <UC_WAFER_ID+0x1>
 55a:	40 91 34 21 	lds	r20, 0x2134	; 0x802134 <UC_WAFER_ID+0x2>
 55e:	50 91 35 21 	lds	r21, 0x2135	; 0x802135 <UC_WAFER_ID+0x3>
 562:	60 91 36 21 	lds	r22, 0x2136	; 0x802136 <UC_WAFER_ID+0x4>
 566:	70 91 37 21 	lds	r23, 0x2137	; 0x802137 <UC_WAFER_ID+0x5>
 56a:	80 91 38 21 	lds	r24, 0x2138	; 0x802138 <UC_WAFER_ID+0x6>
 56e:	90 91 39 21 	lds	r25, 0x2139	; 0x802139 <UC_WAFER_ID+0x7>
 572:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_Z9SendNumPCy>
		SendStringPC((char *)"]");
 576:	82 e1       	ldi	r24, 0x12	; 18
 578:	90 e2       	ldi	r25, 0x20	; 32
 57a:	0e 94 92 03 	call	0x724	; 0x724 <_Z12SendStringPCPc>
	#endif
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	ff 90       	pop	r15
 588:	ef 90       	pop	r14
 58a:	df 90       	pop	r13
 58c:	cf 90       	pop	r12
 58e:	bf 90       	pop	r11
 590:	af 90       	pop	r10
 592:	9f 90       	pop	r9
 594:	8f 90       	pop	r8
 596:	7f 90       	pop	r7
 598:	6f 90       	pop	r6
 59a:	5f 90       	pop	r5
 59c:	4f 90       	pop	r4
 59e:	3f 90       	pop	r3
 5a0:	2f 90       	pop	r2
 5a2:	08 95       	ret

000005a4 <main>:


int main(void)
{

	configureIO();	
 5a4:	0e 94 75 00 	call	0xea	; 0xea <_Z11configureIOv>
	configureExternalOscillator();
 5a8:	0e 94 9c 00 	call	0x138	; 0x138 <_Z27configureExternalOscillatorv>
	configureUSART();
 5ac:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z14configureUSARTv>
	configureSerialNumber();
 5b0:	0e 94 46 01 	call	0x28c	; 0x28c <_Z21configureSerialNumberv>
	configureTimerCounter();
 5b4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z21configureTimerCounterv>

	uint8_t receivedUSARTData;  //Holds received bytes from serial devices

	LOW_LEVEL_INTERRUPTS_ENABLE();
 5b8:	e0 ea       	ldi	r30, 0xA0	; 160
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	82 81       	ldd	r24, Z+2	; 0x02
 5be:	81 60       	ori	r24, 0x01	; 1
 5c0:	82 83       	std	Z+2, r24	; 0x02
	sei();
 5c2:	78 94       	sei
	
	//Setup radios
	XBEE_SLEEP();
 5c4:	e0 e0       	ldi	r30, 0x00	; 0
 5c6:	f6 e0       	ldi	r31, 0x06	; 6
 5c8:	88 e0       	ldi	r24, 0x08	; 8
 5ca:	85 83       	std	Z+5, r24	; 0x05
	IRIDIUM_SLEEP();
 5cc:	80 e2       	ldi	r24, 0x20	; 32
 5ce:	86 83       	std	Z+6, r24	; 0x06
	
	//PORTD.OUTSET = PIN5_bm; //RGB LED Test

	//Init string with basic documentation
	SendStringPC("\n\n\r#[INIT ROSE COMMS]\n\r");
 5d0:	87 e2       	ldi	r24, 0x27	; 39
 5d2:	90 e2       	ldi	r25, 0x20	; 32
 5d4:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
	SendStringPC("#Firmware version ");
 5d8:	8f e3       	ldi	r24, 0x3F	; 63
 5da:	90 e2       	ldi	r25, 0x20	; 32
 5dc:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
	SendStringPC(FIRMWARE_VERSION_STR);
 5e0:	82 e5       	ldi	r24, 0x52	; 82
 5e2:	90 e2       	ldi	r25, 0x20	; 32
 5e4:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
	SendStringPC("\n\r#Serial Number: ");
 5e8:	86 e5       	ldi	r24, 0x56	; 86
 5ea:	90 e2       	ldi	r25, 0x20	; 32
 5ec:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
	if(serialNumber == -1)
 5f0:	80 91 30 21 	lds	r24, 0x2130	; 0x802130 <__data_end>
 5f4:	90 91 31 21 	lds	r25, 0x2131	; 0x802131 <__data_end+0x1>
 5f8:	8f 3f       	cpi	r24, 0xFF	; 255
 5fa:	2f ef       	ldi	r18, 0xFF	; 255
 5fc:	92 07       	cpc	r25, r18
 5fe:	29 f4       	brne	.+10     	; 0x60a <main+0x66>
		SendStringPC("NOT SET");
 600:	89 e6       	ldi	r24, 0x69	; 105
 602:	90 e2       	ldi	r25, 0x20	; 32
 604:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
 608:	02 c0       	rjmp	.+4      	; 0x60e <main+0x6a>
	else
		SendNumPC(serialNumber);
 60a:	0e 94 ca 03 	call	0x794	; 0x794 <_Z9SendNumPCi>
	SendStringPC("\n\r#Msg format: Iridium Status | RSSI Value | Comms Status\n\r");
 60e:	81 e7       	ldi	r24, 0x71	; 113
 610:	90 e2       	ldi	r25, 0x20	; 32
 612:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
		if(broadcastStatus){
			broadcastStatus = 0;
			//SendStringPC("Broadcast, yo\n\r");
			
			//Assemble Iridium Status byte
			uint8_t iridiumStatus = (CHECK_IRID_PG() << 1) | (CHECK_IRID_NETWORK() << 0);
 616:	c0 e4       	ldi	r28, 0x40	; 64
 618:	d6 e0       	ldi	r29, 0x06	; 6
			
			//Assemble Comms Value Byte
			uint8_t commsStatus = ((!CHECK_TX_SW()) << 0);
 61a:	00 e0       	ldi	r16, 0x00	; 0
 61c:	16 e0       	ldi	r17, 0x06	; 6
			SendStringPC("RSSI");
			SendStringPC("|");
			SendNumPC(commsStatus);
			SendStringPC("\n\r");
		}
		STATUS_TOGGLE();
 61e:	68 94       	set
 620:	bb 24       	eor	r11, r11
 622:	b2 f8       	bld	r11, 2
		_delay_ms(25);
		
		
		if(USART_IsRXComplete(&COMP_USART)){
 624:	0f 2e       	mov	r0, r31
 626:	f0 ec       	ldi	r31, 0xC0	; 192
 628:	ef 2e       	mov	r14, r31
 62a:	f8 e0       	ldi	r31, 0x08	; 8
 62c:	ff 2e       	mov	r15, r31
 62e:	f0 2d       	mov	r31, r0
				SendStringPC("Turning off Xbee\n\r");
				XBEE_SLEEP();
			}
			if(receivedUSARTData == 51){ //Turn on XBee
				SendStringPC("Turning on XBee\n\r");
				XBEE_WAKE();
 630:	68 94       	set
 632:	cc 24       	eor	r12, r12
 634:	c3 f8       	bld	r12, 3
				SendStringPC("Turning off Iridium Modem\n\r");
				IRIDIUM_SLEEP();
			}
			if(receivedUSARTData == 41){ //Turn on Iridium Modem
				SendStringPC("Turning on Iridium Modem\n\r");
				IRIDIUM_WAKE();
 636:	68 94       	set
 638:	dd 24       	eor	r13, r13
 63a:	d5 f8       	bld	r13, 5
	SendStringPC("\n\r#Msg format: Iridium Status | RSSI Value | Comms Status\n\r");
	
	
    while (1) 
    {
		if(broadcastStatus){
 63c:	80 91 4e 21 	lds	r24, 0x214E	; 0x80214e <broadcastStatus>
 640:	88 23       	and	r24, r24
 642:	09 f1       	breq	.+66     	; 0x686 <main+0xe2>
			broadcastStatus = 0;
 644:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <broadcastStatus>
			//SendStringPC("Broadcast, yo\n\r");
			
			//Assemble Iridium Status byte
			uint8_t iridiumStatus = (CHECK_IRID_PG() << 1) | (CHECK_IRID_NETWORK() << 0);
 648:	98 85       	ldd	r25, Y+8	; 0x08
 64a:	88 85       	ldd	r24, Y+8	; 0x08
			
			//Assemble Comms Value Byte
			uint8_t commsStatus = ((!CHECK_TX_SW()) << 0);
 64c:	f8 01       	movw	r30, r16
 64e:	a0 84       	ldd	r10, Z+8	; 0x08
		if(broadcastStatus){
			broadcastStatus = 0;
			//SendStringPC("Broadcast, yo\n\r");
			
			//Assemble Iridium Status byte
			uint8_t iridiumStatus = (CHECK_IRID_PG() << 1) | (CHECK_IRID_NETWORK() << 0);
 650:	90 72       	andi	r25, 0x20	; 32
 652:	99 0f       	add	r25, r25
 654:	80 71       	andi	r24, 0x10	; 16
			
			//Assemble Comms Value Byte
			uint8_t commsStatus = ((!CHECK_TX_SW()) << 0);
			
			SendNumPC(iridiumStatus);
 656:	89 2b       	or	r24, r25
 658:	0e 94 b2 03 	call	0x764	; 0x764 <_Z9SendNumPCh>
			SendStringPC("|");
 65c:	8d ea       	ldi	r24, 0xAD	; 173
 65e:	90 e2       	ldi	r25, 0x20	; 32
 660:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
			SendStringPC("RSSI");
 664:	8f ea       	ldi	r24, 0xAF	; 175
 666:	90 e2       	ldi	r25, 0x20	; 32
 668:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
			SendStringPC("|");
 66c:	8d ea       	ldi	r24, 0xAD	; 173
 66e:	90 e2       	ldi	r25, 0x20	; 32
 670:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
			SendNumPC(commsStatus);
 674:	a4 fa       	bst	r10, 4
 676:	88 27       	eor	r24, r24
 678:	80 f9       	bld	r24, 0
 67a:	0e 94 b2 03 	call	0x764	; 0x764 <_Z9SendNumPCh>
			SendStringPC("\n\r");
 67e:	8c e3       	ldi	r24, 0x3C	; 60
 680:	90 e2       	ldi	r25, 0x20	; 32
 682:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
		}
		STATUS_TOGGLE();
 686:	8c 81       	ldd	r24, Y+4	; 0x04
 688:	82 fd       	sbrc	r24, 2
 68a:	02 c0       	rjmp	.+4      	; 0x690 <main+0xec>
 68c:	bd 82       	std	Y+5, r11	; 0x05
 68e:	01 c0       	rjmp	.+2      	; 0x692 <main+0xee>
 690:	be 82       	std	Y+6, r11	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 692:	ff ef       	ldi	r31, 0xFF	; 255
 694:	20 e7       	ldi	r18, 0x70	; 112
 696:	82 e0       	ldi	r24, 0x02	; 2
 698:	f1 50       	subi	r31, 0x01	; 1
 69a:	20 40       	sbci	r18, 0x00	; 0
 69c:	80 40       	sbci	r24, 0x00	; 0
 69e:	e1 f7       	brne	.-8      	; 0x698 <main+0xf4>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <main+0xfe>
 6a2:	00 00       	nop
		_delay_ms(25);
		
		
		if(USART_IsRXComplete(&COMP_USART)){
 6a4:	f7 01       	movw	r30, r14
 6a6:	81 81       	ldd	r24, Z+1	; 0x01
 6a8:	88 23       	and	r24, r24
 6aa:	8c f5       	brge	.+98     	; 0x70e <main+0x16a>
			SendStringPC("Received data. ");
 6ac:	84 eb       	ldi	r24, 0xB4	; 180
 6ae:	90 e2       	ldi	r25, 0x20	; 32
 6b0:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
			SendStringPC("\n\r");
 6b4:	8c e3       	ldi	r24, 0x3C	; 60
 6b6:	90 e2       	ldi	r25, 0x20	; 32
 6b8:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
			receivedUSARTData = USART_GetChar(&COMP_USART);
 6bc:	f7 01       	movw	r30, r14
 6be:	a0 80       	ld	r10, Z
			
			//Iridium Controls
			if(receivedUSARTData == 40){ //Turn off Iridium Modem
 6c0:	f8 e2       	ldi	r31, 0x28	; 40
 6c2:	af 12       	cpse	r10, r31
 6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <main+0x130>
				SendStringPC("Turning off Iridium Modem\n\r");
 6c6:	84 ec       	ldi	r24, 0xC4	; 196
 6c8:	90 e2       	ldi	r25, 0x20	; 32
 6ca:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
				IRIDIUM_SLEEP();
 6ce:	f8 01       	movw	r30, r16
 6d0:	d6 82       	std	Z+6, r13	; 0x06
 6d2:	14 c0       	rjmp	.+40     	; 0x6fc <main+0x158>
			}
			if(receivedUSARTData == 41){ //Turn on Iridium Modem
 6d4:	f9 e2       	ldi	r31, 0x29	; 41
 6d6:	af 12       	cpse	r10, r31
 6d8:	07 c0       	rjmp	.+14     	; 0x6e8 <main+0x144>
				SendStringPC("Turning on Iridium Modem\n\r");
 6da:	80 ee       	ldi	r24, 0xE0	; 224
 6dc:	90 e2       	ldi	r25, 0x20	; 32
 6de:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
				IRIDIUM_WAKE();
 6e2:	f8 01       	movw	r30, r16
 6e4:	d5 82       	std	Z+5, r13	; 0x05
 6e6:	13 c0       	rjmp	.+38     	; 0x70e <main+0x16a>
			}
			
			//Xbee controls
			if(receivedUSARTData == 50){ //Turn off XBee
 6e8:	f2 e3       	ldi	r31, 0x32	; 50
 6ea:	af 12       	cpse	r10, r31
 6ec:	07 c0       	rjmp	.+14     	; 0x6fc <main+0x158>
				SendStringPC("Turning off Xbee\n\r");
 6ee:	8b ef       	ldi	r24, 0xFB	; 251
 6f0:	90 e2       	ldi	r25, 0x20	; 32
 6f2:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
				XBEE_SLEEP();
 6f6:	f8 01       	movw	r30, r16
 6f8:	c5 82       	std	Z+5, r12	; 0x05
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <main+0x16a>
			}
			if(receivedUSARTData == 51){ //Turn on XBee
 6fc:	f3 e3       	ldi	r31, 0x33	; 51
 6fe:	af 12       	cpse	r10, r31
 700:	06 c0       	rjmp	.+12     	; 0x70e <main+0x16a>
				SendStringPC("Turning on XBee\n\r");
 702:	8e e0       	ldi	r24, 0x0E	; 14
 704:	91 e2       	ldi	r25, 0x21	; 33
 706:	0e 94 a2 03 	call	0x744	; 0x744 <_Z12SendStringPCPKc>
				XBEE_WAKE();
 70a:	f8 01       	movw	r30, r16
 70c:	c6 82       	std	Z+6, r12	; 0x06
			}
				
			
		}
		
		if (CHECK_TX_SW()) {
 70e:	f8 01       	movw	r30, r16
 710:	80 85       	ldd	r24, Z+8	; 0x08
 712:	84 fd       	sbrc	r24, 4
 714:	03 c0       	rjmp	.+6      	; 0x71c <main+0x178>
			ERROR_SET();
 716:	cd 82       	std	Y+5, r12	; 0x05
			//XBEE_WAKE();
			IRIDIUM_WAKE();
 718:	d5 82       	std	Z+5, r13	; 0x05
 71a:	90 cf       	rjmp	.-224    	; 0x63c <main+0x98>
		}
		else{
			ERROR_CLR();
 71c:	ce 82       	std	Y+6, r12	; 0x06
			//XBEE_SLEEP();
			IRIDIUM_SLEEP();
 71e:	f8 01       	movw	r30, r16
 720:	d6 82       	std	Z+6, r13	; 0x06
 722:	8c cf       	rjmp	.-232    	; 0x63c <main+0x98>

00000724 <_Z12SendStringPCPc>:

void SendNumPC(uint16_t numToSend){
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
}
 724:	fc 01       	movw	r30, r24
 726:	20 81       	ld	r18, Z
 728:	22 23       	and	r18, r18
 72a:	59 f0       	breq	.+22     	; 0x742 <_Z12SendStringPCPc+0x1e>
 72c:	dc 01       	movw	r26, r24
 72e:	11 96       	adiw	r26, 0x01	; 1
 730:	e0 ec       	ldi	r30, 0xC0	; 192
 732:	f8 e0       	ldi	r31, 0x08	; 8
 734:	91 81       	ldd	r25, Z+1	; 0x01
 736:	95 ff       	sbrs	r25, 5
 738:	fd cf       	rjmp	.-6      	; 0x734 <_Z12SendStringPCPc+0x10>
 73a:	20 83       	st	Z, r18
 73c:	2d 91       	ld	r18, X+
 73e:	21 11       	cpse	r18, r1
 740:	f9 cf       	rjmp	.-14     	; 0x734 <_Z12SendStringPCPc+0x10>
 742:	08 95       	ret

00000744 <_Z12SendStringPCPKc>:
 744:	fc 01       	movw	r30, r24
 746:	20 81       	ld	r18, Z
 748:	22 23       	and	r18, r18
 74a:	59 f0       	breq	.+22     	; 0x762 <_Z12SendStringPCPKc+0x1e>
 74c:	dc 01       	movw	r26, r24
 74e:	11 96       	adiw	r26, 0x01	; 1
 750:	e0 ec       	ldi	r30, 0xC0	; 192
 752:	f8 e0       	ldi	r31, 0x08	; 8
 754:	91 81       	ldd	r25, Z+1	; 0x01
 756:	95 ff       	sbrs	r25, 5
 758:	fd cf       	rjmp	.-6      	; 0x754 <_Z12SendStringPCPKc+0x10>
 75a:	20 83       	st	Z, r18
 75c:	2d 91       	ld	r18, X+
 75e:	21 11       	cpse	r18, r1
 760:	f9 cf       	rjmp	.-14     	; 0x754 <_Z12SendStringPCPKc+0x10>
 762:	08 95       	ret

00000764 <_Z9SendNumPCh>:
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	2a 97       	sbiw	r28, 0x0a	; 10
 76e:	cd bf       	out	0x3d, r28	; 61
 770:	de bf       	out	0x3e, r29	; 62
 772:	4a e0       	ldi	r20, 0x0A	; 10
 774:	be 01       	movw	r22, r28
 776:	6f 5f       	subi	r22, 0xFF	; 255
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 57 04 	call	0x8ae	; 0x8ae <__itoa_ncheck>
 780:	ce 01       	movw	r24, r28
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	0e 94 92 03 	call	0x724	; 0x724 <_Z12SendStringPCPc>
 788:	2a 96       	adiw	r28, 0x0a	; 10
 78a:	cd bf       	out	0x3d, r28	; 61
 78c:	de bf       	out	0x3e, r29	; 62
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	08 95       	ret

00000794 <_Z9SendNumPCi>:

void SendNumPC(int16_t numToSend){
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	cd b7       	in	r28, 0x3d	; 61
 79a:	de b7       	in	r29, 0x3e	; 62
 79c:	64 97       	sbiw	r28, 0x14	; 20
 79e:	cd bf       	out	0x3d, r28	; 61
 7a0:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7a2:	4a e0       	ldi	r20, 0x0A	; 10
 7a4:	be 01       	movw	r22, r28
 7a6:	6f 5f       	subi	r22, 0xFF	; 255
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	0e 94 57 04 	call	0x8ae	; 0x8ae <__itoa_ncheck>
	char buffer[20];
	itoa(numToSend, buffer, 10);
	SendStringPC(buffer);
 7ae:	ce 01       	movw	r24, r28
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	0e 94 92 03 	call	0x724	; 0x724 <_Z12SendStringPCPc>
}
 7b6:	64 96       	adiw	r28, 0x14	; 20
 7b8:	cd bf       	out	0x3d, r28	; 61
 7ba:	de bf       	out	0x3e, r29	; 62
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	08 95       	ret

000007c2 <_Z9SendNumPCy>:
/*
For this function, we need to split the 64 bit integer into two separate
32 bit integers because %llx and %lld are not implemented in this version
of sprintf/
*/
void SendNumPC(uint64_t numToSend){
 7c2:	ff 92       	push	r15
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	e2 97       	sbiw	r28, 0x32	; 50
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	de bf       	out	0x3e, r29	; 62
 7d6:	f5 2e       	mov	r15, r21
	char buffer[50];
	uint32_t tempLSB;
	uint32_t tempMSB;
	
	tempLSB = numToSend & 0xFFFFFFFF;	//Least significant four bytes
 7d8:	e2 2f       	mov	r30, r18
 7da:	f3 2f       	mov	r31, r19
 7dc:	14 2f       	mov	r17, r20
	tempMSB = (uint32_t) ((numToSend & 0xFFFFFFFF00000000) >> 32);		//Most significant four bytes
 7de:	20 e0       	ldi	r18, 0x00	; 0
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	40 e0       	ldi	r20, 0x00	; 0
 7e4:	50 e0       	ldi	r21, 0x00	; 0
 7e6:	00 e2       	ldi	r16, 0x20	; 32
 7e8:	0e 94 32 04 	call	0x864	; 0x864 <__lshrdi3>
 7ec:	82 2f       	mov	r24, r18
 7ee:	93 2f       	mov	r25, r19
 7f0:	a4 2f       	mov	r26, r20
 7f2:	b5 2f       	mov	r27, r21
		
	if(tempMSB)
 7f4:	89 2b       	or	r24, r25
 7f6:	8a 2b       	or	r24, r26
 7f8:	8b 2b       	or	r24, r27
 7fa:	a9 f0       	breq	.+42     	; 0x826 <_Z9SendNumPCy+0x64>
		sprintf(buffer,"%lx%lx", tempMSB, tempLSB);		
 7fc:	ff 92       	push	r15
 7fe:	1f 93       	push	r17
 800:	ff 93       	push	r31
 802:	ef 93       	push	r30
 804:	5f 93       	push	r21
 806:	4f 93       	push	r20
 808:	3f 93       	push	r19
 80a:	2f 93       	push	r18
 80c:	80 e2       	ldi	r24, 0x20	; 32
 80e:	91 e2       	ldi	r25, 0x21	; 33
 810:	9f 93       	push	r25
 812:	8f 93       	push	r24
 814:	ce 01       	movw	r24, r28
 816:	01 96       	adiw	r24, 0x01	; 1
 818:	9f 93       	push	r25
 81a:	8f 93       	push	r24
 81c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <sprintf>
 820:	cd bf       	out	0x3d, r28	; 61
 822:	de bf       	out	0x3e, r29	; 62
 824:	10 c0       	rjmp	.+32     	; 0x846 <_Z9SendNumPCy+0x84>
	else
		sprintf(buffer,"%lx", tempLSB);		
 826:	ff 92       	push	r15
 828:	1f 93       	push	r17
 82a:	ff 93       	push	r31
 82c:	ef 93       	push	r30
 82e:	83 e2       	ldi	r24, 0x23	; 35
 830:	91 e2       	ldi	r25, 0x21	; 33
 832:	9f 93       	push	r25
 834:	8f 93       	push	r24
 836:	ce 01       	movw	r24, r28
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	9f 93       	push	r25
 83c:	8f 93       	push	r24
 83e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <sprintf>
 842:	cd bf       	out	0x3d, r28	; 61
 844:	de bf       	out	0x3e, r29	; 62
	
	SendStringPC(buffer);
 846:	ce 01       	movw	r24, r28
 848:	01 96       	adiw	r24, 0x01	; 1
 84a:	0e 94 92 03 	call	0x724	; 0x724 <_Z12SendStringPCPc>
}
 84e:	e2 96       	adiw	r28, 0x32	; 50
 850:	cd bf       	out	0x3d, r28	; 61
 852:	de bf       	out	0x3e, r29	; 62
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	1f 91       	pop	r17
 85a:	0f 91       	pop	r16
 85c:	ff 90       	pop	r15
 85e:	08 95       	ret

00000860 <__ashrdi3>:
 860:	97 fb       	bst	r25, 7
 862:	10 f8       	bld	r1, 0

00000864 <__lshrdi3>:
 864:	16 94       	lsr	r1
 866:	00 08       	sbc	r0, r0
 868:	0f 93       	push	r16
 86a:	08 30       	cpi	r16, 0x08	; 8
 86c:	98 f0       	brcs	.+38     	; 0x894 <__lshrdi3+0x30>
 86e:	08 50       	subi	r16, 0x08	; 8
 870:	23 2f       	mov	r18, r19
 872:	34 2f       	mov	r19, r20
 874:	45 2f       	mov	r20, r21
 876:	56 2f       	mov	r21, r22
 878:	67 2f       	mov	r22, r23
 87a:	78 2f       	mov	r23, r24
 87c:	89 2f       	mov	r24, r25
 87e:	90 2d       	mov	r25, r0
 880:	f4 cf       	rjmp	.-24     	; 0x86a <__lshrdi3+0x6>
 882:	05 94       	asr	r0
 884:	97 95       	ror	r25
 886:	87 95       	ror	r24
 888:	77 95       	ror	r23
 88a:	67 95       	ror	r22
 88c:	57 95       	ror	r21
 88e:	47 95       	ror	r20
 890:	37 95       	ror	r19
 892:	27 95       	ror	r18
 894:	0a 95       	dec	r16
 896:	aa f7       	brpl	.-22     	; 0x882 <__lshrdi3+0x1e>
 898:	0f 91       	pop	r16
 89a:	08 95       	ret

0000089c <__adddi3>:
 89c:	2a 0d       	add	r18, r10
 89e:	3b 1d       	adc	r19, r11
 8a0:	4c 1d       	adc	r20, r12
 8a2:	5d 1d       	adc	r21, r13
 8a4:	6e 1d       	adc	r22, r14
 8a6:	7f 1d       	adc	r23, r15
 8a8:	80 1f       	adc	r24, r16
 8aa:	91 1f       	adc	r25, r17
 8ac:	08 95       	ret

000008ae <__itoa_ncheck>:
 8ae:	bb 27       	eor	r27, r27
 8b0:	4a 30       	cpi	r20, 0x0A	; 10
 8b2:	31 f4       	brne	.+12     	; 0x8c0 <__itoa_ncheck+0x12>
 8b4:	99 23       	and	r25, r25
 8b6:	22 f4       	brpl	.+8      	; 0x8c0 <__itoa_ncheck+0x12>
 8b8:	bd e2       	ldi	r27, 0x2D	; 45
 8ba:	90 95       	com	r25
 8bc:	81 95       	neg	r24
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__utoa_common>

000008c4 <__utoa_ncheck>:
 8c4:	bb 27       	eor	r27, r27

000008c6 <__utoa_common>:
 8c6:	fb 01       	movw	r30, r22
 8c8:	55 27       	eor	r21, r21
 8ca:	aa 27       	eor	r26, r26
 8cc:	88 0f       	add	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	aa 1f       	adc	r26, r26
 8d2:	a4 17       	cp	r26, r20
 8d4:	10 f0       	brcs	.+4      	; 0x8da <__utoa_common+0x14>
 8d6:	a4 1b       	sub	r26, r20
 8d8:	83 95       	inc	r24
 8da:	50 51       	subi	r21, 0x10	; 16
 8dc:	b9 f7       	brne	.-18     	; 0x8cc <__utoa_common+0x6>
 8de:	a0 5d       	subi	r26, 0xD0	; 208
 8e0:	aa 33       	cpi	r26, 0x3A	; 58
 8e2:	08 f0       	brcs	.+2      	; 0x8e6 <__utoa_common+0x20>
 8e4:	a9 5d       	subi	r26, 0xD9	; 217
 8e6:	a1 93       	st	Z+, r26
 8e8:	00 97       	sbiw	r24, 0x00	; 0
 8ea:	79 f7       	brne	.-34     	; 0x8ca <__utoa_common+0x4>
 8ec:	b1 11       	cpse	r27, r1
 8ee:	b1 93       	st	Z+, r27
 8f0:	11 92       	st	Z+, r1
 8f2:	cb 01       	movw	r24, r22
 8f4:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <strrev>

000008f8 <sprintf>:
 8f8:	ae e0       	ldi	r26, 0x0E	; 14
 8fa:	b0 e0       	ldi	r27, 0x00	; 0
 8fc:	e2 e8       	ldi	r30, 0x82	; 130
 8fe:	f4 e0       	ldi	r31, 0x04	; 4
 900:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__prologue_saves__+0x1c>
 904:	0d 89       	ldd	r16, Y+21	; 0x15
 906:	1e 89       	ldd	r17, Y+22	; 0x16
 908:	86 e0       	ldi	r24, 0x06	; 6
 90a:	8c 83       	std	Y+4, r24	; 0x04
 90c:	09 83       	std	Y+1, r16	; 0x01
 90e:	1a 83       	std	Y+2, r17	; 0x02
 910:	8f ef       	ldi	r24, 0xFF	; 255
 912:	9f e7       	ldi	r25, 0x7F	; 127
 914:	8d 83       	std	Y+5, r24	; 0x05
 916:	9e 83       	std	Y+6, r25	; 0x06
 918:	ae 01       	movw	r20, r28
 91a:	47 5e       	subi	r20, 0xE7	; 231
 91c:	5f 4f       	sbci	r21, 0xFF	; 255
 91e:	6f 89       	ldd	r22, Y+23	; 0x17
 920:	78 8d       	ldd	r23, Y+24	; 0x18
 922:	ce 01       	movw	r24, r28
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	0e 94 9f 04 	call	0x93e	; 0x93e <vfprintf>
 92a:	2f 81       	ldd	r18, Y+7	; 0x07
 92c:	38 85       	ldd	r19, Y+8	; 0x08
 92e:	f8 01       	movw	r30, r16
 930:	e2 0f       	add	r30, r18
 932:	f3 1f       	adc	r31, r19
 934:	10 82       	st	Z, r1
 936:	2e 96       	adiw	r28, 0x0e	; 14
 938:	e4 e0       	ldi	r30, 0x04	; 4
 93a:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__epilogue_restores__+0x1c>

0000093e <vfprintf>:
 93e:	ac e0       	ldi	r26, 0x0C	; 12
 940:	b0 e0       	ldi	r27, 0x00	; 0
 942:	e5 ea       	ldi	r30, 0xA5	; 165
 944:	f4 e0       	ldi	r31, 0x04	; 4
 946:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__prologue_saves__>
 94a:	7c 01       	movw	r14, r24
 94c:	6b 01       	movw	r12, r22
 94e:	8a 01       	movw	r16, r20
 950:	fc 01       	movw	r30, r24
 952:	16 82       	std	Z+6, r1	; 0x06
 954:	17 82       	std	Z+7, r1	; 0x07
 956:	83 81       	ldd	r24, Z+3	; 0x03
 958:	81 ff       	sbrs	r24, 1
 95a:	bd c1       	rjmp	.+890    	; 0xcd6 <vfprintf+0x398>
 95c:	ce 01       	movw	r24, r28
 95e:	01 96       	adiw	r24, 0x01	; 1
 960:	4c 01       	movw	r8, r24
 962:	f7 01       	movw	r30, r14
 964:	93 81       	ldd	r25, Z+3	; 0x03
 966:	f6 01       	movw	r30, r12
 968:	93 fd       	sbrc	r25, 3
 96a:	85 91       	lpm	r24, Z+
 96c:	93 ff       	sbrs	r25, 3
 96e:	81 91       	ld	r24, Z+
 970:	6f 01       	movw	r12, r30
 972:	88 23       	and	r24, r24
 974:	09 f4       	brne	.+2      	; 0x978 <vfprintf+0x3a>
 976:	ab c1       	rjmp	.+854    	; 0xcce <vfprintf+0x390>
 978:	85 32       	cpi	r24, 0x25	; 37
 97a:	39 f4       	brne	.+14     	; 0x98a <vfprintf+0x4c>
 97c:	93 fd       	sbrc	r25, 3
 97e:	85 91       	lpm	r24, Z+
 980:	93 ff       	sbrs	r25, 3
 982:	81 91       	ld	r24, Z+
 984:	6f 01       	movw	r12, r30
 986:	85 32       	cpi	r24, 0x25	; 37
 988:	29 f4       	brne	.+10     	; 0x994 <vfprintf+0x56>
 98a:	b7 01       	movw	r22, r14
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 97 06 	call	0xd2e	; 0xd2e <fputc>
 992:	e7 cf       	rjmp	.-50     	; 0x962 <vfprintf+0x24>
 994:	51 2c       	mov	r5, r1
 996:	31 2c       	mov	r3, r1
 998:	20 e0       	ldi	r18, 0x00	; 0
 99a:	20 32       	cpi	r18, 0x20	; 32
 99c:	a0 f4       	brcc	.+40     	; 0x9c6 <vfprintf+0x88>
 99e:	8b 32       	cpi	r24, 0x2B	; 43
 9a0:	69 f0       	breq	.+26     	; 0x9bc <vfprintf+0x7e>
 9a2:	30 f4       	brcc	.+12     	; 0x9b0 <vfprintf+0x72>
 9a4:	80 32       	cpi	r24, 0x20	; 32
 9a6:	59 f0       	breq	.+22     	; 0x9be <vfprintf+0x80>
 9a8:	83 32       	cpi	r24, 0x23	; 35
 9aa:	69 f4       	brne	.+26     	; 0x9c6 <vfprintf+0x88>
 9ac:	20 61       	ori	r18, 0x10	; 16
 9ae:	2c c0       	rjmp	.+88     	; 0xa08 <vfprintf+0xca>
 9b0:	8d 32       	cpi	r24, 0x2D	; 45
 9b2:	39 f0       	breq	.+14     	; 0x9c2 <vfprintf+0x84>
 9b4:	80 33       	cpi	r24, 0x30	; 48
 9b6:	39 f4       	brne	.+14     	; 0x9c6 <vfprintf+0x88>
 9b8:	21 60       	ori	r18, 0x01	; 1
 9ba:	26 c0       	rjmp	.+76     	; 0xa08 <vfprintf+0xca>
 9bc:	22 60       	ori	r18, 0x02	; 2
 9be:	24 60       	ori	r18, 0x04	; 4
 9c0:	23 c0       	rjmp	.+70     	; 0xa08 <vfprintf+0xca>
 9c2:	28 60       	ori	r18, 0x08	; 8
 9c4:	21 c0       	rjmp	.+66     	; 0xa08 <vfprintf+0xca>
 9c6:	27 fd       	sbrc	r18, 7
 9c8:	27 c0       	rjmp	.+78     	; 0xa18 <vfprintf+0xda>
 9ca:	30 ed       	ldi	r19, 0xD0	; 208
 9cc:	38 0f       	add	r19, r24
 9ce:	3a 30       	cpi	r19, 0x0A	; 10
 9d0:	78 f4       	brcc	.+30     	; 0x9f0 <vfprintf+0xb2>
 9d2:	26 ff       	sbrs	r18, 6
 9d4:	06 c0       	rjmp	.+12     	; 0x9e2 <vfprintf+0xa4>
 9d6:	fa e0       	ldi	r31, 0x0A	; 10
 9d8:	5f 9e       	mul	r5, r31
 9da:	30 0d       	add	r19, r0
 9dc:	11 24       	eor	r1, r1
 9de:	53 2e       	mov	r5, r19
 9e0:	13 c0       	rjmp	.+38     	; 0xa08 <vfprintf+0xca>
 9e2:	8a e0       	ldi	r24, 0x0A	; 10
 9e4:	38 9e       	mul	r3, r24
 9e6:	30 0d       	add	r19, r0
 9e8:	11 24       	eor	r1, r1
 9ea:	33 2e       	mov	r3, r19
 9ec:	20 62       	ori	r18, 0x20	; 32
 9ee:	0c c0       	rjmp	.+24     	; 0xa08 <vfprintf+0xca>
 9f0:	8e 32       	cpi	r24, 0x2E	; 46
 9f2:	21 f4       	brne	.+8      	; 0x9fc <vfprintf+0xbe>
 9f4:	26 fd       	sbrc	r18, 6
 9f6:	6b c1       	rjmp	.+726    	; 0xcce <vfprintf+0x390>
 9f8:	20 64       	ori	r18, 0x40	; 64
 9fa:	06 c0       	rjmp	.+12     	; 0xa08 <vfprintf+0xca>
 9fc:	8c 36       	cpi	r24, 0x6C	; 108
 9fe:	11 f4       	brne	.+4      	; 0xa04 <vfprintf+0xc6>
 a00:	20 68       	ori	r18, 0x80	; 128
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <vfprintf+0xca>
 a04:	88 36       	cpi	r24, 0x68	; 104
 a06:	41 f4       	brne	.+16     	; 0xa18 <vfprintf+0xda>
 a08:	f6 01       	movw	r30, r12
 a0a:	93 fd       	sbrc	r25, 3
 a0c:	85 91       	lpm	r24, Z+
 a0e:	93 ff       	sbrs	r25, 3
 a10:	81 91       	ld	r24, Z+
 a12:	6f 01       	movw	r12, r30
 a14:	81 11       	cpse	r24, r1
 a16:	c1 cf       	rjmp	.-126    	; 0x99a <vfprintf+0x5c>
 a18:	98 2f       	mov	r25, r24
 a1a:	9f 7d       	andi	r25, 0xDF	; 223
 a1c:	95 54       	subi	r25, 0x45	; 69
 a1e:	93 30       	cpi	r25, 0x03	; 3
 a20:	28 f4       	brcc	.+10     	; 0xa2c <vfprintf+0xee>
 a22:	0c 5f       	subi	r16, 0xFC	; 252
 a24:	1f 4f       	sbci	r17, 0xFF	; 255
 a26:	ff e3       	ldi	r31, 0x3F	; 63
 a28:	f9 83       	std	Y+1, r31	; 0x01
 a2a:	0d c0       	rjmp	.+26     	; 0xa46 <vfprintf+0x108>
 a2c:	83 36       	cpi	r24, 0x63	; 99
 a2e:	31 f0       	breq	.+12     	; 0xa3c <vfprintf+0xfe>
 a30:	83 37       	cpi	r24, 0x73	; 115
 a32:	71 f0       	breq	.+28     	; 0xa50 <vfprintf+0x112>
 a34:	83 35       	cpi	r24, 0x53	; 83
 a36:	09 f0       	breq	.+2      	; 0xa3a <vfprintf+0xfc>
 a38:	5b c0       	rjmp	.+182    	; 0xaf0 <vfprintf+0x1b2>
 a3a:	22 c0       	rjmp	.+68     	; 0xa80 <vfprintf+0x142>
 a3c:	f8 01       	movw	r30, r16
 a3e:	80 81       	ld	r24, Z
 a40:	89 83       	std	Y+1, r24	; 0x01
 a42:	0e 5f       	subi	r16, 0xFE	; 254
 a44:	1f 4f       	sbci	r17, 0xFF	; 255
 a46:	44 24       	eor	r4, r4
 a48:	43 94       	inc	r4
 a4a:	51 2c       	mov	r5, r1
 a4c:	54 01       	movw	r10, r8
 a4e:	15 c0       	rjmp	.+42     	; 0xa7a <vfprintf+0x13c>
 a50:	38 01       	movw	r6, r16
 a52:	f2 e0       	ldi	r31, 0x02	; 2
 a54:	6f 0e       	add	r6, r31
 a56:	71 1c       	adc	r7, r1
 a58:	f8 01       	movw	r30, r16
 a5a:	a0 80       	ld	r10, Z
 a5c:	b1 80       	ldd	r11, Z+1	; 0x01
 a5e:	26 ff       	sbrs	r18, 6
 a60:	03 c0       	rjmp	.+6      	; 0xa68 <vfprintf+0x12a>
 a62:	65 2d       	mov	r22, r5
 a64:	70 e0       	ldi	r23, 0x00	; 0
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <vfprintf+0x12e>
 a68:	6f ef       	ldi	r22, 0xFF	; 255
 a6a:	7f ef       	ldi	r23, 0xFF	; 255
 a6c:	c5 01       	movw	r24, r10
 a6e:	2c 87       	std	Y+12, r18	; 0x0c
 a70:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <strnlen>
 a74:	2c 01       	movw	r4, r24
 a76:	83 01       	movw	r16, r6
 a78:	2c 85       	ldd	r18, Y+12	; 0x0c
 a7a:	2f 77       	andi	r18, 0x7F	; 127
 a7c:	22 2e       	mov	r2, r18
 a7e:	17 c0       	rjmp	.+46     	; 0xaae <vfprintf+0x170>
 a80:	38 01       	movw	r6, r16
 a82:	f2 e0       	ldi	r31, 0x02	; 2
 a84:	6f 0e       	add	r6, r31
 a86:	71 1c       	adc	r7, r1
 a88:	f8 01       	movw	r30, r16
 a8a:	a0 80       	ld	r10, Z
 a8c:	b1 80       	ldd	r11, Z+1	; 0x01
 a8e:	26 ff       	sbrs	r18, 6
 a90:	03 c0       	rjmp	.+6      	; 0xa98 <vfprintf+0x15a>
 a92:	65 2d       	mov	r22, r5
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <vfprintf+0x15e>
 a98:	6f ef       	ldi	r22, 0xFF	; 255
 a9a:	7f ef       	ldi	r23, 0xFF	; 255
 a9c:	c5 01       	movw	r24, r10
 a9e:	2c 87       	std	Y+12, r18	; 0x0c
 aa0:	0e 94 71 06 	call	0xce2	; 0xce2 <strnlen_P>
 aa4:	2c 01       	movw	r4, r24
 aa6:	2c 85       	ldd	r18, Y+12	; 0x0c
 aa8:	20 68       	ori	r18, 0x80	; 128
 aaa:	22 2e       	mov	r2, r18
 aac:	83 01       	movw	r16, r6
 aae:	23 fc       	sbrc	r2, 3
 ab0:	1b c0       	rjmp	.+54     	; 0xae8 <vfprintf+0x1aa>
 ab2:	83 2d       	mov	r24, r3
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	48 16       	cp	r4, r24
 ab8:	59 06       	cpc	r5, r25
 aba:	b0 f4       	brcc	.+44     	; 0xae8 <vfprintf+0x1aa>
 abc:	b7 01       	movw	r22, r14
 abe:	80 e2       	ldi	r24, 0x20	; 32
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 97 06 	call	0xd2e	; 0xd2e <fputc>
 ac6:	3a 94       	dec	r3
 ac8:	f4 cf       	rjmp	.-24     	; 0xab2 <vfprintf+0x174>
 aca:	f5 01       	movw	r30, r10
 acc:	27 fc       	sbrc	r2, 7
 ace:	85 91       	lpm	r24, Z+
 ad0:	27 fe       	sbrs	r2, 7
 ad2:	81 91       	ld	r24, Z+
 ad4:	5f 01       	movw	r10, r30
 ad6:	b7 01       	movw	r22, r14
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	0e 94 97 06 	call	0xd2e	; 0xd2e <fputc>
 ade:	31 10       	cpse	r3, r1
 ae0:	3a 94       	dec	r3
 ae2:	f1 e0       	ldi	r31, 0x01	; 1
 ae4:	4f 1a       	sub	r4, r31
 ae6:	51 08       	sbc	r5, r1
 ae8:	41 14       	cp	r4, r1
 aea:	51 04       	cpc	r5, r1
 aec:	71 f7       	brne	.-36     	; 0xaca <vfprintf+0x18c>
 aee:	e5 c0       	rjmp	.+458    	; 0xcba <vfprintf+0x37c>
 af0:	84 36       	cpi	r24, 0x64	; 100
 af2:	11 f0       	breq	.+4      	; 0xaf8 <vfprintf+0x1ba>
 af4:	89 36       	cpi	r24, 0x69	; 105
 af6:	39 f5       	brne	.+78     	; 0xb46 <vfprintf+0x208>
 af8:	f8 01       	movw	r30, r16
 afa:	27 ff       	sbrs	r18, 7
 afc:	07 c0       	rjmp	.+14     	; 0xb0c <vfprintf+0x1ce>
 afe:	60 81       	ld	r22, Z
 b00:	71 81       	ldd	r23, Z+1	; 0x01
 b02:	82 81       	ldd	r24, Z+2	; 0x02
 b04:	93 81       	ldd	r25, Z+3	; 0x03
 b06:	0c 5f       	subi	r16, 0xFC	; 252
 b08:	1f 4f       	sbci	r17, 0xFF	; 255
 b0a:	08 c0       	rjmp	.+16     	; 0xb1c <vfprintf+0x1de>
 b0c:	60 81       	ld	r22, Z
 b0e:	71 81       	ldd	r23, Z+1	; 0x01
 b10:	07 2e       	mov	r0, r23
 b12:	00 0c       	add	r0, r0
 b14:	88 0b       	sbc	r24, r24
 b16:	99 0b       	sbc	r25, r25
 b18:	0e 5f       	subi	r16, 0xFE	; 254
 b1a:	1f 4f       	sbci	r17, 0xFF	; 255
 b1c:	2f 76       	andi	r18, 0x6F	; 111
 b1e:	72 2e       	mov	r7, r18
 b20:	97 ff       	sbrs	r25, 7
 b22:	09 c0       	rjmp	.+18     	; 0xb36 <vfprintf+0x1f8>
 b24:	90 95       	com	r25
 b26:	80 95       	com	r24
 b28:	70 95       	com	r23
 b2a:	61 95       	neg	r22
 b2c:	7f 4f       	sbci	r23, 0xFF	; 255
 b2e:	8f 4f       	sbci	r24, 0xFF	; 255
 b30:	9f 4f       	sbci	r25, 0xFF	; 255
 b32:	20 68       	ori	r18, 0x80	; 128
 b34:	72 2e       	mov	r7, r18
 b36:	2a e0       	ldi	r18, 0x0A	; 10
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	a4 01       	movw	r20, r8
 b3c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__ultoa_invert>
 b40:	a8 2e       	mov	r10, r24
 b42:	a8 18       	sub	r10, r8
 b44:	44 c0       	rjmp	.+136    	; 0xbce <vfprintf+0x290>
 b46:	85 37       	cpi	r24, 0x75	; 117
 b48:	29 f4       	brne	.+10     	; 0xb54 <vfprintf+0x216>
 b4a:	2f 7e       	andi	r18, 0xEF	; 239
 b4c:	b2 2e       	mov	r11, r18
 b4e:	2a e0       	ldi	r18, 0x0A	; 10
 b50:	30 e0       	ldi	r19, 0x00	; 0
 b52:	25 c0       	rjmp	.+74     	; 0xb9e <vfprintf+0x260>
 b54:	f2 2f       	mov	r31, r18
 b56:	f9 7f       	andi	r31, 0xF9	; 249
 b58:	bf 2e       	mov	r11, r31
 b5a:	8f 36       	cpi	r24, 0x6F	; 111
 b5c:	c1 f0       	breq	.+48     	; 0xb8e <vfprintf+0x250>
 b5e:	18 f4       	brcc	.+6      	; 0xb66 <vfprintf+0x228>
 b60:	88 35       	cpi	r24, 0x58	; 88
 b62:	79 f0       	breq	.+30     	; 0xb82 <vfprintf+0x244>
 b64:	b4 c0       	rjmp	.+360    	; 0xcce <vfprintf+0x390>
 b66:	80 37       	cpi	r24, 0x70	; 112
 b68:	19 f0       	breq	.+6      	; 0xb70 <vfprintf+0x232>
 b6a:	88 37       	cpi	r24, 0x78	; 120
 b6c:	21 f0       	breq	.+8      	; 0xb76 <vfprintf+0x238>
 b6e:	af c0       	rjmp	.+350    	; 0xcce <vfprintf+0x390>
 b70:	2f 2f       	mov	r18, r31
 b72:	20 61       	ori	r18, 0x10	; 16
 b74:	b2 2e       	mov	r11, r18
 b76:	b4 fe       	sbrs	r11, 4
 b78:	0d c0       	rjmp	.+26     	; 0xb94 <vfprintf+0x256>
 b7a:	8b 2d       	mov	r24, r11
 b7c:	84 60       	ori	r24, 0x04	; 4
 b7e:	b8 2e       	mov	r11, r24
 b80:	09 c0       	rjmp	.+18     	; 0xb94 <vfprintf+0x256>
 b82:	24 ff       	sbrs	r18, 4
 b84:	0a c0       	rjmp	.+20     	; 0xb9a <vfprintf+0x25c>
 b86:	9f 2f       	mov	r25, r31
 b88:	96 60       	ori	r25, 0x06	; 6
 b8a:	b9 2e       	mov	r11, r25
 b8c:	06 c0       	rjmp	.+12     	; 0xb9a <vfprintf+0x25c>
 b8e:	28 e0       	ldi	r18, 0x08	; 8
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	05 c0       	rjmp	.+10     	; 0xb9e <vfprintf+0x260>
 b94:	20 e1       	ldi	r18, 0x10	; 16
 b96:	30 e0       	ldi	r19, 0x00	; 0
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <vfprintf+0x260>
 b9a:	20 e1       	ldi	r18, 0x10	; 16
 b9c:	32 e0       	ldi	r19, 0x02	; 2
 b9e:	f8 01       	movw	r30, r16
 ba0:	b7 fe       	sbrs	r11, 7
 ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <vfprintf+0x274>
 ba4:	60 81       	ld	r22, Z
 ba6:	71 81       	ldd	r23, Z+1	; 0x01
 ba8:	82 81       	ldd	r24, Z+2	; 0x02
 baa:	93 81       	ldd	r25, Z+3	; 0x03
 bac:	0c 5f       	subi	r16, 0xFC	; 252
 bae:	1f 4f       	sbci	r17, 0xFF	; 255
 bb0:	06 c0       	rjmp	.+12     	; 0xbbe <vfprintf+0x280>
 bb2:	60 81       	ld	r22, Z
 bb4:	71 81       	ldd	r23, Z+1	; 0x01
 bb6:	80 e0       	ldi	r24, 0x00	; 0
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 5f       	subi	r16, 0xFE	; 254
 bbc:	1f 4f       	sbci	r17, 0xFF	; 255
 bbe:	a4 01       	movw	r20, r8
 bc0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__ultoa_invert>
 bc4:	a8 2e       	mov	r10, r24
 bc6:	a8 18       	sub	r10, r8
 bc8:	fb 2d       	mov	r31, r11
 bca:	ff 77       	andi	r31, 0x7F	; 127
 bcc:	7f 2e       	mov	r7, r31
 bce:	76 fe       	sbrs	r7, 6
 bd0:	0b c0       	rjmp	.+22     	; 0xbe8 <vfprintf+0x2aa>
 bd2:	37 2d       	mov	r19, r7
 bd4:	3e 7f       	andi	r19, 0xFE	; 254
 bd6:	a5 14       	cp	r10, r5
 bd8:	50 f4       	brcc	.+20     	; 0xbee <vfprintf+0x2b0>
 bda:	74 fe       	sbrs	r7, 4
 bdc:	0a c0       	rjmp	.+20     	; 0xbf2 <vfprintf+0x2b4>
 bde:	72 fc       	sbrc	r7, 2
 be0:	08 c0       	rjmp	.+16     	; 0xbf2 <vfprintf+0x2b4>
 be2:	37 2d       	mov	r19, r7
 be4:	3e 7e       	andi	r19, 0xEE	; 238
 be6:	05 c0       	rjmp	.+10     	; 0xbf2 <vfprintf+0x2b4>
 be8:	ba 2c       	mov	r11, r10
 bea:	37 2d       	mov	r19, r7
 bec:	03 c0       	rjmp	.+6      	; 0xbf4 <vfprintf+0x2b6>
 bee:	ba 2c       	mov	r11, r10
 bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <vfprintf+0x2b6>
 bf2:	b5 2c       	mov	r11, r5
 bf4:	34 ff       	sbrs	r19, 4
 bf6:	0d c0       	rjmp	.+26     	; 0xc12 <vfprintf+0x2d4>
 bf8:	fe 01       	movw	r30, r28
 bfa:	ea 0d       	add	r30, r10
 bfc:	f1 1d       	adc	r31, r1
 bfe:	80 81       	ld	r24, Z
 c00:	80 33       	cpi	r24, 0x30	; 48
 c02:	11 f4       	brne	.+4      	; 0xc08 <vfprintf+0x2ca>
 c04:	39 7e       	andi	r19, 0xE9	; 233
 c06:	09 c0       	rjmp	.+18     	; 0xc1a <vfprintf+0x2dc>
 c08:	32 ff       	sbrs	r19, 2
 c0a:	06 c0       	rjmp	.+12     	; 0xc18 <vfprintf+0x2da>
 c0c:	b3 94       	inc	r11
 c0e:	b3 94       	inc	r11
 c10:	04 c0       	rjmp	.+8      	; 0xc1a <vfprintf+0x2dc>
 c12:	83 2f       	mov	r24, r19
 c14:	86 78       	andi	r24, 0x86	; 134
 c16:	09 f0       	breq	.+2      	; 0xc1a <vfprintf+0x2dc>
 c18:	b3 94       	inc	r11
 c1a:	33 fd       	sbrc	r19, 3
 c1c:	13 c0       	rjmp	.+38     	; 0xc44 <vfprintf+0x306>
 c1e:	30 ff       	sbrs	r19, 0
 c20:	06 c0       	rjmp	.+12     	; 0xc2e <vfprintf+0x2f0>
 c22:	5a 2c       	mov	r5, r10
 c24:	b3 14       	cp	r11, r3
 c26:	18 f4       	brcc	.+6      	; 0xc2e <vfprintf+0x2f0>
 c28:	53 0c       	add	r5, r3
 c2a:	5b 18       	sub	r5, r11
 c2c:	b3 2c       	mov	r11, r3
 c2e:	b3 14       	cp	r11, r3
 c30:	68 f4       	brcc	.+26     	; 0xc4c <vfprintf+0x30e>
 c32:	b7 01       	movw	r22, r14
 c34:	80 e2       	ldi	r24, 0x20	; 32
 c36:	90 e0       	ldi	r25, 0x00	; 0
 c38:	3c 87       	std	Y+12, r19	; 0x0c
 c3a:	0e 94 97 06 	call	0xd2e	; 0xd2e <fputc>
 c3e:	b3 94       	inc	r11
 c40:	3c 85       	ldd	r19, Y+12	; 0x0c
 c42:	f5 cf       	rjmp	.-22     	; 0xc2e <vfprintf+0x2f0>
 c44:	b3 14       	cp	r11, r3
 c46:	10 f4       	brcc	.+4      	; 0xc4c <vfprintf+0x30e>
 c48:	3b 18       	sub	r3, r11
 c4a:	01 c0       	rjmp	.+2      	; 0xc4e <vfprintf+0x310>
 c4c:	31 2c       	mov	r3, r1
 c4e:	34 ff       	sbrs	r19, 4
 c50:	12 c0       	rjmp	.+36     	; 0xc76 <vfprintf+0x338>
 c52:	b7 01       	movw	r22, r14
 c54:	80 e3       	ldi	r24, 0x30	; 48
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	3c 87       	std	Y+12, r19	; 0x0c
 c5a:	0e 94 97 06 	call	0xd2e	; 0xd2e <fputc>
 c5e:	3c 85       	ldd	r19, Y+12	; 0x0c
 c60:	32 ff       	sbrs	r19, 2
 c62:	17 c0       	rjmp	.+46     	; 0xc92 <vfprintf+0x354>
 c64:	31 fd       	sbrc	r19, 1
 c66:	03 c0       	rjmp	.+6      	; 0xc6e <vfprintf+0x330>
 c68:	88 e7       	ldi	r24, 0x78	; 120
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	02 c0       	rjmp	.+4      	; 0xc72 <vfprintf+0x334>
 c6e:	88 e5       	ldi	r24, 0x58	; 88
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	b7 01       	movw	r22, r14
 c74:	0c c0       	rjmp	.+24     	; 0xc8e <vfprintf+0x350>
 c76:	83 2f       	mov	r24, r19
 c78:	86 78       	andi	r24, 0x86	; 134
 c7a:	59 f0       	breq	.+22     	; 0xc92 <vfprintf+0x354>
 c7c:	31 ff       	sbrs	r19, 1
 c7e:	02 c0       	rjmp	.+4      	; 0xc84 <vfprintf+0x346>
 c80:	8b e2       	ldi	r24, 0x2B	; 43
 c82:	01 c0       	rjmp	.+2      	; 0xc86 <vfprintf+0x348>
 c84:	80 e2       	ldi	r24, 0x20	; 32
 c86:	37 fd       	sbrc	r19, 7
 c88:	8d e2       	ldi	r24, 0x2D	; 45
 c8a:	b7 01       	movw	r22, r14
 c8c:	90 e0       	ldi	r25, 0x00	; 0
 c8e:	0e 94 97 06 	call	0xd2e	; 0xd2e <fputc>
 c92:	a5 14       	cp	r10, r5
 c94:	38 f4       	brcc	.+14     	; 0xca4 <vfprintf+0x366>
 c96:	b7 01       	movw	r22, r14
 c98:	80 e3       	ldi	r24, 0x30	; 48
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	0e 94 97 06 	call	0xd2e	; 0xd2e <fputc>
 ca0:	5a 94       	dec	r5
 ca2:	f7 cf       	rjmp	.-18     	; 0xc92 <vfprintf+0x354>
 ca4:	aa 94       	dec	r10
 ca6:	f4 01       	movw	r30, r8
 ca8:	ea 0d       	add	r30, r10
 caa:	f1 1d       	adc	r31, r1
 cac:	80 81       	ld	r24, Z
 cae:	b7 01       	movw	r22, r14
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	0e 94 97 06 	call	0xd2e	; 0xd2e <fputc>
 cb6:	a1 10       	cpse	r10, r1
 cb8:	f5 cf       	rjmp	.-22     	; 0xca4 <vfprintf+0x366>
 cba:	33 20       	and	r3, r3
 cbc:	09 f4       	brne	.+2      	; 0xcc0 <vfprintf+0x382>
 cbe:	51 ce       	rjmp	.-862    	; 0x962 <vfprintf+0x24>
 cc0:	b7 01       	movw	r22, r14
 cc2:	80 e2       	ldi	r24, 0x20	; 32
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	0e 94 97 06 	call	0xd2e	; 0xd2e <fputc>
 cca:	3a 94       	dec	r3
 ccc:	f6 cf       	rjmp	.-20     	; 0xcba <vfprintf+0x37c>
 cce:	f7 01       	movw	r30, r14
 cd0:	86 81       	ldd	r24, Z+6	; 0x06
 cd2:	97 81       	ldd	r25, Z+7	; 0x07
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x39c>
 cd6:	8f ef       	ldi	r24, 0xFF	; 255
 cd8:	9f ef       	ldi	r25, 0xFF	; 255
 cda:	2c 96       	adiw	r28, 0x0c	; 12
 cdc:	e2 e1       	ldi	r30, 0x12	; 18
 cde:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__epilogue_restores__>

00000ce2 <strnlen_P>:
 ce2:	fc 01       	movw	r30, r24
 ce4:	05 90       	lpm	r0, Z+
 ce6:	61 50       	subi	r22, 0x01	; 1
 ce8:	70 40       	sbci	r23, 0x00	; 0
 cea:	01 10       	cpse	r0, r1
 cec:	d8 f7       	brcc	.-10     	; 0xce4 <strnlen_P+0x2>
 cee:	80 95       	com	r24
 cf0:	90 95       	com	r25
 cf2:	8e 0f       	add	r24, r30
 cf4:	9f 1f       	adc	r25, r31
 cf6:	08 95       	ret

00000cf8 <strnlen>:
 cf8:	fc 01       	movw	r30, r24
 cfa:	61 50       	subi	r22, 0x01	; 1
 cfc:	70 40       	sbci	r23, 0x00	; 0
 cfe:	01 90       	ld	r0, Z+
 d00:	01 10       	cpse	r0, r1
 d02:	d8 f7       	brcc	.-10     	; 0xcfa <strnlen+0x2>
 d04:	80 95       	com	r24
 d06:	90 95       	com	r25
 d08:	8e 0f       	add	r24, r30
 d0a:	9f 1f       	adc	r25, r31
 d0c:	08 95       	ret

00000d0e <strrev>:
 d0e:	dc 01       	movw	r26, r24
 d10:	fc 01       	movw	r30, r24
 d12:	67 2f       	mov	r22, r23
 d14:	71 91       	ld	r23, Z+
 d16:	77 23       	and	r23, r23
 d18:	e1 f7       	brne	.-8      	; 0xd12 <strrev+0x4>
 d1a:	32 97       	sbiw	r30, 0x02	; 2
 d1c:	04 c0       	rjmp	.+8      	; 0xd26 <strrev+0x18>
 d1e:	7c 91       	ld	r23, X
 d20:	6d 93       	st	X+, r22
 d22:	70 83       	st	Z, r23
 d24:	62 91       	ld	r22, -Z
 d26:	ae 17       	cp	r26, r30
 d28:	bf 07       	cpc	r27, r31
 d2a:	c8 f3       	brcs	.-14     	; 0xd1e <strrev+0x10>
 d2c:	08 95       	ret

00000d2e <fputc>:
 d2e:	0f 93       	push	r16
 d30:	1f 93       	push	r17
 d32:	cf 93       	push	r28
 d34:	df 93       	push	r29
 d36:	fb 01       	movw	r30, r22
 d38:	23 81       	ldd	r18, Z+3	; 0x03
 d3a:	21 fd       	sbrc	r18, 1
 d3c:	03 c0       	rjmp	.+6      	; 0xd44 <fputc+0x16>
 d3e:	8f ef       	ldi	r24, 0xFF	; 255
 d40:	9f ef       	ldi	r25, 0xFF	; 255
 d42:	28 c0       	rjmp	.+80     	; 0xd94 <fputc+0x66>
 d44:	22 ff       	sbrs	r18, 2
 d46:	16 c0       	rjmp	.+44     	; 0xd74 <fputc+0x46>
 d48:	46 81       	ldd	r20, Z+6	; 0x06
 d4a:	57 81       	ldd	r21, Z+7	; 0x07
 d4c:	24 81       	ldd	r18, Z+4	; 0x04
 d4e:	35 81       	ldd	r19, Z+5	; 0x05
 d50:	42 17       	cp	r20, r18
 d52:	53 07       	cpc	r21, r19
 d54:	44 f4       	brge	.+16     	; 0xd66 <fputc+0x38>
 d56:	a0 81       	ld	r26, Z
 d58:	b1 81       	ldd	r27, Z+1	; 0x01
 d5a:	9d 01       	movw	r18, r26
 d5c:	2f 5f       	subi	r18, 0xFF	; 255
 d5e:	3f 4f       	sbci	r19, 0xFF	; 255
 d60:	20 83       	st	Z, r18
 d62:	31 83       	std	Z+1, r19	; 0x01
 d64:	8c 93       	st	X, r24
 d66:	26 81       	ldd	r18, Z+6	; 0x06
 d68:	37 81       	ldd	r19, Z+7	; 0x07
 d6a:	2f 5f       	subi	r18, 0xFF	; 255
 d6c:	3f 4f       	sbci	r19, 0xFF	; 255
 d6e:	26 83       	std	Z+6, r18	; 0x06
 d70:	37 83       	std	Z+7, r19	; 0x07
 d72:	10 c0       	rjmp	.+32     	; 0xd94 <fputc+0x66>
 d74:	eb 01       	movw	r28, r22
 d76:	09 2f       	mov	r16, r25
 d78:	18 2f       	mov	r17, r24
 d7a:	00 84       	ldd	r0, Z+8	; 0x08
 d7c:	f1 85       	ldd	r31, Z+9	; 0x09
 d7e:	e0 2d       	mov	r30, r0
 d80:	09 95       	icall
 d82:	89 2b       	or	r24, r25
 d84:	e1 f6       	brne	.-72     	; 0xd3e <fputc+0x10>
 d86:	8e 81       	ldd	r24, Y+6	; 0x06
 d88:	9f 81       	ldd	r25, Y+7	; 0x07
 d8a:	01 96       	adiw	r24, 0x01	; 1
 d8c:	8e 83       	std	Y+6, r24	; 0x06
 d8e:	9f 83       	std	Y+7, r25	; 0x07
 d90:	81 2f       	mov	r24, r17
 d92:	90 2f       	mov	r25, r16
 d94:	df 91       	pop	r29
 d96:	cf 91       	pop	r28
 d98:	1f 91       	pop	r17
 d9a:	0f 91       	pop	r16
 d9c:	08 95       	ret

00000d9e <__ultoa_invert>:
 d9e:	fa 01       	movw	r30, r20
 da0:	aa 27       	eor	r26, r26
 da2:	28 30       	cpi	r18, 0x08	; 8
 da4:	51 f1       	breq	.+84     	; 0xdfa <__ultoa_invert+0x5c>
 da6:	20 31       	cpi	r18, 0x10	; 16
 da8:	81 f1       	breq	.+96     	; 0xe0a <__ultoa_invert+0x6c>
 daa:	e8 94       	clt
 dac:	6f 93       	push	r22
 dae:	6e 7f       	andi	r22, 0xFE	; 254
 db0:	6e 5f       	subi	r22, 0xFE	; 254
 db2:	7f 4f       	sbci	r23, 0xFF	; 255
 db4:	8f 4f       	sbci	r24, 0xFF	; 255
 db6:	9f 4f       	sbci	r25, 0xFF	; 255
 db8:	af 4f       	sbci	r26, 0xFF	; 255
 dba:	b1 e0       	ldi	r27, 0x01	; 1
 dbc:	3e d0       	rcall	.+124    	; 0xe3a <__ultoa_invert+0x9c>
 dbe:	b4 e0       	ldi	r27, 0x04	; 4
 dc0:	3c d0       	rcall	.+120    	; 0xe3a <__ultoa_invert+0x9c>
 dc2:	67 0f       	add	r22, r23
 dc4:	78 1f       	adc	r23, r24
 dc6:	89 1f       	adc	r24, r25
 dc8:	9a 1f       	adc	r25, r26
 dca:	a1 1d       	adc	r26, r1
 dcc:	68 0f       	add	r22, r24
 dce:	79 1f       	adc	r23, r25
 dd0:	8a 1f       	adc	r24, r26
 dd2:	91 1d       	adc	r25, r1
 dd4:	a1 1d       	adc	r26, r1
 dd6:	6a 0f       	add	r22, r26
 dd8:	71 1d       	adc	r23, r1
 dda:	81 1d       	adc	r24, r1
 ddc:	91 1d       	adc	r25, r1
 dde:	a1 1d       	adc	r26, r1
 de0:	20 d0       	rcall	.+64     	; 0xe22 <__ultoa_invert+0x84>
 de2:	09 f4       	brne	.+2      	; 0xde6 <__ultoa_invert+0x48>
 de4:	68 94       	set
 de6:	3f 91       	pop	r19
 de8:	2a e0       	ldi	r18, 0x0A	; 10
 dea:	26 9f       	mul	r18, r22
 dec:	11 24       	eor	r1, r1
 dee:	30 19       	sub	r19, r0
 df0:	30 5d       	subi	r19, 0xD0	; 208
 df2:	31 93       	st	Z+, r19
 df4:	de f6       	brtc	.-74     	; 0xdac <__ultoa_invert+0xe>
 df6:	cf 01       	movw	r24, r30
 df8:	08 95       	ret
 dfa:	46 2f       	mov	r20, r22
 dfc:	47 70       	andi	r20, 0x07	; 7
 dfe:	40 5d       	subi	r20, 0xD0	; 208
 e00:	41 93       	st	Z+, r20
 e02:	b3 e0       	ldi	r27, 0x03	; 3
 e04:	0f d0       	rcall	.+30     	; 0xe24 <__ultoa_invert+0x86>
 e06:	c9 f7       	brne	.-14     	; 0xdfa <__ultoa_invert+0x5c>
 e08:	f6 cf       	rjmp	.-20     	; 0xdf6 <__ultoa_invert+0x58>
 e0a:	46 2f       	mov	r20, r22
 e0c:	4f 70       	andi	r20, 0x0F	; 15
 e0e:	40 5d       	subi	r20, 0xD0	; 208
 e10:	4a 33       	cpi	r20, 0x3A	; 58
 e12:	18 f0       	brcs	.+6      	; 0xe1a <__ultoa_invert+0x7c>
 e14:	49 5d       	subi	r20, 0xD9	; 217
 e16:	31 fd       	sbrc	r19, 1
 e18:	40 52       	subi	r20, 0x20	; 32
 e1a:	41 93       	st	Z+, r20
 e1c:	02 d0       	rcall	.+4      	; 0xe22 <__ultoa_invert+0x84>
 e1e:	a9 f7       	brne	.-22     	; 0xe0a <__ultoa_invert+0x6c>
 e20:	ea cf       	rjmp	.-44     	; 0xdf6 <__ultoa_invert+0x58>
 e22:	b4 e0       	ldi	r27, 0x04	; 4
 e24:	a6 95       	lsr	r26
 e26:	97 95       	ror	r25
 e28:	87 95       	ror	r24
 e2a:	77 95       	ror	r23
 e2c:	67 95       	ror	r22
 e2e:	ba 95       	dec	r27
 e30:	c9 f7       	brne	.-14     	; 0xe24 <__ultoa_invert+0x86>
 e32:	00 97       	sbiw	r24, 0x00	; 0
 e34:	61 05       	cpc	r22, r1
 e36:	71 05       	cpc	r23, r1
 e38:	08 95       	ret
 e3a:	9b 01       	movw	r18, r22
 e3c:	ac 01       	movw	r20, r24
 e3e:	0a 2e       	mov	r0, r26
 e40:	06 94       	lsr	r0
 e42:	57 95       	ror	r21
 e44:	47 95       	ror	r20
 e46:	37 95       	ror	r19
 e48:	27 95       	ror	r18
 e4a:	ba 95       	dec	r27
 e4c:	c9 f7       	brne	.-14     	; 0xe40 <__ultoa_invert+0xa2>
 e4e:	62 0f       	add	r22, r18
 e50:	73 1f       	adc	r23, r19
 e52:	84 1f       	adc	r24, r20
 e54:	95 1f       	adc	r25, r21
 e56:	a0 1d       	adc	r26, r0
 e58:	08 95       	ret

00000e5a <__prologue_saves__>:
 e5a:	2f 92       	push	r2
 e5c:	3f 92       	push	r3
 e5e:	4f 92       	push	r4
 e60:	5f 92       	push	r5
 e62:	6f 92       	push	r6
 e64:	7f 92       	push	r7
 e66:	8f 92       	push	r8
 e68:	9f 92       	push	r9
 e6a:	af 92       	push	r10
 e6c:	bf 92       	push	r11
 e6e:	cf 92       	push	r12
 e70:	df 92       	push	r13
 e72:	ef 92       	push	r14
 e74:	ff 92       	push	r15
 e76:	0f 93       	push	r16
 e78:	1f 93       	push	r17
 e7a:	cf 93       	push	r28
 e7c:	df 93       	push	r29
 e7e:	cd b7       	in	r28, 0x3d	; 61
 e80:	de b7       	in	r29, 0x3e	; 62
 e82:	ca 1b       	sub	r28, r26
 e84:	db 0b       	sbc	r29, r27
 e86:	cd bf       	out	0x3d, r28	; 61
 e88:	de bf       	out	0x3e, r29	; 62
 e8a:	09 94       	ijmp

00000e8c <__epilogue_restores__>:
 e8c:	2a 88       	ldd	r2, Y+18	; 0x12
 e8e:	39 88       	ldd	r3, Y+17	; 0x11
 e90:	48 88       	ldd	r4, Y+16	; 0x10
 e92:	5f 84       	ldd	r5, Y+15	; 0x0f
 e94:	6e 84       	ldd	r6, Y+14	; 0x0e
 e96:	7d 84       	ldd	r7, Y+13	; 0x0d
 e98:	8c 84       	ldd	r8, Y+12	; 0x0c
 e9a:	9b 84       	ldd	r9, Y+11	; 0x0b
 e9c:	aa 84       	ldd	r10, Y+10	; 0x0a
 e9e:	b9 84       	ldd	r11, Y+9	; 0x09
 ea0:	c8 84       	ldd	r12, Y+8	; 0x08
 ea2:	df 80       	ldd	r13, Y+7	; 0x07
 ea4:	ee 80       	ldd	r14, Y+6	; 0x06
 ea6:	fd 80       	ldd	r15, Y+5	; 0x05
 ea8:	0c 81       	ldd	r16, Y+4	; 0x04
 eaa:	1b 81       	ldd	r17, Y+3	; 0x03
 eac:	aa 81       	ldd	r26, Y+2	; 0x02
 eae:	b9 81       	ldd	r27, Y+1	; 0x01
 eb0:	ce 0f       	add	r28, r30
 eb2:	d1 1d       	adc	r29, r1
 eb4:	cd bf       	out	0x3d, r28	; 61
 eb6:	de bf       	out	0x3e, r29	; 62
 eb8:	ed 01       	movw	r28, r26
 eba:	08 95       	ret

00000ebc <_exit>:
 ebc:	f8 94       	cli

00000ebe <__stop_program>:
 ebe:	ff cf       	rjmp	.-2      	; 0xebe <__stop_program>
